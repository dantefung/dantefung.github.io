<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/20/vue/"/>
    <url>/2024/10/20/vue/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><pre><code class="hljs 1c">/*              ,,))))))));,           __)))))))))))))),\<span class="hljs-string">|/       -\(((((&#x27;&#x27;&#x27;&#x27;((((((((.</span>-*-==<span class="hljs-comment">//////((&#x27;&#x27;  .     `)))))),</span>/<span class="hljs-string">|\      ))| o    ;-.    &#x27;(((((                                  ,(,</span>         ( `<span class="hljs-string">|    /  )    ;))))&#x27;                               ,_))^;(~</span>            <span class="hljs-string">|   |   |   ,))((((_     _____------~~~-.        %,;(;(&gt;&#x27;;&#x27;~</span>            o_);   ;    )))(((` <span class="hljs-symbol">~---~  `</span>::           \      %%<span class="hljs-symbol">~~)(v</span>;(`(&#x27;~                  ;    &#x27;&#x27;&#x27;&#x27;````         `:       `:::|\,__,%%    );`&#x27;; <span class="hljs-symbol">~</span><span class="hljs-symbol">                 |   _                )     /      `</span>:<span class="hljs-string">|`----&#x27;     `-&#x27;</span>           ______/\/<span class="hljs-symbol">~    |                 /        /</span><span class="hljs-symbol">         /~</span>;;.____/;;&#x27;  /          ___--,-(   `;;;/        / //  _;______;&#x27;------<span class="hljs-symbol">~~~~~    /</span>;;/\    /       <span class="hljs-comment">//  | |                        / ;   \;;,\</span>      (&lt;_  <span class="hljs-string">| ;                      /&#x27;,/-----&#x27;  _&gt;</span>       \_<span class="hljs-string">| ||_                     //~;~~~~~~~~~</span>           `\_<span class="hljs-string">|                   (,~~</span>                                   \<span class="hljs-symbol">~\</span><span class="hljs-symbol">                                    ~~</span><span class="hljs-symbol">*/</span></code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>1、打开终端，键入命令</p><blockquote><p>npm init -y</p></blockquote><p>该命令可以初始化一个项目<strong>描述文件</strong>package.json文件</p><blockquote><p>cnpm install vue  –save</p></blockquote><p>默认就会安装最新版本</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>1、如果环境遇到“cnpm：command not found”</code></p><p>问题是因为你没有安装淘宝的镜像,在终端键入如下命令即可:</p><blockquote><p>npm install cnpm -g –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的一些命令行配置</title>
    <link href="/2024/07/06/%E6%88%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/07/06/%E6%88%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="我的一些命令行配置"><a href="#我的一些命令行配置" class="headerlink" title="我的一些命令行配置"></a>我的一些命令行配置</h2><blockquote><p>目前采用一个仓库维护效率相关的工具和文章</p></blockquote><h3 id="gitconfig"><a href="#gitconfig" class="headerlink" title="gitconfig"></a>gitconfig</h3><p><code>.gitconfig</code></p><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]email = xxx@qq.com<span class="hljs-type">name</span> = xyz[core]autocrlf = <span class="hljs-keyword">true</span>[<span class="hljs-keyword">alias</span>]    fb = !sh -c \&quot;git branch -a | grep -v remotes | grep $1 | head -n 1 | xargs git checkout\&quot;    co = checkout     ci = <span class="hljs-keyword">commit</span>         st = status         pl = pull         ps = push         dt = difftool         l = <span class="hljs-keyword">log</span> <span class="hljs-comment">--stat </span>        cp = cherry-pick         ca = <span class="hljs-keyword">commit</span> -a         b = branch    gu = ls-files . <span class="hljs-comment">--exclude-standard --others</span>          sl = <span class="hljs-keyword">log</span> <span class="hljs-comment">--graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit --date=relative --all --since=&#x27;90 days ago&#x27;</span>      <span class="hljs-keyword">summary</span> = <span class="hljs-keyword">show</span>  # Mercurial crib[color]        diff = auto        status = auto        branch = auto        interactive = auto        ui = <span class="hljs-keyword">true</span>        pager = <span class="hljs-keyword">true</span>[color &quot;branch&quot;]        <span class="hljs-keyword">current</span> = yellow <span class="hljs-keyword">reverse</span>        <span class="hljs-keyword">local</span> = yellow        remote = green[color &quot;diff&quot;]        meta = yellow bold        frag = magenta bold        <span class="hljs-built_in">old</span> = red bold        <span class="hljs-built_in">new</span> = green bold[color &quot;status&quot;]        added = yellow        changed = green        untracked = cyan</code></pre><h3 id="bashrc"><a href="#bashrc" class="headerlink" title="bashrc"></a>bashrc</h3><p><code>.bashrc</code></p><pre><code class="hljs abnf">alias start_proxy<span class="hljs-operator">=</span><span class="hljs-string">&quot;export https_proxy=http://127.0.0.1:1080&quot;</span>alias stop_proxy<span class="hljs-operator">=</span><span class="hljs-string">&quot;unset https_proxy&quot;</span></code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Where-system-global-and-local-Windows-Git-config-files-are-saved">System, global and local Git config files on Windows and Linux</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>效率</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下配置文件加载顺序</title>
    <link href="/2024/07/06/Linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <url>/2024/07/06/Linux%E4%B8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Linux下配置文件加载顺序"><a href="#Linux下配置文件加载顺序" class="headerlink" title="Linux下配置文件加载顺序"></a>Linux下配置文件加载顺序</h2><h2 id="检查的环境变量文件的情况之系统运行-Shell-的方式"><a href="#检查的环境变量文件的情况之系统运行-Shell-的方式" class="headerlink" title="检查的环境变量文件的情况之系统运行 Shell 的方式"></a>检查的环境变量文件的情况之系统运行 Shell 的方式</h2><blockquote><p>在登录 Linux 系统并启动一个 bash shell 时，默认情况下 bash 会在若干个文件中查找环境变量的设置，这些文件可统称为系统环境文件，bash 检查的环境变量文件的情况取决于系统运行 Shell 的方式，系统运行 Shell 的方式有 3 种。</p></blockquote><p><strong>1、登录 shell 方式进入 Linux</strong></p><p>账号和密码——&gt;/etc/profile（全局文件 G1）——&gt;/etc/profile.d/（全局脚本目录 F1）——&gt; ~/.bash_profile（用户文件 U1）——&gt; ~/.bashrc（用户文件 U2）——&gt;/etc/bashrc（全局文件 G2）</p><p><strong>2、非登录 Shell 方式进入 Linux</strong></p><p>不需要输入密码的登录及远程 SSH 连接——&gt;  ~/.bashrc（用户文件 U2）——&gt;/etc/bashrc（全局文件 G2）</p><h2 id="环境变量初始化与对应文件的加载顺序"><a href="#环境变量初始化与对应文件的加载顺序" class="headerlink" title="环境变量初始化与对应文件的加载顺序"></a>环境变量初始化与对应文件的加载顺序</h2><p>1、/etc/profile：系统配置文件，用户登录时读取一次<br>2、/etc/bash.bashrc：（Ubuntu）系统配置文件，用户登录时读取一次，每次打开一个新终端会话时读取一次。<br>/etc/bashrc： （Centos）系统配置文件，用户登录时读取一次，每次打开一个新终端会话时读取一次。<br>3、<del>/.profile（</del>/.bash_profile、<del>/.bash_login）：用户配置文件，用户登录时读取一次<br>4、</del>/.bashrc：用户配置文件，用户登录时读取一次，每次打开一个新终端会话时读取一次</p><p>对于 <del>/.bash_profile、</del>/.bash_login、~/.profile，如果终端绑定的是 bash，则按照我书写的顺序进行读取（如果存在，就不继续读取）</p><p>1、系统配置文件作用于全局，而用户配置文件仅针对当前登录的用户<br>2、先读取系统配置文件，再读取用户配置文件，用户配置文件的变量和表达式等都继承自系统配置文件</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.cnblogs.com/andy9468/p/13321905.html">Linux 配置文件的生效顺序：profile、bashrc 等</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活管理系统</title>
    <link href="/2023/07/22/%E7%94%9F%E6%B4%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/07/22/%E7%94%9F%E6%B4%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="生活管理系统"><a href="#生活管理系统" class="headerlink" title="生活管理系统"></a>生活管理系统</h1><h2 id="知行合一"><a href="#知行合一" class="headerlink" title="知行合一"></a>知行合一</h2><blockquote><p>我整理了自己近段时间以来的生活管理和知识管理系统，做了这么一张流程图，分享给你。希望能给你一些启发和感悟。<br>我给这个生活管理系统的标签是「知行合一」，希望能够让知识流动起来，融贯到生活中的方方面面，来指导我们更好地行动，创造出更多的价值。</p></blockquote><img src="/2023/07/22/%E7%94%9F%E6%B4%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2023-07-22-21-40-26.png" class=""><h2 id="思维和行为"><a href="#思维和行为" class="headerlink" title="思维和行为"></a>思维和行为</h2><img src="/2023/07/22/%E7%94%9F%E6%B4%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2023-07-22-22-53-00.png" class=""><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://mp.weixin.qq.com/s/eV7mDvVBnUdrmIUZiaa4QA">思己录-4：思维和行为</a></li><li><a href="https://mp.weixin.qq.com/s/yPJyRROXVHgQYWML1BmU5g">分享我的 2023 版生活管理流程图</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>思维改变生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思维改变生活</tag>
      
      <tag>认知升级</tag>
      
      <tag>mine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高效工作的策略2.0</title>
    <link href="/2023/07/13/%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AD%96%E7%95%A52-0/"/>
    <url>/2023/07/13/%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AD%96%E7%95%A52-0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://mp.weixin.qq.com/s/xq6zrjFlQw-edOe8ZR05HA">mp.weixin.qq.com</a></p></blockquote><blockquote><p>文 | 少个分号 （转载请注明出处）</p></blockquote><blockquote><p>关注公众号：DDD 和微服务</p></blockquote><blockquote><p>微信号：linksgo2016</p></blockquote><blockquote><p>同名知乎：少个分号</p></blockquote><p>现代人对自己的压榨达到了极致，对工作效率的诉求越来越高。</p><p>不同的理念、方法、概念层出不穷，番茄钟、清单、早起、费曼学习法、心流等等。我读过各种时间管理的书，这些方法都试过。</p><p>效果是不错，但是太累，精力消耗严重，难以持续发展。</p><p>慢慢我意识到，人一天能做的事情极其有限，但是却极其贪婪用各个方法把自己的精力快速耗尽。其实真正能提高效率的方法是管理好自己的精力，让有限的精力不浪费就很不错了。</p><p>一个明显的感觉就是，当一个人精力不足时候，无论用啥方法，都很难集中注意力。</p><p>慢慢的我的关注点变为如何休息、注意力管理和精力管理。</p><h2 id="1-如何休息"><a href="#1-如何休息" class="headerlink" title="1. 如何休息"></a>1. 如何休息</h2><p>休息是提高效率的基础，就像存储子弹，如果不好好休息，就无法好好工作。</p><p>睡觉。这个是休息中最重要的一件事，我一直睡眠不好，于是寻找了一些关于改善睡眠的方法。</p><p>总结下来的经验是，睡眠方法需要学习，且因人而异。一定不能相信所谓成功人士每天 4 小时的睡眠，大部分人一般需要 7 个小时左右，但具体时间和个人的状态有关。早睡和健康状态好的时候，我只需要 6 个小时睡眠时间加一点午睡即可，但是一旦生病或者工作压力大就需要 8 个小时左右的睡眠时间。</p><p>另外 R90 睡眠法经过实践检验，通过 90 分钟的睡眠周期，确实有用，状态好的时候可以不用闹钟自然醒来。</p><p>《睡眠革命》这本书介绍了一种新的睡眠方法。每个人的睡眠呈周期性的规律，一个周期内分为浅睡、深睡、眼动睡等阶段，一个完整的周期在 90 分钟左右，完成一个周期后趋向于相对清醒（这也是做梦的原理）。如果你起床时并不在周期结束之时，早晨起床时会感觉整个人都是蒙的，因为你的睡眠周期被打断。</p><p>人一般需要 4 - 5 个周期。如果你晚上 11:30 睡觉，4 个周期就是第二天 5:30 需要醒来，5 个周期就是 7:00，几天时间适应后可以赶在闹钟前自动醒来。一般工作日需要多一点睡眠，使用 5 个周期，周末用 4 个周期即可。</p><p>放松。 另外一种休息的方式就是坐在沙发上啥也不做，啥也不想。有人会说冥想是一种恢复精力的方法，其实有点不对，冥想的注意点很多，不得要领的人搞一套下来反而更累。</p><p>简单的方式其实就是没有方法的放松即可。找一个舒服的姿势坐在沙发上，盘腿或者怎么样都行。除了工作的事情，可以任其心猿意马。杂念宜疏不宜堵，一些冥想和灵修的书会用各种方式控制杂念，其实有点走偏。</p><p>唯一需要注意的就是呼吸，细长、稳定的呼吸方式确实可以提高休息效率，《庄子》的听息法是一种最简单的方法，就是听自己的呼吸声，然后降低呼吸的声音。</p><p>有人总结了松、通、空三个字可以概括放松休息的方法。</p><p>喝水。人需要喝水，浓茶、可乐都不太能代替水。多喝水的好处是可以起来上厕所，避免久坐。</p><p>早上经过八个小时的睡眠，身体已经缺水了，起床第一时间就是喝水。</p><p>运动。 我不擅长运动，也没怎么去过健身房。运动可以激活人身体状态，不过也需要适度。加完班、缺乏睡眠的状态下不适合运动，会发生猝死等危险，而且人的精力会进一步透支。</p><p>众所周知，运动分为有氧和无氧。有一段时间我按照朋友推荐的方法，每天做一些超过我日常能力的运动，那段时间明显发现身体无法应付锻炼和日常工作。</p><p>工作日可以做一些无氧运动，换换脑子，休息日出去徒步进行有氧运动，比较合适。</p><h2 id="2-如何获得注意力"><a href="#2-如何获得注意力" class="headerlink" title="2. 如何获得注意力"></a>2. 如何获得注意力</h2><p>效率的关键是获得注意力，教员曾说 “对于人，伤其十指不如断其一指，对于敌，击溃其十个师不如歼灭其一个师。” 对于工作的事情，宁可做完一件事，不要 10 件事做一点。</p><p>目标感。 把时间、精力集中在重要的事情上，不然做再多的事情都是浪费。非常羡慕有一些人的目标感极强，能十年如一日的坚持，回报也是极大的。</p><p>目标感分为：战略目标和战术目标。战略目标就是几年内的大目标，战术目标可以是具体到每周、每天的目标。</p><p>战略目标具有很大的不确定性，和外部环境息息相关，可以随时调整。</p><p>战术目标则需要集中，执行力强的人对战术目标要求很严格。战术目标不要定的太大，因为人需要一种完成任务后的满足感，虽然大的目标带来的满足感强但是很难到达。一个小的目标让人获得快速的满足感，比如一篇文章、阅读一本书，这种满足感可以快速获得，也能坚持。</p><p>清单。高效的人都是清单控。每个人基本都会使用清单安排工作，不过使用清单的方法不同。</p><p>有很多清单软件，我自己用过很多，也给自己做了一个简单的清单应用。这些软件不见得好用，我还是比较喜欢直接使用文本列表来记录即可。每天写在一个 markdown 笔记本中就完全足够了。</p><p>可以把清单分为两类：主要清单和火炉清单。</p><ul><li><p>主要清单：就是当天必须完成的工作，尽量少，避免完不成带来的挫败感。</p></li><li><p>火炉清单：不是必须做的，但做了更好的清单，如果当天完不成也没有关系。</p></li></ul><p>使用两个清单把目标的任务放到主要清单，高优先级，不重要的事情放入火炉清单，低优先级。现实是完成主要清单后，就可以休息，完成火炉清单的任何一项都可以带来满足感。清单完成后，不要再放入新的东西。</p><p>番茄钟。 有一本书叫做 《番茄工作法》, 作者描述的一种工作方式，虽然是一本书，其实一句话就能概括 “工作以 25 分钟为周期，然后休息 5 分钟，周期内排除干扰，尽力集中注意力。” 因为作者使用厨房的番茄形状的定时器，于是起名番茄工作法。</p><p>番茄工作法基本已经进入大多数人基因了，我在 Chrome 浏览器安装了插件，只需要点一下就可以开始计时，基本上一开始工作就使用番茄工作法。</p><p>番茄工作法让我形成了条件反射，这个插件在时间到后会有闹钟响起，结合 Mac 多桌面个沉浸式的工作方式，开始后使用多桌面屏蔽无用的消息，时间到后闹钟响起回到主桌面，回复微信消息之类的。</p><p>番茄工作法还有一个好处，就是可以统计真实需要的时间，便于安排清单。有时候我觉的一个小时能完成的文章，实际需要 6 个番茄时间（3h）。人总是高估自己的能力，然后排入过多的事情，带来挫败感。</p><p>单线程。 我是一个绝对的单线程，做一件事情的时候腾不出来功夫做其他事情。所以像开餐馆这类繁杂的事情不适合我，编程尤其需要单线程，所以刚好可以混口饭吃。</p><p>一次只做一件事情，是一个违反直觉的事情，但是实际上是效率最高的方式。</p><p>计算机曾经有两种通信方式：串口和并口，串口的速率大大高于并口，有意思的是，串口使用的线路成本反而更低。</p><p>对计算机而言，原因在于某些场景（计算密集）下上下文切换带来的成本很高，对于某些场景（IO 密集）多线程更适合。</p><p>对人来说，需要持续思考的工作一次做一件事最好，需要等待外部条件的（比如厨师）可以同时做。</p><h2 id="3-如何管理精力"><a href="#3-如何管理精力" class="headerlink" title="3. 如何管理精力"></a>3. 如何管理精力</h2><p>如何保持精力，对持续高效率工作有重要意义。</p><p>不要加班。 加班和晚睡带来的坏处极大，尤其是熬夜加班。</p><p>如果晚上 11 点还在工作，基本无法实现早起，即使还是 11: 30 开始睡觉。人每天的精力是基本固定的，如果前一天高强度工作，就会影响第二天的工作。除了紧急的事情外，算下来基本不划算。</p><p>10:00 - 12:00 的时间用在了工作上基本第二天做不到 7 点起床，晚上花掉的时间需要第二天双倍的返还。所以没有紧急的事情时，10 点停止工作是非常重要的一件事。</p><p>自我激励。人需要满足感，有时候需要可以设计满足感。用不好听的话来说，就是年薪和日结的区别。</p><p>不过需要客观认识的是，普通人都做不到延迟满足，不能接受回报周期过长的事情。</p><p>比如学英语、读书，都是回报周期极长的事情。设计奖励回路，读完一本书可以玩游戏 1 小时，可以让精力得到恢复。</p><p>有度。 休息有度、工作有度、睡眠有度，所有的事情也都需要张弛有度。</p><p>假期睡眠过久，自我感觉并不好，打乱生活节奏，其实不利于人的状态恢复。休息的时间过长，随着边际递减效应对精力恢复就没有意义了。持续工作过久，效率会大大减低。</p><p>避免碎片化时间。 有一些时间管理的书籍会建议利用碎片时间工作和学习，实际体验不好。无法专注的时间完全可以用来休息，不适合学习和工作。</p><p>碎片化的时间可以刷知乎、微博，玩游戏都可以，不过需要注意上面那条有度的原则，离开碎片化的时间就需要及时停止。</p><p>慢性疾病。容易忽略影响人精力的另一个重要因素，就是慢性疾病。</p><p>慢性疾病带给人的影响是潜移默化的，有时候不明显。有一些全身性的疾病之间会有一些莫名奇妙的关联。我之前体质差，容易感冒和溃疡，我以为是缺乏维生素，以及和个人体质有关系，后来发现不是。因为我有一颗龋齿，后来去修复牙齿，华西的医生说我应该早点来，不然会引发容易感冒和周身的疾病，因为坏牙会导致口腔细菌造成咽喉反复感染，炎症反应又会造成全身酸痛。</p><p>处理牙齿后，身体莫名变好很多。</p><h2 id="4-一些陷阱"><a href="#4-一些陷阱" class="headerlink" title="4. 一些陷阱"></a>4. 一些陷阱</h2><p>有一些畅销书写了很多鸡汤，可能有害，需要警惕。</p><p>强调意志的作用。 其实普通人意志不强，执行力强的人很多是被一些客观因素推着走，也许房贷比个人意志更能激励人早起。</p><p>当一个人发现意志不起作用时，就会带来无休无止的焦虑和无力感。</p><p>承认自己的能力有限，学会和自己和解才能保持良好的心态，持续不断的成长。</p><p>把时间排满。 生活需要节奏感，人的工作和生活都需要留白，当清单中的任务完成后，看看电视剧，玩游戏本来就没有任何问题。一味强调工作，反而不能把工作做好。</p><p>不把时间排满，留一些时间胡思乱想也挺好的。</p><p>和自己对抗。 除了一些心理受到过创伤的人外，大多数人的心理问题和情绪问题都是和自己对抗带来的。</p><p>注意力不集中，是身体告诉你精力已经耗散光了，你需要休息。</p><p>感到疲惫，是身体告诉你出现问题，需要调整。</p><p>人的身体状态不同、人记忆力不同、思维能力不同，以及外部环境都是客观存在的。一些书中用各种理论表达人的智力是一样的、记忆力差不多，暗示你工作做得不好是不够努力是一种典型的 PUA 行为。久而久之，会带来不自信、焦虑和强迫症行为，也会有反强迫症行为，进一步带来身心伤害。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p>《想成为高效的晨型人，只需做到这三点》 <a href="https://www.jianshu.com/p/08862712b6ee">https://www.jianshu.com/p/08862712b6ee</a></p></li><li><p>《程序员如何提高效率之休息》 <a href="https://mp.weixin.qq.com/s/Qopwy0yisLYz50-3c-_QIA">https://mp.weixin.qq.com/s/Qopwy0yisLYz50-3c-_QIA</a></p></li><li><p>《精力管理》：与其管理时间，不如管理精力 <a href="https://zhuanlan.zhihu.com/p/37297883">https://zhuanlan.zhihu.com/p/37297883</a></p></li><li><p>《睡眠革命》：有效改善睡眠质量的 R90 法 <a href="https://zhuanlan.zhihu.com/p/57182080">https://zhuanlan.zhihu.com/p/57182080</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>mine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试底层逻辑整理</title>
    <link href="/2023/05/28/%E9%9D%A2%E8%AF%95%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E6%95%B4%E7%90%86/"/>
    <url>/2023/05/28/%E9%9D%A2%E8%AF%95%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="面试底层逻辑整理"><a href="#面试底层逻辑整理" class="headerlink" title="面试底层逻辑整理"></a>面试底层逻辑整理</h2><h3 id="面试前"><a href="#面试前" class="headerlink" title="面试前"></a>面试前</h3><p><strong>1、基础真的很重要</strong></p><p>语言基础，操作系统，网络知识，数据结构，常用开源软件的熟练使用，刷算法题，这些决定是否能有资格跟面试官继续聊下去。</p><p><strong>2、充分准备好面试内容</strong></p><p>把自己的工作经历先拟一个草稿，思维导图也可，流畅背诵，时长能够持续20分钟以上。别觉得多，有的说总比两三分钟就结束了强。并且准备越充分，候选人说的越多，越能体现项目经验丰富。</p><p><strong>3、做过的项目一定要吃透</strong></p><p>一个有意义的项目往往比较复杂，一定要将话术写在笔记上自己反复打磨，修饰最精炼的语句，让听者更好理解。有简有繁，有条有理地介绍你的项目功能点，能够显得你语言干练，逻辑性清晰。</p><p>哪怕是共建项目，也得掌握整个项目的知识点。比如项目实现了什么功能、解决了什么痛点、技术栈有哪些、规模、用户量多少、多少人参与研发的、你在项目中的角色是什么等等。</p><p><strong>4、简历上分层分点简单概要项目经验，先说结论</strong></p><p>这一点很重要，面试官接收候选人传达的信息无非就是耳和眼，当候选人在描述自己所熟悉的项目，大多数面试官需要脑补你的应用场景，经常会有跟不上候选人的语速。</p><p>若简历上清晰分点描述了项目概要，眼耳并用传达信息速度的带宽是指数增长的。一能给面试官从视觉上快速的整体把握，知道候选人在说什么，二能防止候选人说跑偏，到最后扯远了，问到自己不熟悉的领域就GG。</p><p><strong>5、一定要画一个思维导图，向上管理</strong></p><p>思维导图内容包含你的工作所需的技术细节，方法论以及你的观点，思考。</p><p>现在因为疫情原因，大多数技术面试均已改为线上视频面试，无论是腾讯会议、飞书、钉钉等都具备屏幕共享功能，如果在面试过程中，你把你的项目或者观点思路以思维导图的形式分享，面试的思路就完全跟着你走了，他会很认真仔细的看你的思维导图，那么面试问题也会局限在你导图内容范围，不会太过于发散其他。</p><p>另外，如果你整一套清晰的思维导图照着念，那么给人的第一印象就是你善于总结，思路清晰，表达流畅。</p><p><strong>6、数据量化</strong></p><p>人类通过对图表的理解速度要强于纯文字，对数字的理解速度强于纯文字。所以简历上分点描述的内容，最好量化成“监控系统日告警量超3000条，经优化后日告警不超过100条”；“监控系统客户端覆盖全网5000台设备”这样的句式。这也是团队间分享及汇报给上级的一个好习惯，向上管理^_^，要预判你的对象希望从你这里得到什么。</p><p><strong>7、学会发散</strong></p><p>准备项目的时候不要太老实，该吹牛逼的时候还是需要吹的，比如项目某一功能很有特点，但是目前还没排期实现，或者你调研业界有些优秀的功能点，在吃透其技术方案并可落地实施的前提下，是可以写进项目经验的。</p><p><strong>8、分析人物需求，打组合拳</strong></p><p>提前问清楚招聘HR，下一面的面试官的角色是什么，比如：</p><p><em>一面面试官，基本上是候选人将来同组同事或者组长。</em> 在跟他们聊的时候需要着重谈项目能力，如何落地实施，技术细节，执行能力，突出基础扎实，算法是重中之重，必须刷题。</p><p><em>二面面试官，大多为交叉面试，可能是兄弟部门leader。</em> 比如我们做运维的，二面面试官可能是研发部门的leader，候选人需要着重表现代码能力，算法能力，架构设计能力，同时也可以吹吹你对代码的高度洁癖，对标准化、自动化的强迫症。当然吹的时候还是需要提前准备下相关内容。一般情况，交叉面不会随便挂人，除非表现非常一般。</p><p><em>三面四面面试官，基本上都是主管总监级。</em>这一角色的评价决定了候选人的职级、薪资以及是否为高潜候选人。他们更关注候选人的综合素养，对岗位的理解，对行业方向的嗅探能力。另外就是上文所述“对待业务的思想需要具备全局性，前瞻性，需要具备一个上帝视角的思想，如在架构视角，用户视角，产品视角，全方位去度量自己负责的业务是否能够满足客户需求，能否更加降本增效，能否做一些更优质的平台工具去提高业务效率，提高业务稳定性，能否制定一些预案，把可预见型的故障自动化避免，把不可预见型的故障，降影响降到最低，如何结合业务进行方案落地。”这些能力，嘴皮子要灵活一点，体现出踏实肯干，有灵性，值得培养。</p><p><em>HR终面，</em> 考察的是候选人稳定性，长期发展规划，以及平衡双方都满意的一个薪资点。大致问题如下：</p><p><code>为什么从前几家公司离职？</code></p><p><code>你在上一家公司团队担任什么角色，工作中有什么亮点</code></p><p><code>如果你前几家公司有些比较出名，HR会问你你对其某些业务在市场上的定位，或者公司文化有什么看法？</code></p><p><code>你觉得的优缺点是什么？兴趣爱好是什么？</code></p><p><code>前公司给你留下印象最深的是什么？既然这么好，你为什么要出来？为什么不内部调岗？</code></p><p><code>后期规划是什么，通过哪些方法实现你的目标规划？</code></p><p><code>是否打算长期在XX城市发展？</code></p><p><code>期望薪资是多少，若少于多少你就不考虑了？</code></p><p><code>分析：</code> HR大多数都是女性，要抓住女性本身生活中也是感性居多，自然HR面的问题大多也是感性的，不像技术问题那样，大部分标准答案很明确。HR想在候选人这里得到的认知是：你有明确的正确的职业规划，你跳槽是为了更好的靠近自己的目标，正好该公司能够提供这样的岗位机会，你将来会稳定的在公司发展下去，并且能为公司输出比别人更多的价值，良禽择木而栖，你就是他们要找的人。自然薪资就好谈了。这里就不举例了，结合自身情况，自己准备好话术。</p><p><code>加分项：</code> 若候选人按照上述方法面试下来，感觉跟面试官聊的比较投机，并且氛围比较轻松的情况下，可以问下这个问题：“老哥，我这还有最后一个问题，希望您无论是作为行业中耕耘多年的前辈也好，还是本次面试的面试官也好，能否根据我的表现，给我一些建议，我好结合自身情况，摆正方向，努力提升。”对方若给出建议就洗耳恭听，没给出也正常，因为可能会透露出面试结果，这不重要。重要的是你这句话是表态的，表示候选人对这位面试官的尊重，对其职位的认可，对该团队在做工作的认可，也表示了候选人学习态度端正，值得培养，是个好苗子。这个问题每一个技术面试官都可以问。</p><h3 id="面试中："><a href="#面试中：" class="headerlink" title="面试中："></a>面试中：</h3><p><strong>1、自信，别紧张</strong></p><p>虽说是求职，但面试官在某些领域不一定比你强，对于自己的项目，自然是要比面试官熟悉，你要做的就是把项目条理清晰地描述，请分点说明。面试其实就是与一位”前辈“交流探讨，思想碰撞。只要前期准备工作充分，要很享受这个互相学习交流的过程。自然就不会紧张，气场就出来了。</p><p><strong>2、掌握节奏，掌握主动权</strong></p><p>技术面单场基本在1小时到1.5小时内，面试开始第一句话大部分都是互相自我介绍，轮到候选人的时候就直接说：“那我就通过描述我的这几年工作经验，简单的介绍下自己。”巴拉巴拉说完一段工作经验后，面试官会打断要你把某些要点仔细讲一遍。只要前期准备工作做得好，这都不是问题。切记要语言精炼，分点描述，语速适中，自信不虚。这样有来有回3、4个回合基本上40分钟就过去了，面试官在跟着你的思路走，他的脑袋也在学习一些业内的优秀解决方案。时间不多的情况下，最后会问几道基础知识的问题，一道算法题，这些前期准备充分，问题不大，面试基本就稳了。面试的时候注意表达方式，掌握主导权，强势一点，帮助面试官做判断。比如在阐述你的一些优点和项目经验时，面试官就需要把候选人的描述与岗位做匹配，但这是面试官在做判断。候选人应着重体现：该岗位所做的项目比较需要自己的优点与项目经验，你的特点能为这个团队带来什么价值。这样就是在帮面试官做判断，旁敲侧击告诉面试官你就是那个最匹配岗位的人。就如前文所述，需要具备用户思维，站在用户视角，分析其需求，把自己当作产品打磨至最优解，推送给用户。</p><p><strong>3、问清楚后续工作内容是否符合预期</strong></p><p>一定要问清楚，工作内容具体做什么，规模，用户群体，系统功能等，别等到入职后发现不契合，到时候就很麻烦了，对职业生涯非常不利。</p><h3 id="面试后："><a href="#面试后：" class="headerlink" title="面试后："></a>面试后：</h3><p><em>1、总结</em></p><p>一定要总结每一场面试自己表现好的地方，表现待提高的地方，问题没答上来的地方，记录下来反复推敲，提炼语句，查漏补缺，人就是在不断总结的过程中迅速成长的。</p><p><em>2、先后顺序</em></p><p>先不要投意向企业，自私一点，先找一些公司练练手。看看行业中都在问什么，关注什么。收集问题，积攒经验。</p><p><em>3、着重情商培养</em></p><p>说别人爱听的话，做自己认为正确的事。</p><p>你要像个海王一样同时面试不同的公司岗位，在其中查漏补缺，包括技术，话术，绎术，但是一旦确定去了某家公司<br>你就得像个直男一样，认真对待，不耍小心眼，做出成绩！</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA实用快捷键</title>
    <link href="/2022/11/20/IDEA%E5%AE%9E%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/11/20/IDEA%E5%AE%9E%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="IDEA实用快捷键"><a href="#IDEA实用快捷键" class="headerlink" title="IDEA实用快捷键"></a>IDEA实用快捷键</h2><p>alt+1:  ActivateProjectToolWindow<br>ctrl+`: 快速切换主题、编辑器模式、代码风格、视图模式(禅模式等)</p>]]></content>
    
    
    <categories>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思维发展史从经验思维到统计思维</title>
    <link href="/2022/09/25/%E6%80%9D%E7%BB%B4%E5%8F%91%E5%B1%95%E5%8F%B2%E4%BB%8E%E7%BB%8F%E9%AA%8C%E6%80%9D%E7%BB%B4%E5%88%B0%E7%BB%9F%E8%AE%A1%E6%80%9D%E7%BB%B4/"/>
    <url>/2022/09/25/%E6%80%9D%E7%BB%B4%E5%8F%91%E5%B1%95%E5%8F%B2%E4%BB%8E%E7%BB%8F%E9%AA%8C%E6%80%9D%E7%BB%B4%E5%88%B0%E7%BB%9F%E8%AE%A1%E6%80%9D%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://mp.weixin.qq.com/s/vOicxdW7bAxm9Nyt4DKrCA">mp.weixin.qq.com</a></p></blockquote><p>在构建思维框架和逻辑前，有必要对整个思维发展过程进行回顾。思维发展史本身也就是人类社会的发展史，在这个过程中涉及到哲学、文化艺术、科学多方面的发展和相互促进。类似最基本的归纳演绎形式逻辑即是在早期古希腊哲学中提出，而对于基于模型的精确定义和思维方法论则来源于科学发展促进。</p><p>思维从早期意识的形成到发展为完整的方法论体系，从经验到科学，从定性到定量经历了一个漫长的过程，而对这个过程的分析和梳理有助于构建一个完整的思维框架体系。</p><h2 id="意识产生-主观能动性"><a href="#意识产生-主观能动性" class="headerlink" title="意识产生 - 主观能动性"></a>意识产生 - 主观能动性</h2><p>在思维定义部分提到，思维本质是人脑对于外在输入或刺激的一种感知和反应，这种感知不同于传统动物的非条件反射，而是一种主观的意识行为。在哲学里面经常会谈到的意识这个词，哲学里面谈人区别于动物即独立行走，并产生了独立意识行为。</p><p>从本质上讲，意识是人脑的机能，是人脑对大脑内外表象的觉察，表现为人脑对外界输入或刺激的感知和反应。一种更一般的定义将意识视为一种特殊而复杂的运动，可以映射真实世界以及非实有意识自身的运动，可以正确映射真实和意识本身规律，也可不正确或歪曲反应。</p><p>一般意识需要真实物质媒介才能对真实和意识本身产生作用。它的存在可以分为静态和动态两种状态，静态意识一般以编码形式存在，比如语言文字、声音、图像、软件或其它静态物质载体；而动态意识一般是指最终的想法或行动思路等。静态意识和动态想法互相作用是思维产生的重要源泉。</p><p>人的意识有别于一般动物与生俱来的非条件反射，是一种主动能动的意识行为。人不仅能感知事物的现象，而且能把握事物的本质和规律，并能动地指导自身认识和改造世界。这与动物被动地适应自然形成鲜明的对比，也是人区别于动物的标志。</p><p>意识的产生，以及由意识而形成的主动思考是人类思维产生的先决条件。即人类最早思维的产生，即是产生了意识，并由意识形成了主动思考的主观能动性。</p><p>当前对思维研究主流的做法是，从脑科学、意识的起源、心理学层面等方面，追本溯源，以期促成心灵和意识的转变。或从意识能动作用的发挥所依赖的物质条件和物质手段出发，重视作为认识器官之延长的现代先进科学技术的运用。</p><h2 id="符号系统-语言和文字"><a href="#符号系统-语言和文字" class="headerlink" title="符号系统 - 语言和文字"></a>符号系统 - 语言和文字</h2><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E5%8F%91%E5%B1%95%E5%8F%B2%E4%BB%8E%E7%BB%8F%E9%AA%8C%E6%80%9D%E7%BB%B4%E5%88%B0%E7%BB%9F%E8%AE%A1%E6%80%9D%E7%BB%B4/2022-09-25-22-52-18.png" class=""><p>在思维发展过程中，符号系统的发明是思维发展史上的一个标志性事件，因此还是需要先从符号系统的产生谈起。</p><h3 id="符号系统的产生"><a href="#符号系统的产生" class="headerlink" title="符号系统的产生"></a>符号系统的产生</h3><p>符号系统是现实世界信息的关键载体，包括语言、文字、图像等各种编码形式。比如最早古埃及出现的楔形文字和计数符号。</p><p>在没有符号系统前，古人在日常生活中学会了某个技能，形成了某个经验的时候往往无法进行有效的信息传递，只能够自己使用。在有了符号系统后，意识或经验能够以抽象编码的方式跨越时空进行传递，即符号系统实现了现实世界信息的抽象描述和表达，同时能够将个人隐性的知识和经验进行显性化的表达，这个显性的知识可以作为类似公理、定量等理论指导后人的实践行为和思维行为。</p><p>隐性知识是迈克尔 • 波兰尼在 1958 年从哲学领域提取出的概念。波兰尼认为人类的知识有两种：通常被描述为知识的，即以书面文字、图表和数学公式加以表述的，只是一种类型的知识；未被表述的知识，像在做某事的行动中所拥有的知识，是另一种知识。前者称为显性知识，而后者称为隐性知识。</p><h3 id="语言产生促进思维发展"><a href="#语言产生促进思维发展" class="headerlink" title="语言产生促进思维发展"></a>语言产生促进思维发展</h3><p>语言的起源和人类的起源一样久远。人类的祖先在生产劳动中与自然灾害作斗争时需要齐心协力，互相配合，自然就需要用某种信号把大家的行动统一起来，各种信号以某种约定的声音为目标，就成了最初的语言。</p><p>当然，语言的产生还有两个重要的条件，也就是发音器官和大脑思维的复杂化。劳动使类人猿能够直立行走，使它们的发音器官有利于发出各种各样的声音，同时也使手与各种食物的接触更加频繁，刺激了大脑的机能，促进了思维的发展。因而，一定程度上，可以说是 “劳动创造语言”。</p><h3 id="文字打破思维时空约束"><a href="#文字打破思维时空约束" class="headerlink" title="文字打破思维时空约束"></a>文字打破思维时空约束</h3><p>由语言而衍生出文字，即通过记载读音（拼音文字）或语音所表达的信息（表意文字）来记录语言。正是因为有了文字，一门语言才相对完整。文字与语言一起，成为人类社会最主要的符号系统。</p><p>同时文字的产生打破了思维的时空约束，使得古人的思维和智慧能够通过文字记录的方式传承下来，这对思维的发展和科技的进步起到了关键的的作用。</p><p>以语言和文字为主要编码形式的符号系统的产生，进一步拓展了内在思维外显表达的方式和广度；同时也促进了大脑自身的发展进化，特别是左右脑职能的进一步分离：左脑偏向于理论和逻辑，分析和推理；右脑偏向于感性和艺术，想象和创意。</p><h2 id="经验思维-逻辑的产生"><a href="#经验思维-逻辑的产生" class="headerlink" title="经验思维 - 逻辑的产生"></a>经验思维 - 逻辑的产生</h2><p>人类社会发展的早期，由于无法解释地震、火山、海啸等各种自然现象，便自然而然地产生了各种想象，迷信和神话。随着文明的演进，作为人类理性的哲学逐渐发展起来。用哲学而非迷信的方式来认知人类自身、认知世界，人类便从蒙昧中挣脱出来了。前文所述，语言和文字等各种符号系统的出现和发展，又进一步促进了最初哲学的发展。</p><h3 id="经验思维和基础逻辑学"><a href="#经验思维和基础逻辑学" class="headerlink" title="经验思维和基础逻辑学"></a>经验思维和基础逻辑学</h3><p>对思维的研究和追本溯源就必然要从哲学谈起。早期的哲学可以理解为自我根据经验对各种自然现象的规律性总结。也就是在早期哲学时期出现了思维的早期形态——经验思维。</p><p>关于经验思维的定义，参考如下：</p><blockquote><p>经验思维从经验出发进行判断的思维方式，即通过经验的积累、分类与组织，对某一确定后的特定情境，寻找和选择一种过去使之成功的行动方式过程。经验思维是一种没有统一规则和一般模式的思维活动，其主要特点是随着同类经验思维的不断增加，可以转化为反射和下意识。经验思维是实践活动的直接产物，它又反过来对新的实践活动起直接的指导作用。</p></blockquote><p>经验思维中的核心逻辑是<code>归纳演绎逻辑</code>，<em>即从个别现象到规律的找寻；同时又用规律来演绎新的事物运行</em>。逻辑让人们可以从普遍现象中找寻一般性规律，形成公理与定理，并进一步指导后续实践。</p><p>逻辑属于哲学范畴，逻辑学是哲学的一个分支，而逻辑的产生本身又是经验思维的重点，同时逻辑学本身也是研究思维的学科。</p><p>亚里士多德（Aristotle）是早期自然科学的集大成者，在哲学、天文、地理、物理、生物等多方面均有所建树。但他首先是一位哲学家，其《形而上学》奠定初步逻辑之形成，涵盖从本体论到物之四因，以及应当如何看待、分析和研究事物乃至整个宇宙。也正基于此，人们基本的<em>归纳</em>、<em>演绎</em>、<em>推理</em>、<em>类别</em>、<em>抽象</em>等思维能力基本形成。</p><p>从亚里士多德的《形而上学》、《工具论》，到黑格尔的《小逻辑》，整个逻辑学体系的发展也更加完善起来，即从最初的归纳演绎逻辑发展到了完整的三段论形式逻辑，以及辩证逻辑。</p><p>以逻辑学为核心的经验思维，极大地推动了人类文明的进步。古代的哲人虽不理解天体运行的定律，而通过反复地观察，能够预测日、月、行星的地位和日月食等都非常准确。</p><h3 id="经验思维的局限性"><a href="#经验思维的局限性" class="headerlink" title="经验思维的局限性"></a>经验思维的局限性</h3><p>然而，这种通过诸多现象，经过归纳总结得出一个定性结论的纯粹的经验思维也有其固有的缺点，即仅仅通过已有无法穷举的现象推断出错误的结论。</p><p>例如，会形成彗星是大祸之征、破镜是不祥之兆这类错误的信念，而这类 “误认因果” 现象正是经验推论的结果。更加有害的是容易养成心智的惰性与独断——凡有推论，仅根据与过去经验的符合，遂将不符合的地方轻轻忽略了；或需要有一事物解释相连的原则，遇到各个事物与原因间找不到联络的时候，遂捏造一种联络作为解释。</p><p>需求是创造之母。</p><p>以逻辑学为核心的经验思维，将人类从最初的蒙昧状态带入体现人类理性的哲学；在面对纯粹经验思维的缺陷时，人类开始考虑哲学和科学的融合发展，即将经验思维结合科学实践中的实验方法，以及量化、模型等概念来进行研究，从而为后续形成科学思维奠定了基础。</p><h2 id="科学思维-方法论形成"><a href="#科学思维-方法论形成" class="headerlink" title="科学思维 - 方法论形成"></a>科学思维 - 方法论形成</h2><h3 id="从科学发展史谈起"><a href="#从科学发展史谈起" class="headerlink" title="从科学发展史谈起"></a>从科学发展史谈起</h3><p>在科学发展史上，古希腊的文明具有重要意义。在这一时期，各类自然学科有了基本的雏形，数学、几何、物理、生物等都有了基本的学科研究。如前文谈到的以亚里士多德为代表的经验思维和形式逻辑体系。</p><p>夜观天象，看天吃饭，人类的发展历程就是不断地认识和改造自然的历程。最开始直接影响到生存的就是对宇宙的了解，这也是为何整个科学发展中物理学先发展，而物理学发展中天文学先发展的一个原因。</p><p>1543 年，哥白尼公开发表《天体运行论》，这是近代自然科学诞生的主要标志。日心说的提出恢复了地球普通行星的本来面貌，猛烈地震撼了科学界和思想界，动摇了封建神学的理论基础，是天文学发展史上一个重要的里程碑。在天体力学中，开普勒发现了行星运动的三大定律——椭圆定律、面积定律和周期定律。1632 年，伽利略发现了自由落体定律。直到 1687 年，牛顿发表《自然哲学的数学原理》，提出了力学的三大定律和万有引力定律。这些定律构成一个统一的体系，把天上的和地上的物体运动概括在一个理论之中。这是人类认识史上，对自然规律的第一次理论性的概括和综合。</p><p>这个过程完成了人类从<code>经验科学</code>到<code>经典科学</code>（量化，实验，公式，模型）的飞跃；其次，是真正看到多学科的一个关键结合，即数学和几何学知识应用到物理学中，哲学的思维方法应用到科学实践和研究中。</p><p>思维的一个重点是认知，认知自然并进而改造自然。人们最初也是对天体运行、物体运动规律的研究，形成了经典物理学体系。但是对事物的研究，除了运动外，更重要的是研究事物内部的组成结构和内在运转机制。</p><p>从宏观到微观，从整体到局部，对任何事物的研究基本都遵循这一规律，即当研究清楚物体运动规律后，就希望更进一步研究事物内部的物质组成和构造。对于外在事物的研究，从最早的四元素学说到炼金术，从化学反应、质量守恒到元素周期表发现，完成了整个微观过程，也形成了基础的化学体系。而对于人类自身的研究，包括类似的动植物研究，从最初的细胞学说到物种进化和起源，衍生出了最基本的生物学体系。</p><h3 id="科学思维方法论的形成"><a href="#科学思维方法论的形成" class="headerlink" title="科学思维方法论的形成"></a>科学思维方法论的形成</h3><p>随着科学的发展和进步，人类对自然现象和规律的研究更加系统化。一方面体现在研究分析思维遵循更加详细的方法和步骤，另一方面是更加强调了从定性的经验到更加精确的定量模型。</p><p>科学方法论的逐步形成，则是思维发展的另一个标志性事件。</p><p>1637 年，笛卡尔出版了著名的哲学著作《方法论》。其在该书中提出著名的 “怀疑一切” 的理论，即对于问题的研究要接受任何我自己不清楚的真理，就是说要尽量避免鲁莽和偏见，只能是根据自己的判断非常清楚和确定，没有任何值得怀疑的地方的真理。也就是说只要没有经过自己切身体会的问题，不管如何权威的结论，都可以怀疑。同时，该书还提到对于复杂问题的解决，要尽量分解为多个比较简单的小问题，一个一个地分开解决。小问题从简单到复杂排列，先从容易解决的问题着手。在每个小问题都解决后，再综合来看大问题是否彻底解决了。</p><p>笛卡尔提出的科学方法论，论述了科学研究从感知到新知应该遵循的过程。其认为这个过程的起点是感知，通过感知得到抽象的认识，并总结出抽象的概念，这是科学的基础。</p><p>笛卡尔将科学发展的规律总结为：</p><blockquote><ol><li><p>提出问题。</p></li><li><p>进行实验。</p></li><li><p>从实验中得到结论并解释。</p></li><li><p>将结论推广并普遍化。</p></li><li><p>在实践中找出新问题。循环往复。</p></li></ol></blockquote><p>笛卡尔的方法论是最早的系统化谈思维方法的论述，该书对西方人的思维方式、思想观念和科学研究方法有着极大的影响。在 1960 年代以前，西方科学研究的方法，从机械到人体解剖，基本是按照笛卡尔的方法论进行的，对西方近代科学的飞速发展起到了相当大的促进作用，以至于有人曾说：“欧洲人在某种意义上都是笛卡尔主义者”。</p><p>如果仔细比较科学方法论的思维与纯粹的经验思维之间的优劣，就会发现前者之于后者是一个巨大的进步。前者相较于后者，不仅能够减少错误的可能，且让人们能够从尊崇过去的习惯常规，转变到控制现在而寄望于未来的态度。因为经验的方法，必然地增加过去的影响，而实验的方法，则显现出未来的可能。</p><p>当然，科学方法论本身也有其局限性。比如对人体系统的研究，只是看到各部位机械的综合，而对其互相之间的作用则研究不透。直到阿波罗登月工程的出现，科学家们才发现：有的复杂问题是无法分解的，必须以复杂的方法对待之。还有些问题本身无法用精确的公式、模型进行描述，这也是后续逐步产生人工智能和统计学思维的基础。</p><h2 id="机械思维-模型的产生"><a href="#机械思维-模型的产生" class="headerlink" title="机械思维 - 模型的产生"></a>机械思维 - 模型的产生</h2><p>社会的进步、科技的发展，有赖于人类不断地提升对事物的认知能力，透过各种现象看到事物发展的规律和本质。在这个过程中，人类不断地采集信息，又将信息转变为知识，再将知识转变为认识和改造世界的方法论。</p><p>人类思维的过程，可以简化为：</p><blockquote><ol><li><p>获取和收集数据。</p></li><li><p>对数据进行分析。</p></li><li><p>基于目标建立分析或计算模型。</p></li><li><p>基于模型进行预测。</p></li></ol></blockquote><p>构建公式和模型是分析和预测的关键，模型将现实世界的表象通过符号系统进行了抽象和精确表达。通过模型来构建科学体系，要到近代科学家牛顿。牛顿最直接的贡献，在于他用简单而优美的数学公式破解了自然之谜，其伟大成就正式宣告了科学时代的来临。在这个时期，最核心的就是机械思维，其包括了三点：</p><blockquote><ol><li><p>世界变化是有规律可循的。</p></li><li><p>规律本身是有确定性可循的，并且可以用数学公式来精确表达。</p></li><li><p>这些规律可以用到未知领域指导实践、改造自然。</p></li></ol></blockquote><p>有果必有因，有现象必能找到确定性，有确定性必能用精确模型描述。机械思维在前几次工业革命中起到了巨大的推动作用。</p><p>然而，机械思维的问题在于，有时候无法做到精确建模，这本身又有两个原因：</p><blockquote><ol><li><p>对目标 Y 造成影响的 X 因子太多，无法穷举和认知完全。</p></li><li><p>测量系统出现问题，即采集不全和测量不准。</p></li></ol></blockquote><p>这些因素都对确定性思维造成重大挑战。</p><h2 id="统计思维-人工智能时代"><a href="#统计思维-人工智能时代" class="headerlink" title="统计思维 - 人工智能时代"></a>统计思维 - 人工智能时代</h2><p>在机械思维中通过模型解决问题又存在两个缺陷：</p><p>其一是模型可能是错的或者被复杂化。其原因是，建立模型前由于人类自身的认知局限，导致建立的假设本身就是错的。比如托勒密的天体运行轨道模型，就是基于地心说 + 圆形轨道假设建立的。</p><p>其二是模型本身只能是定性的，很难用抽象的数学公式作定量的描述。</p><p>为了解决不确定性和难以量化的问题，当前有两种主流思路：其一是统计和概率方法；其二是对通过信息论和信息熵对不确定性进行量化表达和评估。</p><p>注：在 1948 年，香农提出了 “信息熵” 的概念，才解决了对信息的量化度量问题。信息熵这个词是 C.E.Shannon（香农）从热力学中借用过来的。热力学中的热熵是表示分子状态混乱程度的物理量。香农用信息熵的概念来描述信源的不确定度。</p><p>机械思维完全建立在确定性的基础上，而信息论的方式则完全相反——建立在不确定性（假设）的基础上，即要消灭不确定性就必须引入信息。于是思维逻辑发生进一步变化，从机械思维向统计思维转变。</p><p>对于统计思维的出现逻辑，可以理解为：</p><blockquote><p>复杂事物研究难以短时间找到确定性和因果关系。</p><p>用不确定性思路来看待世界。</p><p>把复杂问题转换为消除不确定性的问题。</p><p>找到消除相应不确定性的信息。</p></blockquote><p>简而言之，统计思维指导下，一开始不会马上去洞悉事物本质或问题的根源，而是先根据相关性分析解决问题和改进目标，在认知水平和能力提升后再进一步去探索背后的因果关系。</p><p>为了解决不确定性问题，就需要足够大量的数据，同时保证数据的完备性。随着存储技术、网络技术、传感网和数据采集技术的发展，人类获取数据和存储数据都更加容易。数据虽然出现指数级增长，但是当前技术水平已经有能力和手段进行数据采集、存储、分析挖掘；同时，这些积累和采集的数据足够计算机持续不断地进行迭代学习和模型训练，当前计算机的算力也足够支撑模型的复杂度和迭代的深度。</p><p>统计学思维已广泛地应用到人工智能领域，包括数据挖掘和深度学习等。今天广泛使用的人工神经网络、最大熵模型、逻辑回归等理论，早在 40 年前就已经成熟，但是一直没有受到太大重视。直到 2016 年 Google 创造奇迹的阿尔法狗（AlphaGo）的出现，其训练算法就是人工神经网络。</p><p>因此，随着互联网、信息技术、大数据、人工智能和深度学习等领域的不断发展，统计思维的广泛运用是一个必然的趋势，这也给传统的科学思维和机械思维模式带来巨大挑战。</p>]]></content>
    
    
    
    <tags>
      
      <tag>思维改变生活</tag>
      
      <tag>认知升级</tag>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认知闭环思维框架和逻辑</title>
    <link href="/2022/09/25/%E8%AE%A4%E7%9F%A5%E9%97%AD%E7%8E%AF%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/"/>
    <url>/2022/09/25/%E8%AE%A4%E7%9F%A5%E9%97%AD%E7%8E%AF%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="克服认知障碍，实现认知升级，打造认知闭环"><a href="#克服认知障碍，实现认知升级，打造认知闭环" class="headerlink" title="克服认知障碍，实现认知升级，打造认知闭环"></a>克服认知障碍，实现认知升级，打造认知闭环</h2><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://mp.weixin.qq.com/s/sEEd15CuYS6KTZvZVjgnHw">mp.weixin.qq.com</a><br>由本博主进行编辑整理存档以便回顾。感谢原文作者。</p></blockquote><img src="/2022/09/25/%E8%AE%A4%E7%9F%A5%E9%97%AD%E7%8E%AF%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-22-31-52.png" class=""><h2 id="任何认知升级都需要从基础认知开始"><a href="#任何认知升级都需要从基础认知开始" class="headerlink" title="任何认知升级都需要从基础认知开始"></a>任何认知升级都需要从基础认知开始</h2><p>对于 IT 行业来举例，如果你大学刚毕业进入职场参加工作，虽然你大学也就读的计算机相关专业，但是你跟别人说你需要马上跨越到架构师思维，实现认知升级，那显然是不可能的事情。任何高阶的认知往往都需要大量的基础认知做铺垫。</p><p>软件开发也是同样道理，你需要通过大量的编码活动来积累对程序设计，算法，数据结构，面向对象思想，乃至数据库，中间件，程序设计语言等多方面的如果你连最基本的数字，加减乘除，基础方程式都没有搞明白，那么又如何能够去求解实际生活中的各种涉及到数学知识的应用场景？</p><h2 id="什么是基础认知？"><a href="#什么是基础认知？" class="headerlink" title="什么是基础认知？"></a>什么是基础认知？</h2><p>简单来讲基础认知就是学过和见过的。基础认知更多是基于你的记忆和固有思考，你不需要去转太多的弯， 也没有太多的分解和组合。只要你学过的知识，你再遇见类似的场景或问题时候，你自然就会。这就是最简单的认知逻辑。</p><h2 id="从基础认知走向元认知"><a href="#从基础认知走向元认知" class="headerlink" title="从基础认知走向元认知"></a>从基础认知走向元认知</h2><p>还是拿小学奥数来举例，对于真正竞赛的题库成千上万。那么为了竞赛得高分，你会有两种方法。  </p><p>其一是花费大量的时间将所有的题目全部练习一遍，做到考试的时候所有题都见过，我只需要根据题目做基础匹配即可。其二就是所有的题目最终都会归类到类似距离类，时间类，方程类，数列类，求解面积类等几种大的类型。我只需要掌握各种类型题目的关键点和求解思路即可。</p><p>对应到工作场景也是同样的道理。</p><p>任何一个业务专业领域你可以将所有的场景和问题全部遇到一遍，你才具备相应的独立解决问题能力。而高手往往是不断抽象基础认知逻辑，这个抽象出来的就是<code>元认知</code>。</p><p>所以真正能够认知升级的人，一定是具备了抽象共性，举一反三的人。</p><h2 id="认知升级的关键-从事物群分析到深度复盘"><a href="#认知升级的关键-从事物群分析到深度复盘" class="headerlink" title="认知升级的关键 - 从事物群分析到深度复盘"></a>认知升级的关键 - 从事物群分析到深度复盘</h2><p>认知升级的关键究竟是什么？在这里提出实现认知升级最关键的一个点就是你需要从单个事物的研究过渡到对同类事物群的研究上面。  </p><p>注意单个事物研究是问题驱动的，事物群研究是你自己驱动的。</p><p>你每次考试都会遇到求解阴影部分面积的题，这个是问题驱动。但是当你遇到了大量的求解阴影面积的题目后，你开始思考对于这类题目是否有一个通用化的求解思路？</p><p>比如我自己在思考的时候。</p><p>会将求解阴影面积图中的各个图形块定位为 X,Y,Z 等各种参数。同时将阴影面积求解转换为求解方程式的求解。</p><p>但是在应用一段时间后发现还是有些题目无法快速地基于该逻辑得出答案。</p><p>那么我就会对我这个元认知进一步完善。</p><p>即阴影面积求解问题需要转化为方程式求解，但是当无法得出足够的方程时候，需要进一步添加辅助线获取更多方程式。</p><p>注意实际考试你并不会遇到一个题目，就是让你分析阴影面积求解有无一种通用性的方法可以遵循？这个是需要你自主自发，自我驱动。</p><p>即当你积累了足够的基础认知后，这个时候你必须要自我驱动，主动地进入到同类事物群的分析中，通过分析抽象共性，归纳一般性的规律和方法论。</p><p>注意在学生时代，老师讲解一般分为三个层次。</p><ul><li><p>讲解具体一道题如何求解</p></li><li><p>讲解同类题目求解的通用方法</p></li><li><p>讲解我是如何思考，抽象出这种通用方法的</p></li></ul><p>一般的老师只会讲第一，好点的老师讲解到第二个层次，但是绝对不会有老师会给你讲解第三个层次。每个学生前期已有的基础知识积累本身就不同，思考方法也不同，这个第三个层次需要你主动发起，自我驱动去分析。</p><p>这个抽象分析过程就是深度复盘。</p><p>深度复盘是对事物群体进行分析后的共性抽象，并归纳出一般性的规律过程。</p><p>同时深度复盘不是单个问题解决后马上做的，而往往是在一个周期性的时间点定时做的。比如你每个月做一次深度复盘，看下有没有共性规律可以归纳。</p><p>问题解决后马上复盘是好事，但是更加重要的是养成周期性复盘的习惯。只有周期性复盘你才能够对历史过程中出现过哪些共性事物和事件进行统一分析。</p><h2 id="围绕知识经验库-打造认知闭环的逻辑"><a href="#围绕知识经验库-打造认知闭环的逻辑" class="headerlink" title="围绕知识经验库 - 打造认知闭环的逻辑"></a>围绕知识经验库 - 打造认知闭环的逻辑</h2><img src="/2022/09/25/%E8%AE%A4%E7%9F%A5%E9%97%AD%E7%8E%AF%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-22-18-18.png" class=""><p>认知升级不是一蹴而就的过程，而是一个渐进的持续迭代和螺旋式上升的过程。  </p><p>一个学武人士也不可能拿到一本武林秘籍而马上成为绝顶高手，需要的还是不断的实践过程来持续迭代，但是这个迭代本身是螺旋上升，持续改进的过程。</p><p>要做到这点，认知过程必须闭环。</p><p>整个闭环过程可以简单描述如下。</p><p>首先当你面对一个新事物，新事件分析的时候。一个是你接收新事物的输入，其次就是你已有的知识经验库有大量经验点或模式可以使用。</p><p>这个经验模式本身是来源于你前面进行深度复盘，形成的认知同类事物的一种普遍性规律。有了这个规律，即使你没有见过的事物，没有遇到过的问题，你可以基于你已有的规律总结进行演绎，尝试对问题进行解决。</p><p>注意，在持续一个周期各种问题解决后。</p><p>你会发现你原来对同类事物，同类问题的归纳本身还有缺陷，需要进一步优化和调整，因此进一步推动你周期性的深度复盘过程，通过深度复盘进一步形成经验模块，再入库到你的知识经验库中，应用于下次新问题的解决。</p><p>这样就形成一个可以持续改进的认知闭环逻辑。</p><p>这里面再次强调有两个重点。</p><ul><li><p>通过事物群分析和深度复盘总结通用规律</p></li><li><p>通过深度复盘才能实现知识库向经验模式库的转化</p></li></ul><p>要实现认知升级就必须进行深度复盘，这个深度复盘是周期性自我驱动的，没有问题输入，没有人强迫你，所以要先转变思维形成这个复盘意识。其次知识库量大，问题没法穷举，认知升级就是要通过空间换时间，形成你自己的知识构造方法，搞定知识索引，将大量记忆的知识库转变为少量的经验模式库。</p>]]></content>
    
    
    
    <tags>
      
      <tag>思维改变生活</tag>
      
      <tag>认知升级</tag>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思维框架和逻辑</title>
    <link href="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/"/>
    <url>/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="构建学习实践复习的思维能力闭环"><a href="#构建学习实践复习的思维能力闭环" class="headerlink" title="构建学习实践复习的思维能力闭环"></a>构建学习实践复习的思维能力闭环</h2><blockquote><p>一个人工作多年后的核心竞争力一定是独立分析和解决问题的能力，而这个能力的本质也就是思维能力。<br>思维的有效性，决定了我们看问题的高度和深度，是解决问题的原点。思维能力水平的持续提升，让我们做事更加的有效能感，让决策质量更高，让执行结果更好。</p></blockquote><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-20-24-58.png" class=""><h2 id="一个整体的思维框架逻辑"><a href="#一个整体的思维框架逻辑" class="headerlink" title="一个整体的思维框架逻辑"></a>一个整体的思维框架逻辑</h2><blockquote><p>这里不是具体谈哪一种思维模式</p></blockquote><p><strong>一个可以参考借鉴的构建自己思维能力知识体系的方法论:</strong></p><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-20-48-25.png" class=""><blockquote><p>配图来自:公众号《人月聊IT》</p></blockquote><ul><li>知识库：实践和复盘构建知识经验库</li></ul><p><strong>事物的认知和问题分析解决的双主线结构：</strong></p><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-21-03-54.png" class=""><blockquote><p>配图来自:公众号《人月聊IT》</p></blockquote><p><strong>闭环架构: 正向反馈</strong></p><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-21-09-45.png" class=""><blockquote><p>学习实践和思维框架两者应该融合为一个完整的整体。</p></blockquote><p><strong>以思维为主线，学习实践为暗线</strong></p><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-21-20-18.png" class=""><blockquote><p>得出思维框架是归纳抽象过程，而构建思维能力体系去应用则是实践演绎的过程。<br>配图来自:公众号《人月聊IT》</p></blockquote><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-21-25-32.png" class=""><blockquote><p>配图来自:公众号《人月聊IT》</p></blockquote><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-21-40-32.png" class=""><p><code>事物认知</code>的过程是一个归纳总结的过程，而事物评价正好是事物认知能力的一个演绎过程。</p><p><code>决策模型</code>则是提升问题解决力的关键，问题的解决最终还是需要通过决策落实到具体的行动计划上。</p><p><em>决策模型 = 事物认知评价 + 问题解决中的目标</em></p><p>思维能力体系不应该是一个理论框架，而是应该去指导实践，并在实践过程中反复迭代和持续优化。这才是构建思维能力体系的目的。</p><h3 id="我们该如何思考"><a href="#我们该如何思考" class="headerlink" title="我们该如何思考?"></a>我们该如何思考?</h3><p>答案就是抽象思维框架模型，构建思维能力体系，并应用到思维实践过程中。</p><img src="/2022/09/25/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%92%8C%E9%80%BB%E8%BE%91/2022-09-25-21-44-47.png" class=""><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://mp.weixin.qq.com/s/e0l6CrN-ZCZRE27b9dtIOA">道可道，非常道-从第一性原理到经验模式</a></li><li><a href="https://mp.weixin.qq.com/s/vd6vJ8aJP23Gf614Ki-ZxA">基于思维框架逻辑来构建思维能力体系，并应用到实践</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>思维改变生活</tag>
      
      <tag>认知升级</tag>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建终身学习体系进行自我提升</title>
    <link href="/2022/09/24/%E6%9E%84%E5%BB%BA%E7%BB%88%E8%BA%AB%E5%AD%A6%E4%B9%A0%E4%BD%93%E7%B3%BB%E8%BF%9B%E8%A1%8C%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/"/>
    <url>/2022/09/24/%E6%9E%84%E5%BB%BA%E7%BB%88%E8%BA%AB%E5%AD%A6%E4%B9%A0%E4%BD%93%E7%B3%BB%E8%BF%9B%E8%A1%8C%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%8D%E5%90%8C%E6%B8%A0%E9%81%93%E4%BB%8B%E7%BB%8D">www.bmpi.dev</a></p></blockquote><blockquote><p>如何建立个人终身学习知识体系？如何自我管理？如何自我提升？本文分享我的终身学习知识体系建立过程，包括如何收集高质量信息、如何设定个人中长期目标及个人愿景、如何内化知识、如何整理笔记、如何管理时间、如何系统阅读、如何通过写作做知识输出建立个人品牌、如何通过个人项目应用所学知识。</p></blockquote><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%B8%BA%E4%BD%95%E8%A6%81%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%BB%88%E8%BA%AB%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">为何要建立个人终身学习知识体系</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%BB%88%E8%BA%AB%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%B5%81%E7%A8%8B">建立个人终身学习知识体系流程</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5">信息输入</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E4%BC%98%E8%B4%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E6%B8%A0%E9%81%93">如何找到优质的信息渠道</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%8D%E5%90%8C%E6%B8%A0%E9%81%93%E4%BB%8B%E7%BB%8D">信息输入的不同渠道介绍</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7">微信公众号</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">邮件列表</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#twitter">Twitter</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#rss">RSS</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%B9%A6%E5%8D%95">书单</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#google-%E6%90%9C%E7%B4%A2">Google 搜索</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%BE%AE%E4%BF%A1%E7%94%B5%E6%8A%A5%E7%BE%A4">微信 / 电报群</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#1-%E5%AF%B9-1-%E6%B2%9F%E9%80%9A">1 对 1 沟通</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E6%B8%A0%E9%81%93%E9%87%91%E5%AD%97%E5%A1%94">信息输入渠道金字塔</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E6%B8%A0%E9%81%93">我的信息输入渠道</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E7%9B%AE%E6%A0%87%E8%AE%BE%E5%AE%9A">目标设定</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%B8%AA%E4%BA%BA%E6%84%BF%E6%99%AF%E7%9A%84%E8%AE%BE%E5%AE%9A">个人愿景的设定</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E7%9F%A5%E8%AF%86%E5%86%85%E5%8C%96">知识内化</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E6%97%B6%E9%97%B4">如何管理时间</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93">如何建立个人知识库</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%A6%82%E4%BD%95%E7%B3%BB%E7%BB%9F%E9%98%85%E8%AF%BB">如何系统阅读</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E7%9F%A5%E8%AF%86%E8%BE%93%E5%87%BA">知识输出</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%86%99%E4%BD%9C%E7%9A%84%E6%84%8F%E4%B9%89">写作的意义</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%A6%82%E4%BD%95%E5%86%99%E4%BD%9C">如何写作</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%86%99%E4%BD%9C%E6%8E%92%E7%89%88">写作排版</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%86%99%E4%BD%9C%E6%B8%A0%E9%81%93">写作渠道</a><ul><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%8D%9A%E5%AE%A2%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8F">博客 / 微信公众号 / 知乎专栏</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#twittertelegram">Twitter/Telegram</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#youtubebilibili">Youtube/Bilibili</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%86%99%E4%BD%9C%E6%8E%A8%E5%B9%BF">写作推广</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E7%9F%A5%E8%AF%86%E5%BA%94%E7%94%A8">知识应用</a></li></ul></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%B8%AA%E4%BA%BA%E5%93%81%E7%89%8C">个人品牌</a></li><li><a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul><p>为何要建立个人终身学习知识体系</p><p>在这个倡导终身学习的时代，我们已经掌握的知识很快就因为技术变革而过期。所以知识不仅需要系统的学习，还需要好的管理，最终形成自己的个人知识库。</p><p>之前我已经写过 <a href="https://www.bmpi.dev/self/road_to_life_games/">人生游戏之路</a> 与 <a href="https://www.bmpi.dev/self/learn-skill/">如何快速学习一项新技能</a> 两篇关于学习的文章。在这两篇文章中比较零散的阐述了关于「元学习」的概念，现在想想所谓的「元学习」不过是一套个人知识体系 (或者 <a href="https://www.bmpi.dev/series/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/">自我提升</a> 系统)。我们每个人都具备一定的学习能力，在不自觉中掌握某种学习的套路，只是有的人掌握系统化的学习框架，能够横跨多个领域去持续学习。</p><p>学习是一种我们生来就具备的能力：我们可以在学校中学习，也可以在社会中学习；可以在书籍里学习，也可以在与人交流中学习；可以自学，也可以在游历中增长见识。</p><p>我们可以从获取信息通过学习内化成自己的知识，也可以进一步将多种知识转变为自己认知的提高，不断提高的认知加上阅历的提升，最终可能成为某种智慧。 (本文只探讨从信息到知识这一环节。 )</p><p><img src="https://img.bmpi.dev/eefffe63-6d21-438e-d9fb-4eea79a5a22a.png"></p><p>从信息到智慧的过程中，学习贯穿整个流程。构建个人终身学习知识体系的好处，在我看来就是一个<strong>编排出适合自身的持续终身学习流程</strong>，它能帮助我在信息洪流中实现阶段性的人生目标。</p><p>在 <a href="https://www.bmpi.dev/self/annual-summary/2020/">我的 2020</a> 这篇文章中，我以年度总结的方式表达了我是一名终身学习与长期主义者，感兴趣的朋友可以看看。</p><p>建立个人终身学习知识体系流程</p><p>构建个人终身学习知识体系的方式与途径，在我看来由五个阶段组成闭环，通过一个个闭环的学习流程，不断帮助我们进行自我提升。</p><p><img src="https://img.bmpi.dev/bf1093ef-68c2-c92a-0de5-a08decb02b31.png"></p><h3 id="信息输入"><a href="#信息输入" class="headerlink" title="信息输入"></a><a href="https://www.bmpi.dev/self/my-info-input-channel/">信息输入</a></h3><p>每天都有大量的信息输入：</p><ul><li>邮件订阅列表更新；</li><li>关注公众号文章更新；</li><li>博客 RSS 更新；</li><li>社交媒体大量 Posts；</li><li>微信 / 电报群大量聊天信息；</li><li>GitHub 有热门的 Repo 出现；</li><li>知乎有新的高赞回答出现；</li><li>某人有好书推荐给你；</li><li>Google 搜索时发现好的文章；</li><li>培训课程推荐的资料；</li><li>与人沟通时获取的信息。</li></ul><p><strong>一不小心就会被垃圾信息喂养。现代社会不缺优质信息，缺的是如何找到优质信息。</strong></p><p>如何远离低质量信息？我的一些通用的原则是：</p><ul><li><strong>越是大众的渠道信息噪音越高，信息质量越低，而小众的渠道或圈子质量比较高；</strong></li><li>忽略那些没有基本科学素养的人提供的信息，可以用一些基本的常识来测试某个人是否可信；</li><li>高质量的信息很多都不是免费的，为知识付费是一种科学的行为；</li><li>谨慎追热点，热点信息里包含了太多低质量的信息；</li><li>事实只能被接受，观点可以去辩论；</li></ul><h4 id="如何找到优质的信息渠道"><a href="#如何找到优质的信息渠道" class="headerlink" title="如何找到优质的信息渠道"></a>如何找到优质的信息渠道</h4><p>搜索引擎有种算法用来评估某个页面是否是高质量：通过一些可信的经人工审核高质量的网站作为种子网站，对于这些网站链接的网站会认为高质量，而这些链接的网站继续链接的网站也会被认为质量不错。当然也可以反向思考，如果一个网站本身被很多垃圾网站链接，那这个网站大概率质量也不高。这种算法类似一种 <code>信任链传播</code> 的算法。我们可以通过这种算法的方式 <a href="https://www.bmpi.dev/self/my-info-input-channel/">构建自己高质量的信息渠道</a>。</p><blockquote><p>中文世界的信息质量越来越差了。有多种原因引起这种趋势的变化，可看这几个推文进一步了解：</p><ol><li><a href="https://twitter.com/jike_collection/status/1482889415349334017">中文世界信息质量变得越来越差吗？</a></li><li><a href="https://twitter.com/madawei2699/status/1481596368716451842">Worse Is Better</a></li><li><a href="https://twitter.com/madawei2699/status/1482735182327455744">中文内容腐化的速度越来越快了，要获取到好内容需要的成本越来越高</a></li><li><a href="https://twitter.com/nishuang/status/1482455503896825857">我时常感到遗憾的一件事就是很多早期网络优秀内容的消逝</a></li></ol></blockquote><h4 id="信息输入的不同渠道介绍"><a href="#信息输入的不同渠道介绍" class="headerlink" title="信息输入的不同渠道介绍"></a>信息输入的不同渠道介绍</h4><h5 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h5><p>首先准备一些高质量公众号的列表作为初始的关注列表 (可通过阅读它们的文章来判断)，逐渐收集这些公众号推荐的其他公众号。公众号还有一大类是朋友圈和微信群推荐的，对于这类渠道优先选择小众的群里推荐的一些公众号做过滤。对于朋友圈，可以通过 <code>一些基本的常识</code> 来测试是否需要不看某个人的朋友圈，逐步提高朋友圈的信息质量。</p><p>对于好的微信公众号，我一般会用 <code>微信读书</code> 订阅，这样有新的文章会自动提醒我。</p><h5 id="邮件列表"><a href="#邮件列表" class="headerlink" title="邮件列表"></a>邮件列表</h5><p>邮件列表我一般会订阅一些国外的技术周刊。一般是通过 <code>Google</code> 搜索相关技术资料时找到文章订阅地址。</p><p>邮件订阅列表可用 <code>Gmail</code> 的 <code>filter</code> 自动标记 <code>label</code> 并标记已读，这样可以减少大量的未读邮件。</p><h5 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h5><p>Twitter 里我一般会关注一些 List，比如 <a href="https://twitter.com/i/lists/1121637687855681537">Elixir</a> 和 <a href="https://twitter.com/i/lists/1341048200677842950">SEO</a> 这两个技术。这些 List 里包含了相关领域专家，可以获取最新高质量的一手信息。</p><p>一般是通过 <code>Feedly</code> 阅读器订阅。因独立博客的质量都还不错，总是能发掘一些不错的博主。</p><p>中文个人博客订阅列表：</p><ul><li><a href="https://github.com/timqian/chinese-independent-blogs">中文独立博客列表</a></li><li><a href="https://bloghub.fun/">BlogHub</a></li></ul><h5 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h5><p>微信读书与豆瓣豆列里经常可以发现一些不错的书单，我自己也会在 Notion 上整理一些书单：</p><ul><li><a href="https://www.notion.so/mdw/9d9865dd8c35458fa7e0e87ce2d56075?v=1331c5eda6fe4b9794a96b284d3152e6">综合阅读书单</a></li><li><a href="https://www.notion.so/mdw/d85774998e2c4319826709ebd72887fb?v=06970009d99f4a53b5b6ef107ffb23f2">投资阅读书单</a></li></ul><h5 id="Google-搜索"><a href="#Google-搜索" class="headerlink" title="Google 搜索"></a>Google 搜索</h5><p>主动搜索的信息一般要比被动推送的信息质量高，因为主动搜索是我们因某个需求而发起的主动搜索信息的过程。这里推荐掌握 <a href="https://wiki.bmpi.dev/#Google%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2">Google 高级搜索</a> 技巧。</p><h5 id="微信-电报群"><a href="#微信-电报群" class="headerlink" title="微信 / 电报群"></a>微信 / 电报群</h5><p>大众群的信息大多数没价值，所以偶尔看看就行。小众群里反而有不少高质量的信息，进一步可以添加这些人为好友。这里的大众和小众的意思是相对的，比如技术群里很多 <code>Java</code> 技术群是没有价值的，而 <code>Elixir</code> 这种不热门的编程语言，圈子因为小，已经通过技术做了一层过滤了，所以群里的高质量信息比较多。</p><h5 id="1-对-1-沟通"><a href="#1-对-1-沟通" class="headerlink" title="1 对 1 沟通"></a>1 对 1 沟通</h5><p>如果能找到在相关领域有实战经验的人，与他们沟通往往胜过读很多该领域的文章。我有很多时候在读了某领域的书及很多文章后，反而有很多疑惑，通过与有该领域经验的人沟通后豁然开朗。</p><p>如何找到有该领域经验的人并且能建立与他们沟通的机会？这个问题我在下面 <code>知识输出</code> 部分会解答。</p><h4 id="信息输入渠道金字塔"><a href="#信息输入渠道金字塔" class="headerlink" title="信息输入渠道金字塔"></a>信息输入渠道金字塔</h4><p><img src="https://img.bmpi.dev/975bf070-9303-4759-5c77-f6e143f5cd43.png"></p><p>如上图，信息输入渠道分不同层次，最底层的碎片化信息数量最多，但是质量有好有坏且不好区分。而中层主题阅读更适合系统性学习某个领域知识时，我们可以阅读该领域推荐的书单。最顶层的与人交流包含咨询、培训及与拥有该领域经验的人沟通。上面两层已经不算信息输入了，应该算知识与经验输入。</p><p>我在学习某一领域知识时遵循 <code>自低向上</code> 的过程：</p><ol><li>因为一开始在该领域并不认识有该领域经验的人，也不知道读啥书比较合适，所以会先主动搜索该领域的一些文章先建立对该领域的<code>轮廓认识</code>。</li><li>之后会关注一些该领域的公众号 / 知乎大 V/ 邮件列表，甚至是看有没有 Youtube 相关的频道。</li><li>待感觉对该领域有了一个 <code>比较全面的基本认识</code> 后，我会找一些相关书籍去系统性的学习该领域的理论知识。</li><li>理论知识学完后找个场景去应用，去输出一些我自己内化该领域知识的文章，通过这些文章认识对该领域有更深入认识的人。</li><li>之后与这些人建立联系 (包括平台私信、微信与邮件联系)，做 1 对 1 的沟通，解决我在学习实践过程中遇到的一些难以解决的困惑。</li><li>不断的重复该过程，可以加深我对该领域的认知。</li></ol><p>我在学习 <a href="https://www.bmpi.dev/series/%E6%8A%95%E8%B5%84%E5%AE%9E%E8%AF%81/">投资</a> 与 <a href="https://www.bmpi.dev/series/seo%E5%AE%9E%E8%B7%B5%E6%97%A5%E5%BF%97/">SEO</a> 领域知识时，基本是通过上述学习流程而执行的。</p><h4 id="我的信息输入渠道"><a href="#我的信息输入渠道" class="headerlink" title="我的信息输入渠道"></a>我的信息输入渠道</h4><p>以下仅是我常用的信息输入 App 清单：</p><p><img src="https://img.bmpi.dev/b4ac0cc4-b3f5-38a9-f6a8-5cb0554f8fcf.png"></p><ul><li>读库：需要订阅，主要是非虚构类的文章。读库主编老六的品味不错，经常能看到一些有意思的人或事的介绍；</li><li>财新：订阅了财新通，有和读库的组合订阅。可以阅读财新周刊电子版（历年的都可以看），没订阅纸版是因为太贵了，数字版便宜还能在手机上看；</li><li>端传媒：简体中文新闻媒体能看的很少，繁体中文里端算较为客观的，能看到一些不同的视角报道；</li><li>今日热榜：可以订阅一些论坛社区的热门帖子，虽然简体中文新闻媒体很多没法看，但一些好东西可以在老的论坛社区看到。类似的网站有 <a href="https://www.anyknew.com/">AnyKnew</a>，还可以用 <a href="https://github.com/DIYgod/RSSHub">RSSHub</a> 做自己的基于 RSS 的聚合阅读器；</li><li>narwhal：是一个我觉得不错的 <a href="https://reddit.com/">Reddit</a> 社区客户端，看帖子交互比较好；</li><li>图书：iOS 自带的图书 App，配合 <a href="https://z-lib.org/">Z-Library</a> 能阅读海量的电子书。可以和 macOS 的图书自动同步，阅读英文电子书可以用自带的翻译工具大段落的翻译，阅读体验好；</li><li>Octal：<a href="https://news.ycombinator.com/">Hacker News</a> 的第三方 App，偶尔看看，平时还是通过邮件阅读每周热门的帖子；</li><li>YouTube：订阅了会员，没有广告观看体验好很多；</li></ul><h3 id="目标设定"><a href="#目标设定" class="headerlink" title="目标设定"></a>目标设定</h3><p>给自己设定个目标很重要，甚至是个人知识体系最重要的一个环节。如何设定一个长期目标？可以从自身如需求、兴趣、性格、特长、时间等方面考虑，这是一个漫长的过程，我在确定 <a href="https://www.bmpi.dev/goal/">我的中长期目标</a> 时也花了很多时间，甚至在确定后不断的微调。</p><p><a href="https://www.bmpi.dev/">构建我的被动收入</a> 博客就是我在确定自己的中长期目标后建立的，作为追踪我中长期目标的一个平台。下面是我在设定目标时建立的一个公式：</p><pre><code class="hljs abnf">终身学习（认知杠杆）* 全栈技术（时间杠杆）* 投资理财（财务杠杆） <span class="hljs-operator">=</span>&gt; 被动收入（人生杠杆）</code></pre><p>这个公式结合了我擅长的领域和我感兴趣的领域，最终推导出我的中长期目标。</p><p>更进一步的是你可以像公司一样设定自己的个人愿景。</p><h4 id="个人愿景的设定"><a href="#个人愿景的设定" class="headerlink" title="个人愿景的设定"></a>个人愿景的设定</h4><p>愿景的设定决定我们个人做事的基线，它能帮助我们快速决策某件事，如果这件事于我们个人愿景有益，那就可以做，反之不会去做。我给自己设定的 <a href="https://www.bmpi.dev/goal/">三个愿景</a>：</p><ul><li>认知升级：不断学习去升级认知，做更好的自己；</li><li>长期主义：做有长期收益的事情，比如写作与投资；</li><li>积极分享：分享个人经验积极影响他人。</li></ul><p>这三个愿景帮助我在自我管理及自我提升的道路上不断前行。每当遇到阻碍时，我就会从这三个愿景中找寻解决问题的方向，遇到分歧时，也会参考这三个愿景做最终决策。</p><p>认知升级决定了我会不断的学习新的领域去提升我的认知，做更好的自己；长期主义帮助我远离有短期收益的事情，人的精力有限，我不希望我的时间全部耗费在短期收益的事情，如做短线交易与给别人打短工赚钱；积极分享促使我不断输出自己的经验分享给别人，这种分享不是基于自媒体流量思维，而在于我的分享能给我带来一定的社交品牌效果，让我获取更多高质量的社交机会，认识更多具备领域经验的人并与他们做深入学习。</p><p>我的最终目标是构建我的被动收入，但是在愿景里并没有体现这一点。因为被动收入在我看来是结果而非过程，如果我能做到愿景里的这些，获取被动收入是很自然的事情。如果你以赚钱为目标，那实在是很糟糕的个人愿景和人生目标，因为它只是我们努力提升自我的副产物，而非我们的主要目标。</p><h3 id="知识内化"><a href="#知识内化" class="headerlink" title="知识内化"></a>知识内化</h3><p>在获取了大量信息后，我们需要对信息做整理内化，这个过程是信息到知识的一个中间过程，主要的处理流程是通过构建我们的笔记系统，合理的把大量的信息分类整理并建立双向链接，建立卡片式的知识片段，在我们需要输出某类领域知识时，我们可以快速找到这些相关的片段供我们进一步的使用。</p><p>在知识内化的过程中，主要涉及以下几个问题。</p><p><img src="https://img.bmpi.dev/a66b81f2-d887-2f28-f602-61837e345b15.png"></p><h4 id="如何管理时间"><a href="#如何管理时间" class="headerlink" title="如何管理时间"></a>如何管理时间</h4><p>自我提升及自我管理很重要的一个环节是如何管理时间，我们总是抱怨自己没有时间做某个事情，其实并不是没有时间，而是因为时间没有很好的被管理。</p><p>我在 <a href="https://www.bmpi.dev/self/gtd-tools-i-used/">我的时间管理工具</a> 里详细阐述了我的时间管理流程，目前我的待办事项分为 inbox、目标、学习 (阅读)、写作及个人项目五个维度：</p><pre><code class="hljs applescript">.├── inbox.todo├── goal.todo├── study.todo├── <span class="hljs-built_in">write</span>.todo└── side_project.todo</code></pre><p><img src="https://img.bmpi.dev/5bb9960a-90c2-5f56-e5f4-5f7bed261fba.png"></p><p><img src="https://img.bmpi.dev/8fd0f870-5299-c37c-a700-b2109bc84166.png"></p><p><img src="https://img.bmpi.dev/7879f1ea-5dbd-bec5-8ef5-d1521a3511eb.png"></p><p><img src="https://img.bmpi.dev/4c5708db-8fe2-683c-c87a-bc7d07086c89.png"></p><p><img src="https://img.bmpi.dev/674688dc-d7e2-9544-561f-cb76f521efb6.png"></p><p>几乎我所有的待办事项都使用目前这个以 VSCode + 文本 + Email 的方式管理，我把收集的信息拆解到这五个维度里的某个项目中，对于正在做和优先级高的项目都可以在 VSCode 左侧的窗口看到，每天早上还可以收到正在做的事情的邮件提醒：</p><p><img src="https://img.bmpi.dev/5d38f550-046c-dcd2-8ac2-0887a0a155b8.png"></p><p><img src="https://img.bmpi.dev/09a4c3f0-1d47-4571-5f40-cfcb6079272b.png"></p><p>一些杂事都会放在手机日历中，尤其是一些定期重复的事项：</p><p><img src="https://img.bmpi.dev/06f5e5e7-d9a8-22b1-a189-5896c3a55fdc.png"></p><p>目前这种时间管理的方式成本很低，数据都托管至<code>GitHub</code>，可长期持续运行，不受具体软件的影响。</p><h4 id="如何建立个人知识库"><a href="#如何建立个人知识库" class="headerlink" title="如何建立个人知识库"></a>如何建立个人知识库</h4><p>构建个人知识库可以很好的帮助我们进行个人知识管理。我在 <a href="https://www.bmpi.dev/self/note-system/">我的笔记系统</a> 中详细阐述了我的笔记管理流程。目前我的笔记管理主要以 <code>TiddlyWiki</code> 为主，部分还使用 <code>Notion</code> 管理。笔记管理的核心在于可以让我们以很低成本对知识碎片复用且很容易对这些知识片段打 <code>Tag</code> 并建立双向链接，在我们需要该知识碎片的时候很容易找到它。</p><p><img src="https://img.bmpi.dev/f9d4e535-0f43-577b-f354-312f01c173a2.png"></p><p>TiddlyWiki 这种以卡片 (Tiddler) 的形式组织信息，这些 Tiddler 又可以添加 Tag，还可以设置双向链接。对于我组织整理笔记来说足够用了。</p><p>Notion 我一般会放一些非公开的个人信息，还可以多人协作，适合家庭成员共同编辑。当然 Notion 的功能非常强大，已经超出笔记管理的范畴，你可以用它做非常多的事情，比如任务管理、电子看板、博客、电子表格等。</p><p><img src="https://img.bmpi.dev/785dec95-043d-99bd-d2bd-4f4c4dce36c0.png"></p><p>我整理了一个 <a href="https://github.com/madawei2699/notion-sites">Notion 的导航页面</a>，你可以在里面看看别人是怎么玩 Notion 的。</p><h4 id="如何系统阅读"><a href="#如何系统阅读" class="headerlink" title="如何系统阅读"></a>如何系统阅读</h4><p>阅读是一个非常大且复杂的话题，我不想在这里展开细讲，对于如何阅读多种书籍，可以看看《如何阅读一本书》。这本书里会详细介绍不同书籍的阅读方法。我用的最多的是检视阅读与主题阅读。</p><p>对于刚开始接触某个领域，先通过检视阅读多本基础书快速了解这个领域的轮廓。之后整理出主题阅读需要精读的书单，最后通过待办事项设定阅读计划，按计划逐步啃这些书，一般主题阅读可能耗时半年以上。比如我在技术提升目标方面设置的阅读计划如下：</p><p><img src="https://img.bmpi.dev/6a50d6a3-5abe-0af8-b666-166a14c8ae22.png"></p><p>这个阅读清单近 140 多本书，几乎全方面涉及了我感兴趣的领域。投资领域里我也设定了近 40 本书的清单。对于这么多书我并不会全部阅读，这里有很多书是通过检视阅读读个大概，目的就是要更全面的去了解这个领域，防止遗漏某些方面导致作出错误的分析判断。最终主题阅读里的书不会超过 10 本，主题阅读的书单都是一些经典可以长读的书籍。</p><p>由于精力有限，所以我做的阅读很多都是<strong>功利性阅读</strong>，带有一定的目的去读某个领域的书，而非漫无目的的阅读。</p><h3 id="知识输出"><a href="#知识输出" class="headerlink" title="知识输出"></a>知识输出</h3><p>通过知识输出的方式去学习是更高级的终身学习方式。我们可以通过写博客、写 Tweet、社区回答问题及录制视频等诸多方式去输出知识。</p><h4 id="写作的意义"><a href="#写作的意义" class="headerlink" title="写作的意义"></a>写作的意义</h4><ul><li>写作是深度终身学习：当你阅读时，你是被动接受作者的观点，你的大脑并未全面调动起来去分析问题。而一篇文章，需要你耗费很多时间查阅资料，甚至数年的经验总结。当文章发表后，可以与读者互动而相互学习，这种学习是一种深度学习；</li><li>写作是高质量的社交：什么叫无效社交？在群里灌水很难让别人信任你。而一篇好的文章会让读者与作者建立更深度的连接。作者可以通过文章去影响别人，如果这种影响是积极的，那这篇文章就很有价值与影响力；</li><li>写作能创造新的机会：在我写作的一些文章里，有一篇文章让我找到一个新领域的工作机会，有一篇文章让更有经验的人与我合作，有一些文章让别人信任我并给我推荐新的合作机会，有一些文章让我认识更多全国各地的朋友，这些都是无法用流量 (阅读量) 价值来衡量；</li></ul><h4 id="如何写作"><a href="#如何写作" class="headerlink" title="如何写作"></a>如何写作</h4><p>写作最难的是开始动笔写，当你开始去写并且能坚持，这已经算解决了最主要的问题。如果你还犹豫是否要开始写，可以考虑下我上面介绍的写作的意义。</p><p>我一般会在日常阅读或思考时收集一些我可写或感兴趣要学习的主题，先把一些关键点记录下来，然后在有时间时选一篇开始动笔写。一般一篇文章有时候会在一小时写完，有时候会耗费几天甚至一周的时间去写。</p><p>在写的时候，我先会搜索下这个题材有没有人写 (基于 SEO 的方式去写作)，如果有的话大体有哪些热门的文章，先把这些文章简单浏览一遍。之后耗费半小时去罗列提纲，如果这个题材刚好在我的笔记有记录片段信息的话，我会把这些信息也给复制进来。然后开始思考是否需要绘制一些配图，如果需要绘制的话，先开始绘制这些配图，具体的绘图工具可以参考我这篇 <a href="https://www.bmpi.dev/self/my-drawing-toolbox/">我的绘图工具箱</a>。</p><p>之后开始进入写作流程，一般开始写整个人是懵逼的，很难进入状态。这时我会戴着耳机不断重复某首很熟悉的旋律歌曲，这种无限循环的歌曲可以让我大脑很快进入一种写作的心流状态。</p><p>在写作正文的过程中，基于 SEO 的写作模式，我会考虑是否可以与我之前写的文章建立一些链接关系。譬如这篇文章里有一些我之前写过的文章，这样可以把这些分散的文章串联起来，也会让读者对该主题了解的更全面一些 (迫使他在你的网站上停留更长时间)。</p><h4 id="写作排版"><a href="#写作排版" class="headerlink" title="写作排版"></a>写作排版</h4><p>排版规范可参考这篇 <a href="https://github.com/mzlogin/chinese-copywriting-guidelines">中文文案排版指北</a>。</p><p>也可以使用 <a href="https://github.com/sivan/heti">赫蹏</a> 这个库自动对内容进行优化排版（本博客目前中英文混排使用的方案）。</p><p>如果使用 VSCode 编辑 Markdown 的话还可以安装这个 [，在写完文章后一键自动排出上述规范要求的效果。](<a href="https://marketplace.visualstudio.com/items?item&gt;Pangu-Markdown-VSCode">https://marketplace.visualstudio.com/items?item&gt;Pangu-Markdown-VSCode</a></a> 插件&lt;h-char unicode=)</p><p>[文章配图可以使用](<a href="https://marketplace.visualstudio.com/items?item&gt;Pangu-Markdown-VSCode">https://marketplace.visualstudio.com/items?item&gt;Pangu-Markdown-VSCode</a></a> 插件&lt;h-char unicode=)  <a href="https://tinypng.com/">TinyPNG</a> 压缩后上传，这样不仅可以使网页加载速度变得更快，还可以降低你 CDN 和用户的流量费用。</p><blockquote><p>如果你对中文排版设计感兴趣，还可以看 W3C 的这篇 <a href="https://w3c.github.io/clreq/">中文排版需求</a>。</p></blockquote><h4 id="写作渠道"><a href="#写作渠道" class="headerlink" title="写作渠道"></a>写作渠道</h4><p><img src="https://img.bmpi.dev/d0fc8d1b-c56d-e880-d8a4-c1cd6ee85502.png"></p><p>我在 <a href="https://www.bmpi.dev/series/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E7%8E%B0%E4%BB%A3%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/">零成本搭建现代博客指南</a> 这个系列里写了几篇关于如何搭建个人博客的系列文章，感兴趣的可以看看。</p><h5 id="博客-微信公众号-知乎专栏"><a href="#博客-微信公众号-知乎专栏" class="headerlink" title="博客 / 微信公众号 / 知乎专栏"></a>博客 / 微信公众号 / 知乎专栏</h5><p>对于长文，我的发布平台是本博客、微信公众号及知乎专栏。</p><p>一般正文写完后，在 <a href="https://unsplash.com/">Unsplash</a> 上找个封面配图，之后 <a href="https://wiki.bmpi.dev/#Git%E4%B8%80%E9%94%AE%E6%8E%A8%E9%80%81">一键推送</a> 到 GitHub，自动触发发布流程，文章就上线了。</p><p>知乎专栏在博客文章上线后，直接复制粘贴到知乎专栏编辑器就可以了。而微信的排版是用 Markdown 原文粘贴到 <a href="https://wechat.bmpi.dev/">微信公众号在线排版工具</a>，然后复制到微信公众号编辑器，所有配图还得单独上传上去。</p><h5 id="Twitter-Telegram"><a href="#Twitter-Telegram" class="headerlink" title="Twitter/Telegram"></a>Twitter/Telegram</h5><p><a href="https://twitter.com/madawei2699">Twitter</a> 里我一般会发一些简单的短文。也可以选择在长文里复制一些比较精彩的单独发布到 Twitter。</p><p>Telegram 里我创建了三个不同主题的 Channel：一个关于 <a href="https://t.me/improve365">自我成长</a>，一个是关于 <a href="https://t.me/bmpi365">被动收入</a>，一个是关于 <a href="https://t.me/web_cpc">流量研究</a>。</p><p>Telegram 里的玩法比较多，这三个主题的 Channel 里的消息通过机器人转发又会自动汇合至 <a href="https://t.me/bmpi_group">学习 &amp; 技术 &amp; 投资</a> 这个电报群里。在这三个 Channel 里发的消息也会自动通过 Twitter 发布出去。考虑到 SEO 及某些神秘的网络原因导致无法访问的需要，我又创建了一个 <a href="https://github.com/bmpi-dev/tg2web">电报频道静态化工具</a>，这个工具可以自动将三个 Channel 里的消息自动发布到我的博客这个 <a href="https://tg.bmpi.dev/">思考</a> 页面里。</p><h5 id="Youtube-Bilibili"><a href="#Youtube-Bilibili" class="headerlink" title="Youtube/Bilibili"></a>Youtube/Bilibili</h5><p>视频的制作成本很高，在制作了几次质量一般的视频后，我暂时放弃了视频类的发布。目前还是写文字为主，未来等找到低成本制作视频的方式后，我可能会继续尝试以视频的方式输出知识。</p><h4 id="写作推广"><a href="#写作推广" class="headerlink" title="写作推广"></a>写作推广</h4><p>文章写完并发布后，最头疼的事情在于如何推广：<strong>推广就是让别人知道你写了篇牛逼但还没有人看的文章</strong>。我一般选择去微信群、朋友圈、V2EX、Twitter 及 Telegram 里写一段简介 (一般是网页描述标签的内容)，然后附带文章链接发布。之后看别人是否吐槽还是点赞，然后与他们 (可能愉快) 的交流下文章心得。当然如果没人响应你也无所谓，不要气馁，继续坚持写下去，没人看不代表你的文章质量不好，很可能是取了一个令人无感的标题或者选题过于缥缈导致曲高和寡。</p><p>在推广时，如果有好的配图记的附上，比如在 Twitter 上你可以把文章里精彩的配图附上，好的配图比标题更吸引人。</p><h3 id="知识应用"><a href="#知识应用" class="headerlink" title="知识应用"></a>知识应用</h3><p>知识输出只是帮助我们从理论上系统化的学习，而直接做一个相关的项目会帮助我们更深入的理解该领域知识，甚至知识的意义也在于有具体的场景应用。我们的工作就是利用我们所学的知识转化为具体的应用。只有在熟练应用某领域知识后，我才能确定我真的掌握了此领域知识，也就是获取了该技能。</p><p>由于我是一个软件工程师，我的很多技能都是和软件相关的，所以我的项目都是在 GitHub 上托管的。一般处于 idea 阶段的项目我都会记录在待办事项中。而处于正在开发的项目都会托管在 <a href="https://github.com/bmpi-dev/">GitHub</a> 中。完结的项目都会记录在 <a href="https://www.bmpi.dev/project/">个人项目</a> 中。</p><p>如果你要掌握某个领域知识，最好的方式就是做一个相关的个人项目，你可以独立完成或者参与已有的项目。</p><p>idea 不重要，重要的是具体的做法。一旦我有了某个让我产生幻觉的 idea，我都会去搜索一番，很大的概率是别人已经做了。不过这不重要，可以看看别人是如何做的，借鉴改进它。</p><p>个人品牌</p><p>当我们通过终身学习不断的去实践应用，最终就会走到创造属于自己个人品牌的那一步，这也是我认为学习的最终阶段。关于这部分可以进一步阅读这两篇文章：</p><ul><li><a href="https://www.bmpi.dev/self/how-to-get-rich/#%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%93%81%E7%89%8C">打造个人品牌 · 财富常识</a></li><li><a href="https://talk.bmpi.dev/2022/content-marketing-to-personal-brand/">从内容创作到个人品牌</a></li></ul><p>参考文章</p><ol><li><a href="https://pythonhunter.org/episodes/ep23">捕蛇者说：个人知识管理体系系列</a></li><li><a href="https://mp.weixin.qq.com/s/sjpRMaNwnIEAYX04kVtA9A">如何搭建属于你自己个人知识体系 1.0</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>思维改变生活</tag>
      
      <tag>认知升级</tag>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建高质量信息渠道</title>
    <link href="/2022/09/24/%E6%9E%84%E5%BB%BA%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BF%A1%E6%81%AF%E6%B8%A0%E9%81%93/"/>
    <url>/2022/09/24/%E6%9E%84%E5%BB%BA%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BF%A1%E6%81%AF%E6%B8%A0%E9%81%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="构建高质量信息渠道"><a href="#构建高质量信息渠道" class="headerlink" title="构建高质量信息渠道"></a>构建高质量信息渠道</h1><h2 id="如何获取？"><a href="#如何获取？" class="headerlink" title="如何获取？"></a>如何获取？</h2><p>一个人想要获得高质量信息，只有两点：</p><p>第一：要么必须自己花很多时间，实践中慢慢建立知识体系；</p><p>第二：要么花钱买别人的时间。</p><p>如果还没有意识到自身的信息渠道需要系统性地建设，这本身就是一个大问题。</p><h2 id="为什么要高质量有价值的信息？"><a href="#为什么要高质量有价值的信息？" class="headerlink" title="为什么要高质量有价值的信息？"></a>为什么要高质量有价值的信息？</h2><h3 id="更好地做选择"><a href="#更好地做选择" class="headerlink" title="更好地做选择"></a>更好地做选择</h3><p>信息时代，我们获取的知识，无论好的坏的，其实成本都很低。</p><p>我们鼓励实践，但是如果什么东西真都要靠自己实践下来，你会发现成本极高，也极缓慢，虽然这可能是你碰壁之后，得到的精华结果。</p><p>所以怎么样正确的去看待实践呢，我认为，我们应该先尽量低成本，并获取更多有价值的信息，让自己的选择增加好多倍，以更好地指导实践。</p><p>这样就不会浪费时间在噪音和假信号上了</p><h2 id="构建高质量的信息输入渠道-·-构建我的被动收入"><a href="#构建高质量的信息输入渠道-·-构建我的被动收入" class="headerlink" title="构建高质量的信息输入渠道 · 构建我的被动收入"></a>构建高质量的信息输入渠道 · 构建我的被动收入</h2><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.bmpi.dev/self/my-info-input-channel/">www.bmpi.dev</a></p></blockquote><blockquote><p>本文分享如何构建一个高效、高质量的信息输入渠道。</p></blockquote><p>本文聊聊我的信息输入渠道。为什么要聊这个话题？是因为信息源是一个人在信息社会存在的基础。人是社会性的物种，一个社会人对信息是有强烈需求的，而信息源会影响你的行动决策。一个低效低质量的信息渠道可能会让你做出很多错误的决策，以至于会让你形成错误的认知。从认知的角度讲，高质量的信息输入渠道的建设是优先级很高的事情，但诡异的是，很多人却对此投入甚少，甚至选择性忽视掉。</p><p>我在 <a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%8D%E5%90%8C%E6%B8%A0%E9%81%93%E4%BB%8B%E7%BB%8D">构建终身学习体系进行自我提升</a> 中介绍过信息输入的不同渠道，所以这期邮件主要分享如何构建一个高效、高质量的信息输入渠道。</p><p>什么是信息输入</p><p>我对信息输入的理解是<strong>人对某个外界事件的反应行动</strong>，这定义包含三个要素：<strong>人、外界事件、反应行动</strong>。外界事件可以是一个客观物体的存在事件，也可以是对某个事物与人的评价或一个抽象的概念。总之人接触到这些事件后会产生一些反应行动。这些行动可能是经过大脑思考的交流，可能是一个收藏行为，也可能是一个待办任务的制定，但重要的是一定要有反应行动。如果某个外界事件对人毫无反应行动的产生，那就不能算是信息输入。</p><p>信息获取的方式</p><h3 id="主动方式"><a href="#主动方式" class="headerlink" title="主动方式"></a>主动方式</h3><blockquote><p>主动获取信息很类似于健身，你需要不断的锻炼才能让身体变得更健康。</p></blockquote><ul><li>搜索技能：搜索引擎我一般用 Google，如果没法使用 Google 的话我会选择用 Bing 或 <a href="https://duckduckgo.com/">DuckDuckGo</a> 搜索中文信息。一些高级搜索技巧见 <a href="https://wiki.bmpi.dev/#Google%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2">Google 高级搜索</a>。</li><li>订阅：订阅最重要的是找到你认可的作者，然后订阅他们的公众号、邮件列表或频道（杂志、专栏或视频）。我的订阅策略是通过一些搜索渠道或他人推荐的方式先找到一批种子订阅号，之后通过这些号的推荐找到更多的作者。</li><li>阅读：阅读是最古老的主动获取信息（知识）的方式，早期是书籍的形式，现在可能是博客之类的内容形式。在阅读的方式上，我建立了自己的书单。我按照关注的几个主要领域如技术、投资、历史及综合分类，通过其他人推荐或者主动搜索相关领域的推荐书单的形式，构建了我的阅读清单。之后设定阅读计划，通过听书或看书的方式吸收书里的信息。</li></ul><h3 id="被动方式"><a href="#被动方式" class="headerlink" title="被动方式"></a>被动方式</h3><blockquote><p>被动获取信息很类似于通过看电视购物里的减肥广告，期望获取躺着减肥的神奇方法。</p></blockquote><ul><li>算法推荐：现代互联网通过古老的机器学习算法构建了以短视频和推荐信息流为主的信息产品，这类产品类似于减肥药，吃多了容易反弹。推荐算法一个很大的问题会制造出围绕使用者的信息茧房，也就是用户最终看到的都是自己喜欢看到的信息，信息单一化让使用者看到的都是片面的信息，这对提升认知来说是个灾难。</li><li>社交信息流：社交是古老的被动获取信息的方式，比如你在朋友圈子或社交媒体上看到一些八卦的信息。这种信息获取方式最大的问题在于封闭的圈子，如何破圈是关键。举例来说，你是一个程序员，你周围的人大多也是程序员，由于共同的思维方式，你得到的信息也大多是同一类，信息在平流层流动。如果你想了解一些投资的知识，很难找到金融圈的从业人员。我的解决方法是通过不断学习不同领域的知识来认识一些我重点关注领域的人，比如我在学习金融知识的时候会考取一些投资资格证，以及写一些和金融相关的文章，看起来是种很慢的方式，但效果却不错。另外写作是破圈的利器，<a href="https://www.bmpi.dev/self/build-personal-knowledge-system/#%E5%86%99%E4%BD%9C%E7%9A%84%E6%84%8F%E4%B9%89">写作也是高质量的社交方式</a>，作者很容易通过一篇文章破圈。</li></ul><p>信息质量反馈机制</p><p>信息输入是一个墒增的过程，高质量的信息渠道需要不断的投入时间维护，砍掉无用信息的渠道，增加新的高质量的信息渠道。因为我们时间有限，能接受信息的带宽有限，提升信息输入质量的关键在于砍掉低质量的信息渠道，难点在于如何发现低质量的信息渠道。我一般采用以下几种方式解决这个问题：</p><ul><li>全面获取信息，交叉对比：面对一个陌生的领域，第一步我会通过主动获取信息的方式获取到一定量的信息。然后对这些信息做交叉对比。比如一篇文章，如果我认可的多个作者都推荐，我会仔细阅读并获取更多的信息。如果一个观点，不同的人有不同的看法，我会进一步去思考是否接受或者优化这个观点带来的认知。正确的决策需要全面的信息，虽然这个全面也是相对意义上的全面，但对于进一步的行动来说足够就行。</li><li>区分事实与观点：事实是一件事客观的信息存在，虽然有时候我们无法得知真正的事实，看到的可能是别人精心准备的伪造事实。观点是人对事实的思考结论。这两者很容易混淆，尤其是在现代信息爆炸的互联网，我们很容易误把观点当事实。我的解决方法是找到不知道传了多少手信息的最早来源，通过一些搜索技巧，不少信息还是容易找到最早的来源。之后确定这个信息来源是观点还是事实，然后做出自己的反应行动。</li><li>正视偏见：偏见害死人，我们对自己坚持的观点很容易选择性忽略一些重要的信息，做出完全错误的反应行为。正视偏见也是正视自己，我们生来就带有很多偏见，我们生长的环境处处存在偏见，要做到完全无偏见的做事是一种修行。同样的信息对于带有不同偏见的人来说可以产生完全不同的认知，所以面对有对立的观点的信息，先不要立即下定论，而是确定是否自己对此观点持有偏见。</li><li>通过输出与人交流：信息输入好不好，很难直接评测。但通过对此信息的输出，与人交流观点，可以从他人处得知信息输入的质量好坏。通过输出的反馈去提升输入的质量。如果输入的信息源是错误的，我可以从持有正确输入信息源的人的反馈中得知，从而有机会去修正它。</li></ul><p>基于信任度的信息输入渠道建设</p><p>我们在使用 Google 搜索相关关键词的时候，Google 会对海量网页进行 PR 排名，排在第一的页面就是关于此关键词匹配度最高的页面。海量的页面拥有海量的信息，其中很多都是低质量的干扰信息。Google 使用的是 PR 算法，简单的说就是指向网页的每个链接都是对这个页面的投票，这点类似于文献引用，不过存在的问题是垃圾页面可以通过伪造链接的方式欺骗搜索引擎。这点可以理解为热门的信息质量不一定高。</p><p>如何解决这个问题呢？2004 年，雅虎和斯坦福大学发布了一篇名为 <a href="https://www.vldb.org/conf/2004/RS15P3.PDF">Combating Web Spam with TrustRank</a> 的论文。论文提出从一系列被信任的种子网站（由人工审查选取）开始执行 PR 值计算。这种降低垃圾信息影响的方法就叫网站的信任度。</p><p>通过信任度来解决信息输入质量差的问题，比如我会设置一些重点关注的不同领域的作者列表，对于他们的推荐我会优先关注。</p><p>信任度的反面就是黑名单机制了，李笑来老师曾说过 “ <code>S.B. 的共识也是共识</code>”，所以我有个黑名单列表，一旦通过一定时间的观察觉得此信息来源非常不可靠，我会找出和这个信息来源相关的来源，共同加入黑名单。</p><p>通过不断的信任与拉黑不同信息源，这个过程相当于训练一套高质量的信息输入系统，相比算法推荐这类弱人工智能的训练方式，这算是真人工智能的训练方式了。</p><p>除了黑名单外，还有一种奇妙的方法如下：</p><p><img src="https://img.bmpi.dev/4f9ec763-d4c0-2930-a92c-8e1657992165.png"></p><p>高效的信息渠道</p><p>付费和自动化是我构建高效的信息渠道的两种方式。</p><ul><li>付费：好的信息值得付费，比如某些高质量的杂志或邮件列表，这种信息渠道已经经过编辑精心整理，非常高效的把有用的信息传递给人。</li><li>自动化：我会通过一些自动化的方式监控某些信息源，定时将信息通过邮件发送给我。自动化的方式有很多种，比如通过 IFTTT 或 GitHub Actions 自动抓取数据并发送提醒通知。</li></ul><p>信息审查的影响</p><blockquote><p>谁控制过去就控制未来；谁控制现在就控制过去。（一九八四）</p></blockquote><p>信息审查会导致信息失真，一旦信息失真，会让我们做出不可预知的决策。解决这个问题的办法很简单，主动去搜索不同语言不同地区对同一件事的报道，对比分析大概能分析真实的事情走向。</p><p>虽然信息可以被篡改，但互联网有记忆。对于数字化的信息很难被彻底从整个互联网同时篡改了，所以找到这些不同时期的版本对比就能做一些分析。有个号称<code>互联网时光机</code>的网站叫 <a href="https://archive.org/web/">Wayback Machine</a>，它会不断的爬取并备份整个互联网公开的信息，浏览器安装它的插件后当访问某个被删除的页面时会自动找到最近的归档版本，还能查看这个页面的修改记录。如果一个新的网页可能会被某些神秘的力量删除时，可通过插件备份整个页面，这样所有的人都能看到它的历史版本了。</p><p>广告</p><p>这篇文章是 BMPI.dev 第三期的邮件通讯，之前两期见这个 <a href="https://tinyletter.com/i365/archive">归档</a>。邮件订阅是一种古老而高效的获取信息的方式，甚至很难受到网络不可访问或内容审查的影响。所以如果你觉得本文不错的话，可以订阅我的邮件列表，一些敏感而不方便公开的内容我会选择邮件列表的方式发表。</p><p><a href="https://twitter.com/madawei2699"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>思维改变生活</tag>
      
      <tag>认知升级</tag>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac使用Privoxy转发Socks5代理</title>
    <link href="/2022/08/21/Mac%E4%BD%BF%E7%94%A8Privoxy%E8%BD%AC%E5%8F%91Socks5%E4%BB%A3%E7%90%86/"/>
    <url>/2022/08/21/Mac%E4%BD%BF%E7%94%A8Privoxy%E8%BD%AC%E5%8F%91Socks5%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Mac使用Privoxy转发Socks5代理"><a href="#Mac使用Privoxy转发Socks5代理" class="headerlink" title="Mac使用Privoxy转发Socks5代理"></a>Mac使用Privoxy转发Socks5代理</h1><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.jianshu.com/p/f8070c43d502">www.jianshu.com</a></p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><pre><code class="hljs mipsasm">&gt; <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>privoxy</code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h3><h5 id="usr-local-etc-privoxy-config"><a href="#usr-local-etc-privoxy-config" class="headerlink" title="/usr/local/etc/privoxy/config"></a>/usr/local/etc/privoxy/config</h5><p>forward-socks5 / 127.0.0.1:1086 . # 转发本机端口<br>listen-address 0.0.0.0:8118 # 监听 8118 端口</p><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">brew services start privoxy</span></code></pre><h3 id="4-检查状态"><a href="#4-检查状态" class="headerlink" title="4. 检查状态"></a>4. 检查状态</h3><pre><code class="hljs gradle">&gt; ps -ef | <span class="hljs-keyword">grep</span> privoxy<span class="hljs-number">501</span>  <span class="hljs-number">9099</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span>  <span class="hljs-number">7</span>:<span class="hljs-number">56</span>PM ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.41</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>privoxy<span class="hljs-regexp">/3.0.32/</span>sbin<span class="hljs-regexp">/privoxy --no-daemon /u</span>sr<span class="hljs-regexp">/local/</span>etc<span class="hljs-regexp">/privoxy/</span>config&gt; netstat -an | <span class="hljs-keyword">grep</span> <span class="hljs-number">8118</span>tcp4       <span class="hljs-number">0</span>      <span class="hljs-number">0</span>  *.<span class="hljs-number">8118</span>                 *.*                    LISTEN</code></pre><h3 id="5-设置环境变量-IP-为-Privoxy-服务器地址"><a href="#5-设置环境变量-IP-为-Privoxy-服务器地址" class="headerlink" title="5. 设置环境变量, IP 为 Privoxy 服务器地址"></a>5. 设置环境变量, IP 为 Privoxy 服务器地址</h3><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;xxx.xxx.x.x:8118&quot;</span><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;xxx.xxx.x.x:8118&quot;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从vim迁移到neovim</title>
    <link href="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/"/>
    <url>/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="从vim迁移到neovim"><a href="#从vim迁移到neovim" class="headerlink" title="从vim迁移到neovim"></a>从vim迁移到neovim</h1><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --><!-- code_chunk_output --><ul><li><a href="#%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim">从vim迁移到neovim</a><ul><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%8E-vim-%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%86-neovim">为什么我从 vim 迁移到了 neovim</a></li><li><a href="#install">Install</a><ul><li><a href="#mac-%E5%AE%89%E8%A3%85-neovim">mac 安装 neovim</a></li><li><a href="#ubuntu-%E5%AE%89%E8%A3%85-neovim">ubuntu 安装 neovim</a></li><li><a href="#windows-%E5%AE%89%E8%A3%85-neovim">windows 安装 neovim</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#windows%E8%BF%81%E7%A7%BB%E9%85%8D%E7%BD%AE">windows迁移配置</a></li><li><a href="#linux%E6%88%96macos%E8%BF%81%E7%A7%BB%E9%85%8D%E7%BD%AE">linux或MacOS迁移配置</a></li><li><a href="#%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6">推荐几个实用插件</a></li><li><a href="#windows%E4%B8%8Bneovim--lazyvim">windows下neovim + lazyVim</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E4%B8%8B%E8%BD%BD">第一步: 下载</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">第二步: 配置文件</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5-%E5%90%AF%E5%8A%A8nvim">第三步: 启动nvim</a></li><li><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5-%E5%AE%89%E8%A3%85lazyvim%E6%89%80%E9%9C%80%E7%9A%84%E4%BE%9D%E8%B5%96">第四步: 安装Lazyvim所需的依赖:</a></li><li><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5-%E5%AE%89%E8%A3%85nerd-font%E6%94%AF%E6%8C%81lazyvim%E7%9A%84icon%E5%B1%95%E7%A4%BA">第五步: 安装Nerd font支持Lazyvim的icon展示</a><ul><li><a href="#%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB%E5%8F%AF%E9%80%89">扩展阅读(可选)</a></li></ul></li></ul></li></ul><!-- /code_chunk_output --><blockquote><p>为什么我从 vim 迁移到了 neovim 1 vim 打开大文件时的速度实在太慢, 经常容易卡顿. 毕竟一款上世纪的编辑器了, 速度有些慢是可以理解的, 但是我不能接受. hhhhhh. 而 nvim 打开大文件的速…</p></blockquote><h3 id="为什么我从-vim-迁移到了-neovim"><a href="#为什么我从-vim-迁移到了-neovim" class="headerlink" title="为什么我从 vim 迁移到了 neovim"></a>为什么我从 vim 迁移到了 neovim</h3><ul><li>1 vim 打开大文件时的速度实在太慢, 经常容易卡顿. 毕竟一款上世纪的编辑器了, 速度有些慢是可以理解的, 但是我不能接受. hhhhhh.<br>而 nvim 打开大文件的速度就快多了, 这是导致迁移的一大原因, 还有就是有些插件 neovim 独占, 实在眼馋.</li><li>2 异步 API, 内嵌完整 terminal</li><li>3 <a href="https://links.jianshu.com/go?to=neovim.io">neovim 传送门</a></li></ul><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h4 id="mac-安装-neovim"><a href="#mac-安装-neovim" class="headerlink" title="mac 安装 neovim"></a>mac 安装 neovim</h4><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>neovim</code></pre><h4 id="ubuntu-安装-neovim"><a href="#ubuntu-安装-neovim" class="headerlink" title="ubuntu 安装 neovim"></a>ubuntu 安装 neovim</h4><ul><li>首先安装 ppa</li></ul><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> apt-<span class="hljs-meta">get</span> install software-properties-<span class="hljs-meta">common</span></code></pre><ul><li>安装 neovim</li></ul><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">add</span>-repository <span class="hljs-keyword">pp</span><span class="hljs-variable">a:neovim</span>-ppa/unstablesudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span>sudo apt-<span class="hljs-built_in">get</span> install neovim</code></pre><h4 id="windows-安装-neovim"><a href="#windows-安装-neovim" class="headerlink" title="windows 安装 neovim"></a>windows 安装 neovim</h4><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>前置条件（一般在linux上大多要点是天然满足的）：</li><li>正常的网络环境</li><li>安装有neovim</li><li>拥有c/c++工具链</li><li>neovim构建时包含LuaJIT支持</li><li>neovim构建时包含python支持</li><li>安装有Nerd Font系列字体</li><li>终端支持真色彩和下划线显示</li></ul><p><a href="https://github.com/neovim/neovim/blob/master/INSTALL.md">https://github.com/neovim/neovim/blob/master/INSTALL.md</a></p><hr><p><strong>Install from download</strong></p><p>Downloads are available on the <a href="https://github.com/neovim/neovim/releases">Releases</a> page.</p><ul><li>Latest <a href="https://github.com/neovim/neovim/releases/latest">stable release</a><ul><li><a href="https://github.com/neovim/neovim/releases/latest/download/nvim-macos-x86_64.tar.gz">macOS x86_64</a></li><li><a href="https://github.com/neovim/neovim/releases/latest/download/nvim-macos-arm64.tar.gz">macOS arm64</a></li><li><a href="https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz">Linux x86_64</a></li><li><a href="https://github.com/neovim/neovim/releases/latest/download/nvim-linux-arm64.tar.gz">Linux arm64</a></li><li><a href="https://github.com/neovim/neovim/releases/latest/download/nvim-win64.msi">Windows</a></li></ul></li><li>Latest <a href="https://github.com/neovim/neovim/releases/nightly">development prerelease</a></li></ul><p><a href="https://github.com/neovim/neovim/releases/tag/v0.11.0">点我</a><br><a href="https://github.com/neovim/neovim/releases/download/v0.11.0/nvim-win64.zip">安装包</a></p><blockquote><p>Windows<br><em>Zip</em></p><p>Download nvim-win64.zip<br>Extract the zip<br>Run nvim.exe on your CLI of choice</p><p><em>MSI</em><br>Download nvim-win64.msi<br>Run the MSI<br>Run nvim.exe on your CLI of choice<br>Note: On Windows “Server” you may need to install vcruntime140.dll.</p></blockquote><p>安装 <code>nvim-win64.msi</code>, 然后一直下一步即可. </p><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-03-17-42-55.png" class=""><p>等会按 <code>q</code></p><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-03-17-53-47.png" class=""><ol><li>打开git-bash</li><li>新增别名<pre><code class="hljs bash">vi ~/.bashrc</code></pre>写入:<pre><code class="hljs abnf">alias vim<span class="hljs-operator">=</span><span class="hljs-string">&quot;D:/software/develop/nvim-win64/nvim-win64/bin/nvim.exe&quot;</span></code></pre>重新载入.bashrc<pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></li><li>命令行键入 <code>vim</code>, 即可开始简单愉快使用neovim了.</li></ol><h4 id="windows迁移配置"><a href="#windows迁移配置" class="headerlink" title="windows迁移配置"></a>windows迁移配置</h4><blockquote><p><code>注意: </code> 纯vim迁移过来,只是复用vim的配置,没有额外的需求,其实到这里就可以结束了, 不用再关注本文中Lazyvim部分.<br>以下命令的操作是在git-bash.exe环境下执行的</p></blockquote><pre><code class="hljs awk">curl -fLo ~<span class="hljs-regexp">/AppData/</span>Local<span class="hljs-regexp">/nvim/</span>autoload<span class="hljs-regexp">/plug.vim  --create-dirs https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/</span>junegunn<span class="hljs-regexp">/vim-plug/m</span>aster/plug.vim</code></pre><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/AppData/</span>Local<span class="hljs-regexp">/nvim/</span>cp ~<span class="hljs-regexp">/.vimrc ./i</span>nit.vim</code></pre><p><strong>neovim配置目录说明</strong></p><p>windows下的配置目录 <code>~\AppData\Local\nvim</code><br>windows 下的数据目录 <code>~\AppData\Local\nvim-data</code></p><h4 id="linux或MacOS迁移配置"><a href="#linux或MacOS迁移配置" class="headerlink" title="linux或MacOS迁移配置"></a>linux或MacOS迁移配置</h4><ul><li>vim 迁移到 neovim</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.config/nvim/<span class="hljs-built_in">cd</span> ~/.config/nvim<span class="hljs-built_in">cp</span> ~/.vimrc ./init.vim<span class="hljs-built_in">alias</span> vim=nvim</code></pre><ul><li>更新 vim 插件</li></ul><pre><code class="hljs csharp">nvim <span class="hljs-keyword">init</span>.vim:PlugInstall 等待插件更新完毕</code></pre><ul><li>插件管理，推荐使用 plugvim 替换原来的 vundle. 采用并行方式, 插件安装速度加快</li></ul><pre><code class="hljs awk">mkdir -p ~<span class="hljs-regexp">/.config/</span>nvim<span class="hljs-regexp">/autoload/</span>curl -fLo ~<span class="hljs-regexp">/.config/</span>nvim<span class="hljs-regexp">/autoload/</span>plug.vim --create-dirs https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/junegunn/</span>vim-plug<span class="hljs-regexp">/master/</span>plug.vim</code></pre><h4 id="推荐几个实用插件"><a href="#推荐几个实用插件" class="headerlink" title="推荐几个实用插件"></a>推荐几个实用插件</h4><ul><li>1 ncm2 自动补全插件</li></ul><pre><code class="hljs sml"><span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;ncm2</span>/ncm2&#x27;<span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;ncm2</span>/ncm2-path&#x27;<span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;ncm2</span>/ncm2-bufword&#x27;<span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;ncm2</span>/ncm2-jedi&#x27;<span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;ncm2</span>/ncm2-vim&#x27;</code></pre><ul><li>2 有道翻译插件</li></ul><pre><code class="hljs vim">Plug <span class="hljs-string">&#x27;ianva/vim-youdao-translater&#x27;</span><span class="hljs-comment">&quot;youdao translater</span><span class="hljs-keyword">vnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-T&gt;</span> :<span class="hljs-symbol">&lt;C-u&gt;</span>Ydv<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-T&gt;</span> :<span class="hljs-symbol">&lt;C-u&gt;</span>Ydc<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;leader&gt;</span>yd :<span class="hljs-symbol">&lt;C-u&gt;</span>Yde<span class="hljs-symbol">&lt;CR&gt;</span>  ,leader键加yd可以快速调出翻译</code></pre><ul><li>3 fzf 模糊搜索神器</li></ul><pre><code class="hljs 1c">Plug &#x27;junegunn/fzf&#x27;, &#123; &#x27;dir&#x27;: &#x27;~/.fzf&#x27;, &#x27;do&#x27;: &#x27;./install --all&#x27;  &#125;Plug &#x27;junegunn/fzf.vim&#x27;</code></pre><ul><li>4 startify, 在启动 vim 的时候可以显示最近打开的文件</li></ul><pre><code class="hljs nginx"><span class="hljs-attribute">Plug</span> <span class="hljs-string">&#x27;mhinz/vim-startify&#x27;</span></code></pre><ul><li>5 auto-pairs 补全括号</li></ul><pre><code class="hljs 1c">Plug &#x27;jiangmiao/auto-pairs&#x27; <span class="hljs-string">&quot;auto-pairs</span></code></pre><ul><li>6 tabular 对齐插件, 可以快速对齐 “=” 号等</li></ul><pre><code class="hljs elixir"><span class="hljs-title class_">Plug</span> <span class="hljs-string">&#x27;godlygeek/tabular&#x27;</span><span class="hljs-symbol">:Tab/</span>=</code></pre><h2 id="windows下neovim-lazyVim"><a href="#windows下neovim-lazyVim" class="headerlink" title="windows下neovim + lazyVim"></a>windows下neovim + lazyVim</h2><ul><li><a href="https://lazyvim-ambitious-devs.phillips.codes/course/chapter-1/">LazyVim for Ambitious Developers</a></li></ul><h3 id="第一步-下载"><a href="#第一步-下载" class="headerlink" title="第一步: 下载"></a>第一步: 下载</h3><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/LazyVim/</span>starter.git</code></pre><h3 id="第二步-配置文件"><a href="#第二步-配置文件" class="headerlink" title="第二步: 配置文件"></a>第二步: 配置文件</h3><p>这个仓库中最重要的就是 <code>lua 文件夹</code>和 <code>init.lua</code>(这个就是初始化文件) 将其他文件删除</p><p>将这两个文件移动到 <code>~/AppData/Local/nvim/</code> 目录下</p><blockquote></blockquote><h3 id="第三步-启动nvim"><a href="#第三步-启动nvim" class="headerlink" title="第三步: 启动nvim"></a>第三步: 启动nvim</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">vim</span></code></pre><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-03-17-41-21.png" class=""><blockquote><p>注意:  这里的vim命令是 <code>nvim</code>, 因为用户的配置文件里边改了别名: alias vim=/{你的安装路径}/nvim</p><p>Neovim 从 <code>0.5</code> 版本开始，已经内置了 <strong>LuaJIT</strong>（高性能 Lua 解释器），可以直接执行 Lua 脚本。这意味着：</p><ul><li><strong>无需单独安装 Lua</strong>：Neovim 的安装包已经包含完整的 Lua 环境。</li><li><strong>插件和配置直接调用内置 Lua</strong>：所有 Lua 代码（如 LazyVim 的配置文件）都由 Neovim 自身的 Lua 运行时解析。</li></ul></blockquote><p>至此, neovim 已经安装完成, Lazyvim也基本生效了, 但是需要安装一些依赖才能完整使用Lazyvim.</p><h3 id="第四步-安装Lazyvim所需的依赖"><a href="#第四步-安装Lazyvim所需的依赖" class="headerlink" title="第四步: 安装Lazyvim所需的依赖:"></a>第四步: 安装Lazyvim所需的依赖:</h3><pre><code class="hljs dos">neovide git lazygit gcc ripgrep fd unzip <span class="hljs-built_in">tree</span>-sitter luarocks</code></pre><ul><li>tree-sitter - 用于代码语法解析</li><li>fzf - 命令行模糊查找工具</li><li>fd - 现代化替代 find 的工具</li><li>luarocks - Lua 包管理器</li><li>ripgrep - 快速文本搜索 (替代 grep)</li><li>unzip - 解压 ZIP 文件</li><li>lazygit - Git 命令行界面管理工具</li><li>gcc - GNU C/C++ 编译器</li><li>git - 版本控制管理工具</li><li>neovide - Neovim 的图形界面</li><li>nodejs - Node.js 的 JavaScript 运行时环境</li></ul><blockquote><p>以上的需要安装的依赖, 如果你的机器上没有安装, 请先安装.<br>这些软件包都在github上有对应的安装包, 可以直接下载安装.<br>一般都是编译好的二进制文件, windows平台都是exe文件, 配置好对应的环境变量即可.<br>但是, 手动安装的过程太过繁琐, 所以下面使用包管理工具安装依赖(对如何手动安装依赖, 可以移步到下方的扩展阅读或自行百度).</p></blockquote><p><strong>使用版本管理器 nvm 安装 NodeJS</strong></p><p>主要用于内置的 LazyVim 包管理器，称为 <code>mason</code>。</p><p>执行以下命令来安装 nvm 和 NodeJS 的 LTS 版本：</p><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bashnvm install --ltsnvm use --lts</code></pre><p>检查是否安装成功：</p><pre><code class="hljs bash">npm --version</code></pre><p>为了加速 npm 包的下载速度，尤其是在国内网络环境下，使用国内的 npm 镜像源是一个非常有效的方法。以下是一些常见的 npm 镜像源以及如何切换它们的方法。</p><p><strong>常见的 npm 镜像源</strong></p><ol><li><p><strong>淘宝 npm 镜像</strong>：这是一个广泛使用的 npm 国内镜像，由阿里巴巴维护。</p><ul><li>URL: <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></li></ul></li><li><p><strong>cnpm</strong>：由淘宝提供的 npm 客户端，它默认使用淘宝的 npm 镜像。</p><ul><li>URL: <a href="https://r.cnpmjs.org/">https://r.cnpmjs.org</a></li></ul></li></ol><p><strong>如何切换 npm 镜像源</strong></p><p><strong>临时使用</strong><br>如果你只想对某个特定命令使用镜像源，可以在命令前加上 <code>--registry</code> 参数指定镜像地址。例如：</p><pre><code class="hljs bash">npm install &lt;package-name&gt; --registry=https://registry.npmmirror.com</code></pre><p><strong>全局设置</strong><br>如果你想永久更改 npm 的 registry 地址，可以使用如下命令：</p><ul><li><p>设置为淘宝 npm 镜像：</p><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com</code></pre></li><li><p>恢复为官方 npm 源：</p><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org</code></pre></li></ul><p>参考文档：<a href="https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating">nvm 安装和更新</a></p><p><strong>windows下包管理工具的选择</strong></p><p><em>Chocolatey</em></p><p><code>Chocolatey</code> 的社区仓库里有 9000 多个软件，几乎涵盖了所有的主流软件。Chocolatey 还提供一个 GUI 程序，方便普通用户使用。</p><p>由于 Chocolatey 采用常规全局模式安装软件，所以需要管理员权限。如果采用非管理员模式，Chocolatey 只能安装 Portable 版本的软件，可用软件数量就少了很多。</p><p><em>Scoop</em></p><p><code>Scoop</code> 可以添加第三方的 bucket，也就是安装源。默认的 main bucket 里有 900 多个软件，extras bucket 里有 1300 多个软件。值得一提的是，还有个 versions bucket，里面包含了一些软件的历史版本。虽然 Scoop 上的软件数量不多，但是涵盖了大多数开发工具。对于软件开发人员来说，使用 Scoop 来搭建开发环境相当方便。</p><p>与 Chocolatey 采用系统全局安装方式不同的是，Scoop 安装的软件都保存在 %userprofile%\scoop\apps 路径下，不会污染全局环境，不需要管理员权限就可以安装软件。</p><p><strong>安装Scoop</strong></p><blockquote><p>这里以下写好的安装脚本, 执行环境需要是管理员权限</p></blockquote><p><em>0: 代理环境准备(如果你不是在墙内,可以跳过)</em></p><p><strong><em>powershell代理</em></strong></p><p>以管理员的身份运行powershell:</p><pre><code class="hljs arduino">Start-<span class="hljs-built_in">Process</span> powershell -Verb runAs</code></pre><p>设置代理</p><pre><code class="hljs routeros">netsh winhttp <span class="hljs-built_in">set</span><span class="hljs-built_in"> proxy </span><span class="hljs-string">&quot;127.0.0.1:7890&quot;</span></code></pre><p>检查代理:</p><pre><code class="hljs dart">netsh winhttp <span class="hljs-keyword">show</span> proxy</code></pre><p>测试连接:</p><pre><code class="hljs awk">iwr -Uri https:<span class="hljs-regexp">//</span>www.google.com<span class="hljs-comment"># or</span>iwr -Uri https:<span class="hljs-regexp">//</span>www.google.com | Select-Object -Property StatusCode</code></pre><p>关闭proxy:</p><pre><code class="hljs ebnf"><span class="hljs-attribute">netsh winhttp reset proxy</span></code></pre><p><em>1. 创建文件 <code>install.ps1</code></em></p><p>内容如下:</p><pre><code class="hljs powershell"><span class="hljs-comment"># Self-elevate the script if not running as administrator</span><span class="hljs-keyword">if</span> (<span class="hljs-operator">-not</span> ([<span class="hljs-type">Security.Principal.WindowsPrincipal</span>] [<span class="hljs-type">Security.Principal.WindowsIdentity</span>]::GetCurrent()).IsInRole(`    [<span class="hljs-type">Security.Principal.WindowsBuiltInRole</span>] <span class="hljs-string">&quot;Administrator&quot;</span>)) &#123;    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Restarting as administrator...&quot;</span>    <span class="hljs-built_in">Start-Process</span> powershell <span class="hljs-string">&quot;-NoProfile -ExecutionPolicy Bypass -File `&quot;<span class="hljs-variable">$PSCommandPath</span>`&quot;&quot;</span> <span class="hljs-literal">-Verb</span> RunAs    <span class="hljs-keyword">exit</span>&#125;<span class="hljs-comment"># Set execution policy</span><span class="hljs-built_in">Set-ExecutionPolicy</span> <span class="hljs-literal">-ExecutionPolicy</span> RemoteSigned <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-literal">-Force</span><span class="hljs-comment"># Install Scoop</span><span class="hljs-comment"># Check if Scoop is already installed</span><span class="hljs-variable">$ScoopInstalled</span> = <span class="hljs-built_in">Get-Command</span> scoop <span class="hljs-literal">-ErrorAction</span> SilentlyContinue<span class="hljs-keyword">if</span> (<span class="hljs-operator">-not</span> <span class="hljs-variable">$ScoopInstalled</span>) &#123;    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Scoop not found. Installing Scoop...&quot;</span>    <span class="hljs-built_in">irm</span> get.scoop.sh <span class="hljs-literal">-outfile</span> <span class="hljs-string">&#x27;install.ps1&#x27;</span>    <span class="hljs-built_in">iex</span> <span class="hljs-string">&quot;&amp; &#123;<span class="hljs-variable">$</span>(irm get.scoop.sh)&#125; -RunAsAdmin&quot;</span>    <span class="hljs-comment"># Clean up install.ps1</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Test-Path</span> <span class="hljs-string">&quot;./install.ps1&quot;</span>) &#123;        <span class="hljs-built_in">Remove-Item</span> <span class="hljs-string">&quot;./install.ps1&quot;</span> <span class="hljs-literal">-Force</span>        <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Removed install.ps1&quot;</span>    &#125;&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Scoop is already installed. Skipping installation.&quot;</span>&#125;<span class="hljs-comment"># Define Scoop directories</span><span class="hljs-variable">$SCOOP_USER</span> = <span class="hljs-string">&#x27;D:\software\develop\Scoop\userApps&#x27;</span><span class="hljs-variable">$SCOOP_GLOBAL</span> = <span class="hljs-string">&#x27;D:\software\develop\Scoop\globalApps&#x27;</span><span class="hljs-comment"># Create directories if not exist</span><span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">Test-Path</span> <span class="hljs-variable">$SCOOP_USER</span>)) &#123;    <span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-ItemType</span> Directory <span class="hljs-literal">-Path</span> <span class="hljs-variable">$SCOOP_USER</span> <span class="hljs-literal">-Force</span> | <span class="hljs-built_in">Out-Null</span>    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Created user app directory: <span class="hljs-variable">$SCOOP_USER</span>&quot;</span>&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;User app directory already exists: <span class="hljs-variable">$SCOOP_USER</span>&quot;</span>&#125;<span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">Test-Path</span> <span class="hljs-variable">$SCOOP_GLOBAL</span>)) &#123;    <span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-ItemType</span> Directory <span class="hljs-literal">-Path</span> <span class="hljs-variable">$SCOOP_GLOBAL</span> <span class="hljs-literal">-Force</span> | <span class="hljs-built_in">Out-Null</span>    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Created global app directory: <span class="hljs-variable">$SCOOP_GLOBAL</span>&quot;</span>&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Global app directory already exists: <span class="hljs-variable">$SCOOP_GLOBAL</span>&quot;</span>&#125;<span class="hljs-comment"># Set environment variables for current user</span>[<span class="hljs-type">Environment</span>]::SetEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP&#x27;</span>, <span class="hljs-variable">$SCOOP_USER</span>, [<span class="hljs-type">EnvironmentVariableTarget</span>]::User)[<span class="hljs-type">Environment</span>]::SetEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP_GLOBAL&#x27;</span>, <span class="hljs-variable">$SCOOP_GLOBAL</span>, [<span class="hljs-type">EnvironmentVariableTarget</span>]::User)<span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Environment variables set:&quot;</span><span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;  SCOOP = <span class="hljs-variable">$SCOOP_USER</span>&quot;</span><span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;  SCOOP_GLOBAL = <span class="hljs-variable">$SCOOP_GLOBAL</span>&quot;</span><span class="hljs-comment"># Set them for current session as well</span><span class="hljs-variable">$env:SCOOP</span> = <span class="hljs-variable">$SCOOP_USER</span><span class="hljs-variable">$env:SCOOP_GLOBAL</span> = <span class="hljs-variable">$SCOOP_GLOBAL</span><span class="hljs-comment"># Install aria2 to speed up downloads</span>scoop install aria2<span class="hljs-comment"># Clean up install.ps1</span><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Test-Path</span> <span class="hljs-string">&quot;./install.ps1&quot;</span>) &#123;    <span class="hljs-built_in">Remove-Item</span> <span class="hljs-string">&quot;./install.ps1&quot;</span> <span class="hljs-literal">-Force</span>    <span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Removed install.ps1&quot;</span>&#125;<span class="hljs-built_in">Write-Host</span> <span class="hljs-string">&quot;Setup complete&quot;</span></code></pre><p><em>2. 管理员运行powershell</em></p><p>执行如下命令:</p><pre><code class="hljs bash">./install.ps1</code></pre><p><strong>Scoop安装LazyVim所需依赖</strong></p><p>打开git-bash.exe， 新建文件 <code>scoop_tools_installer.sh</code>, 写入如下内容</p><pre><code class="hljs bash"><span class="hljs-comment">#!/usr/bin/env bash</span><span class="hljs-comment"># 定义输出颜色（绿色、黄色、重置）</span>GREEN=<span class="hljs-string">&quot;\033[32m&quot;</span>YELLOW=<span class="hljs-string">&quot;\033[33m&quot;</span>RESET=<span class="hljs-string">&quot;\033[0m&quot;</span><span class="hljs-comment"># 工具名到描述的映射表（用于展示）</span><span class="hljs-built_in">declare</span> -A TOOL_MAP=(  [httpd]=<span class="hljs-string">&quot;Apache HTTP Server (含 ab 性能测试工具)&quot;</span>  [fzf]=<span class="hljs-string">&quot;命令行模糊查找工具&quot;</span>  [fd]=<span class="hljs-string">&quot;现代化替代 find 的工具&quot;</span>  [gcc]=<span class="hljs-string">&quot;GNU C/C++ 编译器&quot;</span>  [ripgrep]=<span class="hljs-string">&quot;快速文本搜索 (替代 grep)&quot;</span>  [unzip]=<span class="hljs-string">&quot;解压 ZIP 文件&quot;</span>  [tree-sitter]=<span class="hljs-string">&quot;用于代码语法解析&quot;</span>  [luarocks]=<span class="hljs-string">&quot;Lua 包管理器&quot;</span>  [lazygit]=<span class="hljs-string">&quot;Git 命令行界面管理工具&quot;</span>  [jq]=<span class="hljs-string">&quot;轻量级 JSON 处理工具&quot;</span>  [mycli]=<span class="hljs-string">&quot;MySQL 命令行客户端&quot;</span>  [shellcheck]=<span class="hljs-string">&quot;Shell 脚本静态分析工具&quot;</span>  [htop]=<span class="hljs-string">&quot;交互式进程查看器&quot;</span>  [axel]=<span class="hljs-string">&quot;多线程下载工具&quot;</span>  [sz]=<span class="hljs-string">&quot;Zmodem 传输工具&quot;</span>  [rz]=<span class="hljs-string">&quot;Zmodem 传输工具&quot;</span>  [cloc]=<span class="hljs-string">&quot;代码统计工具&quot;</span>  [tmux]=<span class="hljs-string">&quot;终端复用工具&quot;</span>  [you-get]=<span class="hljs-string">&quot;媒体下载工具&quot;</span>  [thefuck]=<span class="hljs-string">&quot;命令行命令更正工具&quot;</span>  [wget]=<span class="hljs-string">&quot;下载文件工具&quot;</span>)<span class="hljs-comment"># 工具名到使用提示的映射（安装后展示）</span><span class="hljs-built_in">declare</span> -A TOOL_TIPS=(  [httpd]=<span class="hljs-string">&quot;运行 ab 性能测试：ab -n 100 -c 10 http://localhost/&quot;</span>  [fzf]=<span class="hljs-string">&quot;使用：git ls-files | fzf&quot;</span>  [fd]=<span class="hljs-string">&quot;使用：fd keyword&quot;</span>  [gcc]=<span class="hljs-string">&quot;使用：gcc hello.c -o hello&quot;</span>  [ripgrep]=<span class="hljs-string">&quot;使用：rg &#x27;pattern&#x27; ./src&quot;</span>  [unzip]=<span class="hljs-string">&quot;使用：unzip file.zip&quot;</span>  [tree-sitter]=<span class="hljs-string">&quot;使用需搭配 Neovim / CLI 工具&quot;</span>  [luarocks]=<span class="hljs-string">&quot;使用：luarocks install &lt;package&gt;&quot;</span>  [lazygit]=<span class="hljs-string">&quot;使用：lazygit&quot;</span>  [jq]=<span class="hljs-string">&quot;使用：echo &#x27;&#123;&quot;</span>name<span class="hljs-string">&quot;: &quot;</span>John<span class="hljs-string">&quot;&#125;&#x27; | jq .name&quot;</span>  [mycli]=<span class="hljs-string">&quot;使用：mycli -u root -p&quot;</span>  [shellcheck]=<span class="hljs-string">&quot;使用：shellcheck your_script.sh&quot;</span>  [htop]=<span class="hljs-string">&quot;使用：htop&quot;</span>  [axel]=<span class="hljs-string">&quot;使用：axel https://example.com/file.zip&quot;</span>  [sz]=<span class="hljs-string">&quot;使用：sz filename&quot;</span>  [rz]=<span class="hljs-string">&quot;使用：rz&quot;</span>  [cloc]=<span class="hljs-string">&quot;使用：cloc .&quot;</span>  [tmux]=<span class="hljs-string">&quot;使用：tmux new-session -s mysession&quot;</span>  [you-get]=<span class="hljs-string">&quot;使用：you-get https://www.youtube.com/watch?v=example&quot;</span>  [thefuck]=<span class="hljs-string">&quot;使用：fuck&quot;</span>  [wget]=<span class="hljs-string">&quot;使用：wget --help&quot;</span>)selected_tools=()TOOL_KEYS=()<span class="hljs-comment"># 检查 scoop 是否安装，若无则使用管理员权限安装</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">check_scoop</span></span>() &#123;  <span class="hljs-keyword">if</span> ! <span class="hljs-built_in">command</span> -v scoop &amp;&gt;/dev/null; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>未检测到 scoop，正在以管理员权限安装...<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>    powershell -Command <span class="hljs-string">&quot;Write-Host &#x27;Scoop not found. Installing Scoop...&#x27;; irm get.scoop.sh -outfile &#x27;install.ps1&#x27;; iex \&quot;&amp; &#123;<span class="hljs-subst">$(irm get.scoop.sh)</span>&#125; -RunAsAdmin\&quot;&quot;</span>  <span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GREEN&#125;</span>✔ Scoop 已安装<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-comment"># 添加常用的 bucket（仓库），以获取更多软件</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">add_buckets</span></span>() &#123;  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>添加常用 bucket...<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>  scoop bucket add main || <span class="hljs-literal">true</span>      <span class="hljs-comment"># 主仓库</span>  scoop bucket add extras || <span class="hljs-literal">true</span>    <span class="hljs-comment"># 额外工具仓库</span>  scoop bucket add versions || <span class="hljs-literal">true</span>  <span class="hljs-comment"># 版本控制类工具仓库</span>&#125;<span class="hljs-comment"># 交互式选择安装的工具</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">select_tools_interactive</span></span>() &#123;  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>请选择你要安装的工具（空格分隔编号，如 1 3 5）：<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>    i=1  <span class="hljs-comment"># 遍历 TOOL_MAP 中的所有键（工具名）</span>  <span class="hljs-keyword">for</span> tool <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;!TOOL_MAP[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;  [<span class="hljs-variable">$i</span>] <span class="hljs-variable">$&#123;tool&#125;</span> - <span class="hljs-variable">$&#123;TOOL_MAP[$tool]&#125;</span>&quot;</span>    TOOL_KEYS[<span class="hljs-variable">$i</span>]=<span class="hljs-variable">$tool</span>    ((i++))  <span class="hljs-comment"># 递增编号</span>  <span class="hljs-keyword">done</span>  <span class="hljs-built_in">read</span> -rp <span class="hljs-string">&quot;你的选择: &quot;</span> selection  <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-variable">$selection</span>; <span class="hljs-keyword">do</span>    selected_tools+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TOOL_KEYS[$index]&#125;</span>&quot;</span>)  <span class="hljs-keyword">done</span>&#125;<span class="hljs-comment"># 安装选择的工具</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_tools</span></span>() &#123;  <span class="hljs-keyword">for</span> tool <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;selected_tools[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>安装 <span class="hljs-variable">$&#123;tool&#125;</span>...<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>    scoop install <span class="hljs-string">&quot;<span class="hljs-variable">$tool</span>&quot;</span>  <span class="hljs-keyword">done</span>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n<span class="hljs-variable">$&#123;GREEN&#125;</span>✅ 所有工具已安装完成！<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>&#125;<span class="hljs-comment"># 显示每个工具的使用小贴士</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">show_tips</span></span>() &#123;  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n<span class="hljs-variable">$&#123;YELLOW&#125;</span>🧠 使用小贴士:<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>  <span class="hljs-keyword">for</span> tool <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;selected_tools[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GREEN&#125;</span>- <span class="hljs-variable">$tool</span>:<span class="hljs-variable">$&#123;RESET&#125;</span> <span class="hljs-variable">$&#123;TOOL_TIPS[$tool]&#125;</span>&quot;</span>  <span class="hljs-keyword">done</span>&#125;<span class="hljs-comment"># 解析命令行参数</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">parse_args</span></span>() &#123;  <span class="hljs-keyword">while</span> [[ <span class="hljs-variable">$#</span> -gt 0 ]]; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span>      --all)        <span class="hljs-comment"># --all: 安装所有工具</span>        selected_tools=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;!TOOL_MAP[@]&#125;</span>&quot;</span>)        <span class="hljs-built_in">return</span>        ;;      --tools)        <span class="hljs-comment"># --tools 后面接多个工具名</span>        <span class="hljs-built_in">shift</span>        <span class="hljs-keyword">while</span> [[ <span class="hljs-variable">$#</span> -gt 0 &amp;&amp; ! <span class="hljs-variable">$1</span> =~ ^-- ]]; <span class="hljs-keyword">do</span>          selected_tools+=(<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)          <span class="hljs-built_in">shift</span>        <span class="hljs-keyword">done</span>        ;;      *)        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;YELLOW&#125;</span>⚠️ 未知参数：$1<span class="hljs-variable">$&#123;RESET&#125;</span>&quot;</span>        <span class="hljs-built_in">shift</span>        ;;    <span class="hljs-keyword">esac</span>  <span class="hljs-keyword">done</span>&#125;<span class="hljs-comment"># 主函数</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;  check_scoop       <span class="hljs-comment"># 检查 Scoop 安装</span>  add_buckets       <span class="hljs-comment"># 添加 bucket</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$#</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    parse_args <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>  <span class="hljs-comment"># 解析命令行参数</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-comment"># 如果没有通过参数选择工具，就进入交互模式</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;#selected_tools[@]&#125;</span> -eq 0 ]]; <span class="hljs-keyword">then</span>    select_tools_interactive  <span class="hljs-keyword">fi</span>  install_tools  show_tips&#125;<span class="hljs-comment"># 执行主函数，传入所有参数</span>main <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span></code></pre><p>执行安装</p><pre><code class="hljs jboss-cli"><span class="hljs-string">./scoop_tools_installer.sh</span> <span class="hljs-params">--all</span></code></pre><p><strong>进入neovim</strong></p><blockquote><p>进入neovim后, lazyvim会自动安装依赖包</p></blockquote><pre><code class="hljs ebnf"><span class="hljs-attribute">nvim</span></code></pre><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-03-17-41-21.png" class=""><h3 id="第五步-安装Nerd-font支持Lazyvim的icon展示"><a href="#第五步-安装Nerd-font支持Lazyvim的icon展示" class="headerlink" title="第五步: 安装Nerd font支持Lazyvim的icon展示"></a>第五步: 安装Nerd font支持Lazyvim的icon展示</h3><p>这是关键的一步，因为Neovim显示的许多细节依赖于额外的“字形”才能正确显示。你问，什么是字形？简单来说：单词中的一个字符在技术上是一个字形，图标也是一个字形，边框字符或角落字符等也是字形。Neovim使用这些字形一点一点构建用户界面。你可以在Nerdfont.com找到大量可免费下载的Nerd字体。我个人喜欢Caskaydia Cove，所以我下载了它。</p><p>然后通过右键点击你刚刚下载的文件夹并选择“全部解压缩”，来解压（提取）文件夹，然后打开弹出的新解压后的文件夹。<del>你会看到一大堆文件，你需要找到那些标明与Windows兼容的文件。</del> 编辑提示 - 此字体现在似乎已经更新，所以只需全部选中即可，但请注意，此下载包含Monospace（等宽）和Regular（常规）版本，因此你会得到这两者。</p><p>然后，右键点击你选中的字体组，并选择“为所有用户安装”。这将使这些字体在你的系统中对所有用户都可用。</p><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-17-00-14-54.png" class=""><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-17-00-12-57.png" class=""><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-17-00-09-36.png" class=""><p>如图搜所示, icon都显示正常了:</p><img src="/2022/08/21/%E4%BB%8Evim%E8%BF%81%E7%A7%BB%E5%88%B0neovim/2025-04-17-00-17-52.png" class=""><h2 id="扩展阅读-可选"><a href="#扩展阅读-可选" class="headerlink" title="扩展阅读(可选)"></a>扩展阅读(可选)</h2><p>有时候, 一些包管理工具没有对应的软件源, 则需要手动安装了对应的软件包.</p><p><strong>手动安装gcc环境</strong></p><p>Linux 和 Mac OS 这里应该不会有问题。</p><p>对于 Windows，因为 <code>Treesitter</code> 需要 C 语言编译器编译一些语法解析器，所以我们需要装一个 C 编译器.</p><p><a href="https://github.com/niXman/mingw-builds-binaries/releases/download/14.2.0-rt_v12-rev0/x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0.7z">x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0.7z</a>，直接点击就可以下载到浏览器下载目录下。如果有其他需要，也可以下载其他的压缩包，其中：</p><ul><li><p><code>i686</code> 是 32 位版本，x86_64 是 64 位版本</p></li><li><p><code>win32</code> 适用于 windows 操作系统，posix 适用于其他操作系统</p></li><li><p><code>dwarf</code> 是 32 位的异常处理系统，seh 适用于 64 位</p></li><li><p><code>msvcrt</code> 是旧版微软 C 运行时库，ucrt 是新版运行时库</p></li></ul><p>解压到你喜欢的目录下，然后把解压后的文件夹移动到 <code>&#123;你的解压目录&#125;</code> 目录下，然后把 <code>&#123;填写你的解压目录&#125;\mingw64\bin</code> 添加到 <code>PATH</code> 环境变量中。</p><pre><code class="hljs awk">curl -OL https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/niXman/mi</span>ngw-builds-binaries<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/14.2.0-rt_v12-rev0/</span>x86_64-<span class="hljs-number">14.2</span>.<span class="hljs-number">0</span>-release-win32-seh-ucrt-rt_v12-rev0.<span class="hljs-number">7</span>z -o <span class="hljs-regexp">/d/</span>software<span class="hljs-regexp">/develop/</span></code></pre><p>配置环境变量:</p><pre><code class="hljs moonscript"><span class="hljs-name">D</span>:\software\develop\mingw64\bin</code></pre><p><strong>手动安装chocolatey</strong></p><p>管理员身份打开 PowerShell 的命令行界面，输入如下命令：</p><pre><code class="hljs pgsql"><span class="hljs-keyword">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol = [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol -bor <span class="hljs-number">3072</span>; iex ((<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))</code></pre><pre><code class="hljs crmsh">choco config set <span class="hljs-keyword">location</span> <span class="hljs-title">D</span>:/software/develop/</code></pre><blockquote><p><strong>1. Chocolatey 的默认安装路径是什么？</strong><br>A: <code>C:\ProgramData\chocolatey\lib</code>。</p></blockquote><p>如果安装过内容, C:\ProgramData\chocolatey\lib中的内容如下:</p><pre><code class="hljs tap">-rw-r--r--<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span> <span class="hljs-number"> 21 </span>Apr <span class="hljs-number"> 9 </span>23:46 _processed.txt-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:41 bin2c5.1.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>144K Feb<span class="hljs-number"> 27 </span>14:04 choco.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:39 fd.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:40 fzf.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>383K Apr<span class="hljs-number"> 10 </span>00:41 lua5.1.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:41 luac5.1.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:41 luarocks.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:41 luarocks-admin.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:41 luarocksw.exe*-rw-r--r--<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>4.4K Feb<span class="hljs-number"> 27 </span>14:04 RefreshEnv.cmd-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>384K Apr<span class="hljs-number"> 10 </span>00:38 rg.exe*-rwxr-xr-x<span class="hljs-number"> 1 </span>fhlin<span class="hljs-number"> 197609 </span>383K Apr<span class="hljs-number"> 10 </span>00:41 wlua5.1.exe*</code></pre><blockquote><p><strong>2. 如何更改 Chocolatey 的安装路径？</strong><br>A: 使用 <code>choco config set location &lt;new-path&gt;</code> 命令。</p><p><strong>3. 如何查找已安装软件包的路径？</strong><br>A: 使用 <code>choco list -lo</code> PowerShell 命令或 ChocolateyGUI。</p><p><strong>4. 更改 Chocolatey 安装路径后需要做什么？</strong><br>A: 重新启动 PowerShell 以使更改生效。</p></blockquote><pre><code class="hljs cmake">choco <span class="hljs-keyword">install</span> neovide ripgrep fd fzf luarocks</code></pre><blockquote><p>如果你很多都没装, 则下边的命令会全一些<br>scoop install neovim neovide git lazygit gcc ripgrep fd unzip tree-sitter luarocks</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Nginx</title>
    <link href="/2022/07/17/Docker%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/2022/07/17/Docker%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h1><h2 id="数据卷规划"><a href="#数据卷规划" class="headerlink" title="数据卷规划"></a>数据卷规划</h2><img src="/2022/07/17/Docker%E5%AE%89%E8%A3%85Nginx/2022-07-17-18-30-55.png" class=""><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> --name fhltestnginx -v ~<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>nginx<span class="hljs-regexp">/www:/</span>opt<span class="hljs-regexp">/www -v ~/</span>Documents<span class="hljs-regexp">/software/</span>docker_volume_mapping<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/nginx.conf:/</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf -v ~<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>nginx<span class="hljs-regexp">/conf/</span>conf.d:<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d -v ~/</span>Documents<span class="hljs-regexp">/software/</span>docker_volume_mapping<span class="hljs-regexp">/nginx/</span>logs:<span class="hljs-regexp">/var/</span>log/nginx  nginx:latest</code></pre><h2 id="Nginx-conf"><a href="#Nginx-conf" class="headerlink" title="Nginx.conf"></a>Nginx.conf</h2><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  root;<span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<span class="hljs-attribute">error_log</span>  /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">warn</span>;<span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<span class="hljs-section">events</span> &#123;    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;&#125;<span class="hljs-section">http</span> &#123;    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;    <span class="hljs-attribute">default_type</span>  application/octet-stream;    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;    <span class="hljs-comment">#tcp_nopush     on;</span>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">120</span>;    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">20m</span>;    <span class="hljs-comment">#gzip  on;</span>    <span class="hljs-section">server</span> &#123;        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;        <span class="hljs-attribute">server_name</span>  xxxx.yyyy.zzzz;        <span class="hljs-comment">#root /usr/share/nginx/html;</span><span class="hljs-comment">#root /opt/www/redis_geektime/html;</span>        <span class="hljs-attribute">index</span> index.php index.html index.htm;        <span class="hljs-section">location</span> / &#123;            <span class="hljs-attribute">root</span> /opt/www/;        &#125;<span class="hljs-comment">#        if (!-e $request_filename) &#123;</span><span class="hljs-comment">#            root /opt/www/SpringSeries;</span><span class="hljs-comment">#        &#125;</span>        <span class="hljs-section">location</span> /redis &#123;            <span class="hljs-attribute">alias</span> /opt/www/redis_geektime/html;            <span class="hljs-comment">#指定主页</span>            <span class="hljs-attribute">index</span> index.html;            <span class="hljs-comment">#自动跳转</span>            <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /interview &#123;            <span class="hljs-attribute">alias</span> /opt/www/interview/;             <span class="hljs-comment">#指定主页</span>            <span class="hljs-attribute">index</span> index.html;            <span class="hljs-comment">#自动跳转</span>            <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /Spring  &#123;            <span class="hljs-attribute">alias</span> /opt/www/Spring;            <span class="hljs-comment">#指定主页</span>            <span class="hljs-attribute">index</span> index.html;            <span class="hljs-comment">#自动跳转</span>            <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /Netty  &#123;              <span class="hljs-attribute">alias</span> /opt/www/Netty;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /StudyGuide  &#123;              <span class="hljs-attribute">alias</span> /opt/www/StudyGuide;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /Dubbo  &#123;              <span class="hljs-attribute">alias</span> /opt/www/Dubbo;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /SpringMVC  &#123;              <span class="hljs-attribute">alias</span> /opt/www/SpringMVC;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /SpringBoot  &#123;              <span class="hljs-attribute">alias</span> /opt/www/SpringBoot;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /mybatis  &#123;              <span class="hljs-attribute">alias</span> /opt/www/mybatis;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /JDK  &#123;              <span class="hljs-attribute">alias</span> /opt/www/JDK;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /RedisSource  &#123;              <span class="hljs-attribute">alias</span> /opt/www/RedisSource;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /DatabaseDesign  &#123;              <span class="hljs-attribute">alias</span> /opt/www/DatabaseDesign;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-section">location</span> /SpringSeries&#123;              <span class="hljs-attribute">alias</span> /opt/www/SpringSeries;              <span class="hljs-comment">#指定主页</span>              <span class="hljs-attribute">index</span> index.html;              <span class="hljs-comment">#自动跳转</span>              <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;        &#125;        <span class="hljs-comment"># 该配置能成功访问到静态pdf资源</span>        <span class="hljs-section">location</span> /pdfjs &#123;             <span class="hljs-attribute">alias</span> /opt/www/static/pdfjs;        &#125;       <span class="hljs-comment"># location /pdfjs &#123;</span>       <span class="hljs-comment">#      alias /opt/www/SpringSeries;</span>       <span class="hljs-comment"># &#125;</span>    <span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span> &#123;        <span class="hljs-attribute">root</span> /opt/www/static;        <span class="hljs-attribute">expires</span>  <span class="hljs-number">30d</span>;    &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的价值观</title>
    <link href="/2022/07/03/%E6%88%91%E7%9A%84%E4%BB%B7%E5%80%BC%E8%A7%82/"/>
    <url>/2022/07/03/%E6%88%91%E7%9A%84%E4%BB%B7%E5%80%BC%E8%A7%82/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="我的价值观"><a href="#我的价值观" class="headerlink" title="我的价值观"></a>我的价值观</h1><h2 id="状态比计划更重要"><a href="#状态比计划更重要" class="headerlink" title="状态比计划更重要"></a>状态比计划更重要</h2><ol><li><p>每个人都是不同的，别人的不一定适合你</p><p>世界之所以这么复杂，就是因为每个人的性格、经理都是不同的。别人的方法是别人的方法，或许有一些可以借鉴的，你可以去尝试。</p><p>但当你尝试过后，觉得真的不合适。这时候不应该质疑自己，而是应该实事求是，继续寻找适合自己的路线。<code>实事求是</code>, 比什么都重要。</p></li><li><p>状态好了，计划不会完不成</p><p>如果你有好的状态，你会耐心地解决问题。</p><p>以轻松愉悦的心态去做事情，你会发现事情反而做得更好。关键是，你内心深处确实愿意接受失败的后果。</p><p>这背后，比的就是资源了。有些人是输不起的，所以这需要一些经济基础。</p><p>但很多人，其实他们的经济基础已经足够了，但他们还是不愿意打开自己的枷锁。 要知道这些枷锁，或许之前能够帮助他们拼命干活，但现在可能拖累他们。 </p><p>我把自身是否愉悦，放在比任何事情都重要的事情之上。</p><p>我是一个很注重状态的人，就像古代做些大事，要沐浴更衣，放空一样！不只是仪式，而是要达到某种状态。  </p></li></ol>]]></content>
    
    
    <categories>
      
      <category>mine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的阅读信息源</title>
    <link href="/2022/07/03/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E4%BF%A1%E6%81%AF%E6%BA%90/"/>
    <url>/2022/07/03/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E4%BF%A1%E6%81%AF%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="我的阅读信息源"><a href="#我的阅读信息源" class="headerlink" title="我的阅读信息源"></a>我的阅读信息源</h1><h2 id="认知科学类"><a href="#认知科学类" class="headerlink" title="认知科学类"></a>认知科学类</h2><ul><li><a href="https://www.modevol.com/">渐构多模态知识平台</a></li><li><a href="http://mindhacks.cn/">刘未鹏-思维改变生活</a></li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><blockquote><p>我们塑造了工具，尔后工具也在塑造我们</p></blockquote><h2 id="思想类"><a href="#思想类" class="headerlink" title="思想类"></a>思想类</h2><blockquote><p>流动的思想</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>mine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea live templates</title>
    <link href="/2022/04/12/idea-live-templates/"/>
    <url>/2022/04/12/idea-live-templates/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="IDEA-live-template"><a href="#IDEA-live-template" class="headerlink" title="IDEA live template"></a>IDEA live template</h1><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=65778&auto=1&height=66"></iframe></center><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>创建代码模板进行快速代码编写，如sout–&gt;System.out.println();</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><strong>1、定义模板</strong></p><img src="/2022/04/12/idea-live-templates/2022-04-12-09-38-30.png" class=""><p>Abbreviation：模板的缩略名称，如sout;</p><p>Template text：模板的代码片段，可以用自定义变量。</p><p><strong>2、自定义变量:</strong></p><p>这里我们自定义了CLASS变量（使用时需要前后都加上$）,但Idea并不识别，这就需要对自定义的变量进行编辑，Edit Variables。</p><img src="/2022/04/12/idea-live-templates/2022-04-12-09-39-50.png" class=""><p>Name:我们的自定义变量名称；</p><p>Expression:变量替换表达式，这里我们使用了Idea模板支持的内置函数className()表示类名，更多的内置函数参考：Creating and Editing Template Variables</p><p>Default value：表达式计算失败时的默认值。</p><p><strong>3、设置应用范围</strong></p><img src="/2022/04/12/idea-live-templates/2022-04-12-09-41-33.png" class=""><img src="/2022/04/12/idea-live-templates/2022-04-12-09-41-58.png" class=""><h2 id="内置模板"><a href="#内置模板" class="headerlink" title="内置模板"></a>内置模板</h2><ol><li><code>sbc</code></li></ol><p><strong>说明:</strong> sbc + 回车</p><ol start="2"><li>快速生成main方法</li></ol><p><code>main</code> + 回车<br><code>psvm</code> + 回车</p><ol start="3"><li>快速生成System.out.println</li></ol><p><code>sout</code> + 回车</p><ol start="4"><li>快速生成TODO注释</li></ol><p><code>todo</code> + 回车</p><ol start="5"><li>快速生成public static final</li></ol><p><code>psf</code> + 回车</p><ol start="6"><li>快速生成public static final String</li></ol><p><code>psfs</code> + 回车</p><p>同理: </p><p><code>psfi</code>: public static final int<br><code>prsf</code>: private static fianl </p><ol start="7"><li>快速生成获取单例方法</li></ol><p><code>geti</code> + 回车</p><ol start="8"><li>快速生成私有静态final字符串</li></ol><p>key + 回车 =&gt; 可以快速生成以KEY_为前缀的私有静态final字符串</p><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> KEY_光标所在位置= <span class="hljs-string">&quot;&quot;</span>;</code></pre><ol start="9"><li>快速生成私有final整型变量</li></ol><p><code>const</code> + 回车 =&gt; </p><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> 光标所在位置 = <span class="hljs-number">958</span>;</code></pre><ol start="10"><li>ctrl + j , 调出代码模板生成菜单.</li></ol><p><strong>其他:</strong></p><p><code>sb.main</code><br><code>sb.post</code><br><code>sb.get</code></p><h2 id="生成固定代码片段"><a href="#生成固定代码片段" class="headerlink" title="生成固定代码片段"></a>生成固定代码片段</h2><ol><li><p>选中要生成的代码片段</p></li><li><p>在菜单中选择Tools | Save as Live Template</p></li><li><p>填写触发单词（Abbreviation）</p></li><li><p>在代码中输入触发单词后按 Tab，可以重复生成代码片段。</p></li></ol><h2 id="常用模板"><a href="#常用模板" class="headerlink" title="常用模板"></a>常用模板</h2><p><strong>loggerDefineStatic</strong></p><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.<span class="hljs-title function_ invoke__">getLogger</span>(<span class="hljs-variable">$CLASS</span>_NAME$.<span class="hljs-keyword">class</span>);</code></pre><p>CLASS_NAME  className()</p><p><strong>loggerDefineThis</strong></p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> final Logger logger = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(<span class="hljs-params">this</span>.<span class="hljs-params">getClass</span>()</span>);</code></pre><p><strong>logStart</strong></p><pre><code class="hljs powershell">logger.info(<span class="hljs-string">&quot;op=start_<span class="hljs-variable">$METHOD_NAME</span><span class="hljs-variable">$</span>, <span class="hljs-variable">$PARAMS_FORMAT</span><span class="hljs-variable">$</span>&quot;</span>, <span class="hljs-variable">$PARAMS</span><span class="hljs-variable">$</span>);</code></pre><p>自定义变量:</p><table><thead><tr><th align="center">变量名</th><th align="center">取值</th></tr></thead><tbody><tr><td align="center">METHOD_NAME</td><td align="center">methodName()</td></tr><tr><td align="center">PARAMS_FORMAT</td><td align="center">groovyScript(“_1.collect{it+’={}’}.join(‘,’)”, methodParameters())</td></tr><tr><td align="center">PARAMS</td><td align="center">groovyScript(“_1.collect{it}.join(‘,’)”, methodParameters())</td></tr></tbody></table><p><strong>test</strong></p><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;    $END$&#125;</code></pre><h1 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live-Templates"></a>Live-Templates</h1><p>分享个人 IntelliJ idea Live Template 配置,希望可以帮助大家提高编程效率,如果你那也有一些好用的template欢迎添加.</p><p>对于Live Template 还熟悉的童鞋可以先查看<a href="http://blog.xiaohansong.com/2017/03/17/idea-live-templates/"><strong>本文</strong></a>.</p><h2 id="实体类相关"><a href="#实体类相关" class="headerlink" title="实体类相关"></a>实体类相关</h2><p>Abbreviation : pi</p><p>Description : private Integer</p><p>Template text:</p><pre><code class="hljs elixir">/** * <span class="hljs-variable">$var1</span><span class="hljs-variable">$</span><span class="hljs-variable"></span> */private <span class="hljs-title class_">Integer</span> <span class="hljs-variable">$end</span><span class="hljs-variable">$;</span></code></pre><hr><p>Abbreviation : pl</p><p>Description : private list</p><p>Template text:</p><pre><code class="hljs elixir">/** * <span class="hljs-variable">$var1</span><span class="hljs-variable">$</span><span class="hljs-variable"></span> */private <span class="hljs-title class_">List</span>&lt;<span class="hljs-variable">$var2</span><span class="hljs-variable">$&gt;</span> <span class="hljs-variable">$end</span><span class="hljs-variable">$;</span></code></pre><hr><p>Abbreviation : pm</p><p>Description : private map</p><p>Template text:</p><pre><code class="hljs elixir">/** * <span class="hljs-variable">$var1</span><span class="hljs-variable">$</span><span class="hljs-variable"></span> */private <span class="hljs-title class_">Map</span>&lt;<span class="hljs-variable">$var2</span><span class="hljs-variable">$,</span> <span class="hljs-variable">$var3</span><span class="hljs-variable">$&gt;</span> <span class="hljs-variable">$end</span><span class="hljs-variable">$;</span></code></pre><hr><p>Abbreviation : ps</p><p>Description : private String</p><p>Template text:</p><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><span class="hljs-comment"> * $var1$</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> $end$;</code></pre><hr><p>Abbreviation : pss</p><p>Description : private Set</p><p>Template text:</p><pre><code class="hljs powershell">/** * <span class="hljs-variable">$var1</span><span class="hljs-variable">$</span> */private <span class="hljs-built_in">Set</span>&lt;<span class="hljs-variable">$var2</span><span class="hljs-variable">$</span>&gt; <span class="hljs-variable">$end</span><span class="hljs-variable">$</span>;</code></pre><hr><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>Abbreviation : list</p><p>Description : list</p><p>作用域 : Java.Statement(其他的不用选)</p><p>Template text:</p><pre><code class="hljs arcade">List&lt;<span class="hljs-symbol">$var</span>1$&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</code></pre><hr><p>Abbreviation : map</p><p>Description : map</p><p>作用域 : Java.Statement(其他的不用选)</p><p>Template text:</p><pre><code class="hljs arcade"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-symbol">$var</span>1$, <span class="hljs-symbol">$var</span>2$&gt; <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</code></pre><hr><p>Abbreviation : set</p><p>Description : set</p><p>作用域 : Java.Statement(其他的不用选)</p><p>Template text:</p><pre><code class="hljs cos"><span class="hljs-keyword">Set</span>&lt;<span class="hljs-built_in">$var</span>1$&gt; <span class="hljs-keyword">set</span> = <span class="hljs-keyword">new</span> HashSet&lt;&gt;()<span class="hljs-comment">;</span></code></pre><h2 id="log相关"><a href="#log相关" class="headerlink" title="log相关"></a>log相关</h2><p>Abbreviation : param</p><p>Description : log info method params</p><p>Variables : </p><ul><li>end = methodName()</li><li>params = groovyScript(“‘&quot;‘ + _1.collect { it + ‘ = [&quot; + ‘ + it + ‘ + &quot;]’}.join(‘, ‘) + ‘&quot;‘“, methodParameters())</li></ul><p>Template text:</p><pre><code class="hljs powershell">log.info(<span class="hljs-string">&quot;<span class="hljs-variable">$end</span><span class="hljs-variable">$</span> :&quot;</span> + <span class="hljs-variable">$params</span><span class="hljs-variable">$</span>);</code></pre><img src="/2022/04/12/idea-live-templates/2022-04-12-10-04-28.png" class=""><hr><p><strong>Spring bean注入</strong></p><p>Abbreviation : apr</p><p>Description : spring bean inject </p><p>Variables : </p><p>Template text:</p><pre><code class="hljs crystal"><span class="hljs-variable">@Autowired</span><span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>1<span class="hljs-variable">$ </span><span class="hljs-variable">$var</span>2<span class="hljs-variable">$;</span></code></pre><hr><p><strong>Controller Rest Post</strong><br>Abbreviation : cpost</p><p>Description : Controller层Post请求模板代码 </p><p>Variables : </p><p>Template text:</p><pre><code class="hljs ruby"><span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;$var1$&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-title class_">Result</span>&lt;<span class="hljs-variable">$var</span>2<span class="hljs-variable">$&gt;</span> get<span class="hljs-variable">$var</span>3<span class="hljs-variable">$(</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-title class_">Result</span>.buildSuccess(<span class="hljs-variable">$var</span>4<span class="hljs-variable">$)</span>;&#125;</code></pre><hr><p><strong>lombok</strong><br>Abbreviation : lmk</p><p>Description : lombok模板代码</p><p>Variables : </p><p>Template text:</p><pre><code class="hljs less"><span class="hljs-variable">@Data</span><span class="hljs-variable">@AllArgsConstructor</span><span class="hljs-variable">@NoArgsConstructor</span><span class="hljs-variable">@Accessors</span>(chain = true)</code></pre><p><strong>CollectionUtils.isEmpty</strong><br>Abbreviation : cie</p><p>Description : 判断集合是否为空模板</p><p>Variables : </p><p>Template text:</p><pre><code class="hljs crystal"><span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(<span class="hljs-variable">$var</span>1<span class="hljs-variable">$)</span>) &#123;<span class="hljs-variable">$var</span>2<span class="hljs-variable">$</span><span class="hljs-variable"></span>&#125;</code></pre><p><strong>StringUtils.isNotBlank</strong><br>Abbreviation : sinotb</p><p>Description : 判断字符串是否不为空</p><p>Variables : </p><p>Template text:</p><pre><code class="hljs crystal"><span class="hljs-keyword">if</span> (StringUtils.isNotBlank(<span class="hljs-variable">$var</span>1<span class="hljs-variable">$)</span>) &#123;<span class="hljs-variable">$var</span>2<span class="hljs-variable">$</span><span class="hljs-variable"></span>&#125;</code></pre><p><strong>StringUtils.isBlank</strong><br>Abbreviation : sinotb</p><p>Description : 判断字符串是否为空</p><p>Variables : </p><p>Template text:</p><pre><code class="hljs crystal"><span class="hljs-keyword">if</span> (StringUtils.isBlank(<span class="hljs-variable">$var</span>1<span class="hljs-variable">$)</span>) &#123;<span class="hljs-variable">$var</span>2<span class="hljs-variable">$</span><span class="hljs-variable"></span>&#125;</code></pre><p><strong>javax bean inject</strong><br>Abbreviation : rpr</p><p>Description : @Resource方式注入</p><p>Variables : </p><p>Template text:</p><pre><code class="hljs crystal"><span class="hljs-variable">@Resource</span><span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>1<span class="hljs-variable">$ </span><span class="hljs-variable">$var</span>2<span class="hljs-variable">$;</span></code></pre><p>作用范围: Applicable in Java</p><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><pre><code class="hljs sh">filter</code></pre><p><img src="https://user-images.githubusercontent.com/5471228/52038427-3ad1c600-256d-11e9-88ad-0b32b75f8a26.gif" alt="filter"></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$ITERABLE_TYPE$.stream()<span class="hljs-symbol">&amp;#10;</span>    .filter($VAR$ -<span class="hljs-symbol">&amp;gt;</span> $VAR_CONDITION$)<span class="hljs-symbol">&amp;#10;</span>    .collect(Collectors.toList());&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Iterate Iterable | Array in J2SDK 5.0 syntax&quot;</span> <span class="hljs-attr">toReformat</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">toShortenFQNames</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ITERABLE_TYPE&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;iterableVariable()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;VAR&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;suggestVariableName()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;VAR_CONDITION&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;suggestVariableName()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JAVA_CODE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><pre><code class="hljs sh">fore</code></pre><p><img src="https://user-images.githubusercontent.com/5471228/52038810-04487b00-256e-11e9-9fa5-18c7647b6519.gif" alt="foreach"></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fore&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$ITERABLE_TYPE$.forEach($VAR$ -<span class="hljs-symbol">&amp;gt;</span> &#123;<span class="hljs-symbol">&amp;#10;</span>  $EACH_VAR$<span class="hljs-symbol">&amp;#10;</span>&#125;);&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Iterate Iterable | Array in J2SDK 5.0 syntax&quot;</span> <span class="hljs-attr">toReformat</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">toShortenFQNames</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ITERABLE_TYPE&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;iterableVariable()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;VAR&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;suggestVariableName()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;EACH_VAR&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;suggestVariableName()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JAVA_CODE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><pre><code class="hljs sh">map</code></pre><p><img src="https://user-images.githubusercontent.com/5471228/52038121-2e00a280-256c-11e9-9503-3b11b5e7a922.gif" alt="map"></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$ITERABLE_TYPE$.stream()<span class="hljs-symbol">&amp;#10;</span>    .map($VAR$ -<span class="hljs-symbol">&amp;gt;</span> $MAP_VAR$)<span class="hljs-symbol">&amp;#10;</span>    .collect(Collectors.toList());&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Iterate Iterable | Array in J2SDK 5.0 syntax&quot;</span> <span class="hljs-attr">toReformat</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">toShortenFQNames</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;VAR&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;suggestVariableName()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ITERABLE_TYPE&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;iterableVariable()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAP_VAR&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;suggestFirstVariableName()&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alwaysStopAt</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JAVA_CODE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h3 id="Where-and-how-to-conf"><a href="#Where-and-how-to-conf" class="headerlink" title="Where and how to conf"></a>Where and how to conf</h3><p>Copy the xml template above, go to the intellij live template editor, paste to whatever group you want to it to sit.</p><p><img src="https://user-images.githubusercontent.com/5471228/52039182-cdbf3000-256e-11e9-9455-953a90c2c652.png" alt="image"></p><p>未完待续… …</p><h2 id="巨人肩膀"><a href="#巨人肩膀" class="headerlink" title="巨人肩膀"></a>巨人肩膀</h2><ul><li><a href="https://www.cnblogs.com/cxxjohnson/p/8909420.html">Idea Live Templates代码模板</a></li><li><a href="https://www.jianshu.com/p/3974df6572af">idea中live template的详细使用教程</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工程效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA使用ideavim</title>
    <link href="/2022/03/30/IDEA%E4%BD%BF%E7%94%A8ideavim/"/>
    <url>/2022/03/30/IDEA%E4%BD%BF%E7%94%A8ideavim/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="IDEA使用ideaVim"><a href="#IDEA使用ideaVim" class="headerlink" title="IDEA使用ideaVim"></a>IDEA使用ideaVim</h1><p>笔记地址: <a href="https://note.youdao.com/web/#/file/recent/markdown/WEB2e6876d533bd4471866b3c31a87e46e7/?search=ideavim">https://note.youdao.com/web/#/file/recent/markdown/WEB2e6876d533bd4471866b3c31a87e46e7/?search=ideavim</a></p><p>文档配图以及更细致的说明，以后有空再补上:) Have a good day!</p><h2 id="Mac-OS-配置文件"><a href="#Mac-OS-配置文件" class="headerlink" title="Mac OS 配置文件"></a>Mac OS 配置文件</h2><p><strong>step 1:</strong> 进入用户目录, 例如: /Users/Admin/</p><p><strong>step 2:</strong> 创建配置文件.ideavimrc, 写入内容参见<code>附录: 配置文件内容</code> </p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~vi <span class="hljs-string">.ideavimrc</span></code></pre><h2 id="Windows-平台配置文件"><a href="#Windows-平台配置文件" class="headerlink" title="Windows 平台配置文件"></a>Windows 平台配置文件</h2><p><strong>step 1:</strong> 进入用户目录, 例如: C:\Users\Administrator</p><p><strong>step 2:</strong> 创建配置文件_ideavimrc, 写入配置内容, 具体内容参见 <code>附录: 配置文件内容</code></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>配置文件内容:</strong></p><pre><code class="hljs 1c">set sneakset keep-english-in-normal[-and-restore-in-insert]let mapleader=&#x27; &#x27;<span class="hljs-string">&quot; 启用vim surround功能</span>set surround<span class="hljs-string">&quot; 显示行号</span>set nu<span class="hljs-string">&quot; 显示相对行号</span>set rnu<span class="hljs-string">&quot; 高亮搜索</span>set hlsearch<span class="hljs-string">&quot; 自动定位到输入中的字符串，不需要回车搜索</span>set incsearchset ignorecaseset smartcase<span class="hljs-string">&quot; 显示当前的模式</span>set showmodeset number<span class="hljs-string">&quot; 相对当前行行数显示</span><span class="hljs-string">&quot; set relativenumber</span>set scrolloff=<span class="hljs-number">3</span>set history=<span class="hljs-number">100000</span><span class="hljs-string">&quot; 共享系统粘贴板</span>set clipboard=unnamed<span class="hljs-string">&quot; 开启输入法自动切换功能</span>set keep-english-in-normal<span class="hljs-string">&quot; 回到insert模式时恢复输入法</span>set keep-english-in-normal-and-restore-in-insert<span class="hljs-string">&quot; clear the highlighted search result</span><span class="hljs-string">&quot; (清除高亮)</span>nnoremap &lt;Leader&gt;sc :nohlsearch&lt;CR&gt;nnoremap &lt;Leader&gt;fs :w&lt;CR&gt;<span class="hljs-string">&quot; Quit normal mode</span><span class="hljs-string">&quot; (保存关闭)</span>nnoremap &lt;Leader&gt;q  :q&lt;CR&gt;nnoremap &lt;Leader&gt;Q  :qa!&lt;CR&gt;<span class="hljs-string">&quot; Move half page faster</span><span class="hljs-string">&quot; (上下翻页)</span>nnoremap &lt;Leader&gt;d  &lt;C-d&gt;nnoremap &lt;Leader&gt;u  &lt;C-u&gt;<span class="hljs-string">&quot; 左右翻页</span>nnoremap &lt;C-h&gt; zHnnoremap &lt;C-l&gt; zL<span class="hljs-string">&quot; 快速进入vim模式</span>inoremap jj &lt;Esc&gt;inoremap jk &lt;Esc&gt;inoremap kk &lt;Esc&gt;<span class="hljs-string">&quot; Quit visual mode</span>vnoremap v &lt;Esc&gt;<span class="hljs-string">&quot; Redo</span>nnoremap U &lt;C-r&gt;<span class="hljs-string">&quot; 以下是一些vim使用方法 -----------------</span><span class="hljs-string">&quot; viw  vaw  ciw caw diw daw vi&#x27; va&#x27; ci&#x27; ca&#x27; di&#x27; da&#x27; vi( va( ci( ca( di( da( ...</span><span class="hljs-string">&quot; ###### vim宏：normal模式下 qr 带表给r标记宏 然后vim操作。  @r 重复一次宏 10@r重复10次宏 注意（idea的提示功能干扰，可以在字符串里面先写好然后在复制黏贴）</span><span class="hljs-string">&quot; ###### 7.2 替换</span><span class="hljs-string">&quot;           :s/old/new - 用new替换当前行第一个old。</span><span class="hljs-string">&quot;           :s/old/new/g - 用new替换当前行所有的old。</span><span class="hljs-string">&quot;           :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。</span><span class="hljs-string">&quot;           :%s/old/new/g - 用new替换文件中所有的old。</span><span class="hljs-string">&quot;           :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。</span><span class="hljs-string">&quot;           :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。</span><span class="hljs-string">&quot;           有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。</span><span class="hljs-string">&quot;           有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，</span><span class="hljs-string">&quot;           法为 :[range]g/pattern/command</span><span class="hljs-string">&quot;           如 :%g/^ xyz/normal dd。</span><span class="hljs-string">&quot;           示对于以一个空格和xyz开头的行执行normal模式下的dd命令。</span><span class="hljs-string">&quot;           于range的规定为：</span><span class="hljs-string">&quot;           果不指定range，则表示当前行。</span><span class="hljs-string">&quot;           ,n: 从m行到n行。</span><span class="hljs-string">&quot;           : 最开始一行（可能是这样）。</span><span class="hljs-string">&quot;           $: 最后一行</span><span class="hljs-string">&quot;           .: 当前行</span><span class="hljs-string">&quot;           %: 所有行</span><span class="hljs-string">&quot; 以上是一些vim使用方法 -----------------</span><span class="hljs-string">&quot; 以下是自定义快捷键-----------------</span><span class="hljs-string">&quot; 复制单个单词到寄存器a并标记到o (使用快捷键 空格+y)</span><span class="hljs-string">&quot; 注释:（mo =&gt; 标记o）,(+yiw =&gt;复制当前单词到系统剪切板),(&quot;</span>a =&gt; 寄存器a) ,(<span class="hljs-string">&quot;ayiw =&gt; 复制当前单词到寄存器a)</span>nnoremap &lt;Leader&gt;y mo<span class="hljs-string">&quot;+yiw&quot;</span>ayiw<span class="hljs-string">&quot; 剪切单个单词到寄存器a并标记到o (使用快捷键 空格+x)</span><span class="hljs-string">&quot; 注释:（mo =&gt; 标记o[标记为的是使用&#x27;&#x27;来回跳标记]）,(+yiw =&gt;复制当前单词到系统剪切板),(&quot;</span>a =&gt; 寄存器a) ,(<span class="hljs-string">&quot;ayiw =&gt; 复制当前单词到寄存器a),(diw =&gt;删除当前单词)</span>nnoremap &lt;Leader&gt;x mo<span class="hljs-string">&quot;+yiw&quot;</span>ayiwdiw<span class="hljs-string">&quot; 删除单个字符串并黏贴寄存器a的内容并来回标记o和p  (使用快捷键 空格+v)</span><span class="hljs-string">&quot; 注释：（mp =&gt; 标记p）,(viw =&gt; 选中当前单词),（&quot;</span>a =&gt; 寄存器a）,(p =&gt; 将寄存器a内容黏贴到选中的单词),（&#x27;o =&gt; 跳回标记o）,(&#x27;p =&gt;跳回标记p[标记为的是使用&#x27;&#x27;来回跳标记])nnoremap &lt;Leader&gt;v mpviw<span class="hljs-string">&quot;ap&#x27;o&#x27;p</span><span class="hljs-string">&quot; idea内置快捷键alt+F1 (使用快捷键 空格+m)</span>nnoremap &lt;Leader&gt;m :action SelectIn&lt;CR&gt;<span class="hljs-string">&quot; idea内置快捷键control+E (使用快捷键 空格+e)</span>nnoremap &lt;Leader&gt;e :action RecentFiles&lt;CR&gt;<span class="hljs-string">&quot;生成get set方法  (使用快捷键 空格+cc)</span>nnoremap &lt;Leader&gt;cc :action Generate&lt;CR&gt;<span class="hljs-string">&quot; shift+h--zz(向上翻页)(使用快捷键 空格+h)</span>nnoremap &lt;Leader&gt;h &lt;S-h&gt;zz<span class="hljs-string">&quot; shift+l--zz(向下翻页)(使用快捷键 空格+l)</span>nnoremap &lt;Leader&gt;l &lt;S-l&gt;zz<span class="hljs-string">&quot; 以上是自定义快捷键-----------------</span><span class="hljs-string">&quot; quit ==&gt; close current window</span>nnoremap &lt;Leader&gt;q &lt;C-W&gt;w<span class="hljs-string">&quot; Window operation</span><span class="hljs-string">&quot; (关于窗口操作)</span>nnoremap &lt;Leader&gt;ww &lt;C-W&gt;wnnoremap &lt;Leader&gt;wd &lt;C-W&gt;cnnoremap &lt;Leader&gt;wj &lt;C-W&gt;jnnoremap &lt;Leader&gt;wk &lt;C-W&gt;knnoremap &lt;Leader&gt;wh &lt;C-W&gt;hnnoremap &lt;Leader&gt;wl &lt;C-W&gt;lnnoremap &lt;Leader&gt;ws &lt;C-W&gt;snnoremap &lt;Leader&gt;w- &lt;C-W&gt;snnoremap &lt;Leader&gt;wv &lt;C-W&gt;vnnoremap &lt;Leader&gt;w\<span class="hljs-string">| &lt;C-W&gt;v</span><span class="hljs-string">&quot; Tab operation</span><span class="hljs-string">&quot; (切换标签)</span>nnoremap tn gtnnoremap tp gT<span class="hljs-string">&quot; ==================================================</span><span class="hljs-string">&quot; Show all the provided actions via `:actionlist`</span><span class="hljs-string">&quot; ==================================================</span><span class="hljs-string">&quot; project search</span><span class="hljs-string">&quot;相当于IDEA的两次shift按钮</span>nnoremap &lt;Leader&gt;se :action SearchEverywhere&lt;CR&gt;<span class="hljs-string">&quot;查找用法</span>nnoremap &lt;Leader&gt;fu :action FindUsages&lt;CR&gt;<span class="hljs-string">&quot;打断点</span>nnoremap &lt;Leader&gt;bb :action ToggleLineBreakpoint&lt;CR&gt;<span class="hljs-string">&quot;查看所有断点</span>nnoremap &lt;Leader&gt;br :action ViewBreakpoints&lt;CR&gt;<span class="hljs-string">&quot;DUG启动</span>nnoremap &lt;Leader&gt;cd :action ChooseDebugConfiguration&lt;CR&gt;<span class="hljs-string">&quot;跳转到Action</span>nnoremap &lt;Leader&gt;ga :action GotoAction&lt;CR&gt;<span class="hljs-string">&quot;跳转到实体类</span>nnoremap &lt;Leader&gt;gc :action GotoClass&lt;CR&gt;<span class="hljs-string">&quot;跳转到声明</span>nnoremap &lt;Leader&gt;gd :action GotoDeclaration&lt;CR&gt;<span class="hljs-string">&quot;跳转到文件</span>nnoremap &lt;Leader&gt;gf :action GotoFile&lt;CR&gt;<span class="hljs-string">&quot;跳转到实现类</span>nnoremap &lt;Leader&gt;gi :action GotoImplementation&lt;CR&gt;<span class="hljs-string">&quot;跳转到测试类(没有则自动建立)</span>nnoremap &lt;Leader&gt;gt :action GotoTest&lt;CR&gt;<span class="hljs-string">&quot;显示当前文件路径</span>nnoremap &lt;Leader&gt;fp :action ShowFilePath&lt;CR&gt;<span class="hljs-string">&quot;激活maven窗口</span><span class="hljs-string">&quot;nnoremap &lt;Leader&gt;mv :action ActivateMavenProjectsToolWindow&lt;CR&gt;</span><span class="hljs-string">&quot;修改所有的关联名字</span>nnoremap &lt;Leader&gt;re :action RenameElement&lt;CR&gt;<span class="hljs-string">&quot;修改当前文件的文件名</span>nnoremap &lt;Leader&gt;rf :action RenameFile&lt;CR&gt;<span class="hljs-string">&quot;显示用法</span>nnoremap &lt;Leader&gt;su :action ShowUsages&lt;CR&gt;<span class="hljs-string">&quot;关闭活动显示板</span>nnoremap &lt;Leader&gt;tc :action CloseActiveTab&lt;CR&gt;<span class="hljs-string">&quot; ================================================================================================</span><span class="hljs-string">&quot; 👻👻👻 Which-Key 👻👻👻</span><span class="hljs-string">&quot; ================================================================================================</span> set which-key set notimeout<span class="hljs-string">&quot; i: Insert ⭐️</span><span class="hljs-string">&quot;let g:WhichKeyDesc_InsertAfterBrackets = &quot;</span>&lt;leader&gt;i InsertAfterBrackets<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;nnoremap &lt;Leader&gt;i f(a</span><span class="hljs-string">&quot; 删除括号内的内容并进入编辑模式</span>nnoremap &lt;Leader&gt;ci( f(lci(<span class="hljs-string">&quot;以下是不常用</span><span class="hljs-string">&quot;打开命令管理器</span>nnoremap &lt;Leader&gt;tl Vy&lt;CR&gt;:action ActivateTerminalToolWindow&lt;CR&gt;vnoremap &lt;Leader&gt;tl y&lt;CR&gt;:action ActivateTerminalToolWindow&lt;CR&gt;<span class="hljs-string">&quot; built in search looks better</span><span class="hljs-string">&quot; (查找字符串)</span>nnoremap / :action Find&lt;CR&gt;<span class="hljs-string">&quot; but preserve ideavim search</span><span class="hljs-string">&quot; (vim自带的搜索)</span>nnoremap &lt;Leader&gt;/ /<span class="hljs-string">&quot;添加注释</span>nnoremap &lt;Leader&gt;;; :action CommentByLineComment&lt;CR&gt;<span class="hljs-string">&quot;改变视图 zen模式等</span>nnoremap &lt;Leader&gt;cv :action ChangeView&lt;CR&gt;<span class="hljs-string">&quot;跳转到标致</span>nnoremap &lt;Leader&gt;gs :action GotoSymbol&lt;CR&gt;<span class="hljs-string">&quot;</span>nnoremap &lt;Leader&gt;ic :action InspectCode&lt;CR&gt;<span class="hljs-string">&quot; 优化导入</span>nnoremap &lt;Leader&gt;oi :action OptimizeImports&lt;CR&gt;<span class="hljs-string">&quot; 显示悬浮菜单</span>nnoremap &lt;Leader&gt;pm :action ShowPopupMenu&lt;CR&gt;<span class="hljs-string">&quot; 显示所有的书签.   idea原生命令: 添加书签 ctrl+shift+1,2,3,4....</span><span class="hljs-string">&quot; 跳转到书签处 ctrl+1,2,3,4,5,6....</span>nnoremap &lt;Leader&gt;sb :action ShowBookmarks<span class="hljs-string">&quot; 显示类文件结构  eclipse 快捷键为: ctrl+O</span>nnoremap &lt;Leader&gt;ss :action FileStructurePopup<span class="hljs-string">&quot; 重构相关</span><span class="hljs-string">&quot; i: Introduce</span><span class="hljs-string">&quot; extract method/function</span>vmap &lt;leader&gt;im &lt;action&gt;(ExtractMethod)<span class="hljs-string">&quot; extract constant</span>vmap &lt;leader&gt;ic &lt;action&gt;(IntroduceConstant)<span class="hljs-string">&quot; extract field</span>vmap &lt;leader&gt;if &lt;action&gt;(IntroduceField)<span class="hljs-string">&quot; extract variable.   idea快捷键: shift+alt+l  idea补全:  .var</span>vmap &lt;leader&gt;iv &lt;action&gt;(IntroduceVariable)<span class="hljs-string">&quot;正常启动工程</span>nnoremap &lt;Leader&gt;rc :action ChooseRunConfiguration&lt;CR&gt;set clipboard+=ideaput</code></pre>]]></content>
    
    
    <categories>
      
      <category>挖坑待填</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>挖坑待填</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5.x源码编译</title>
    <link href="/2022/03/14/Spring5-x%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <url>/2022/03/14/Spring5-x%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring5-x源码编译"><a href="#Spring5-x源码编译" class="headerlink" title="Spring5.x源码编译"></a>Spring5.x源码编译</h1><h2 id="编译源码地址"><a href="#编译源码地址" class="headerlink" title="编译源码地址"></a>编译源码地址</h2><p><a href="https://gitee.com/dantefung/spring-framework-v5.git">https://gitee.com/dantefung/spring-framework-v5.git</a></p><blockquote><p>先挖个坑!以后再填上！源码已编译成功!</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvm知识总结2022</title>
    <link href="/2022/02/25/jvm%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932022/"/>
    <url>/2022/02/25/jvm%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932022/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JVM知识总结"><a href="#JVM知识总结" class="headerlink" title="JVM知识总结"></a>JVM知识总结</h1><p>面试题: <a href="https://www.cnblogs.com/crazymakercircle/p/14365820.html">https://www.cnblogs.com/crazymakercircle/p/14365820.html</a></p><img src="/2022/02/25/jvm%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932022/jvm_knowledge.png" class="">]]></content>
    
    
    <categories>
      
      <category>知识总结</category>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>知识总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装NVM</title>
    <link href="/2022/02/19/ubuntu%20%E5%AE%89%E8%A3%85%20NVM/"/>
    <url>/2022/02/19/ubuntu%20%E5%AE%89%E8%A3%85%20NVM/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ubuntu安装NVM"><a href="#ubuntu安装NVM" class="headerlink" title="ubuntu安装NVM"></a>ubuntu安装NVM</h1><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.jianshu.com/p/8c3e782c7be1">www.jianshu.com</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载安装脚本，可以使用 cURL 或 Wget，最新版本可以到 github 查看 <a href="https://links.jianshu.com/go?to=https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><pre><code class="hljs awk">curl -o- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/nvm-sh/</span>nvm<span class="hljs-regexp">/v0.37.2/i</span>nstall.sh | bash</code></pre><p>在安装的时候 或许会出现错误:# <a href="https://links.jianshu.com/go?to=https://segmentfault.com/a/1190000021637275">Failed to connect to raw.githubusercontent.com port 443</a></p><p>解决方案:</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>由于某些<code>你懂的因素</code>，导致 GitHub 的<code>raw.githubusercontent.com</code>域名解析被污染了。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>通过修改<code>hosts</code>解决此问题。</p><p><strong>查询真实 IP</strong></p><p>在 <a href="https://links.jianshu.com/go?to=https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查询 raw.githubusercontent.com 的真实 IP。</p><p><strong>修改 hosts</strong></p><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>hosts</code></pre><p>添加如下内容：</p><pre><code class="hljs accesslog"><span class="hljs-number">199.232.96.133</span> raw.githubusercontent.com</code></pre></article><p>提示: vim 中 :wq! 为强制保存退出</p><p>查看是否已经安装好</p><pre><code class="hljs ada">nvm <span class="hljs-comment">--version</span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>查看可供安装的版本</p><pre><code class="hljs ebnf"><span class="hljs-attribute">nvm ls-remote</span></code></pre><p>安装一个 nodejs 版本</p><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install v12.<span class="hljs-number">16</span>.<span class="hljs-number">1</span></code></pre><p>查看本地安装的版本</p><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下安装nvm</title>
    <link href="/2021/08/07/windows%E4%B8%8B%E5%AE%89%E8%A3%85nvm/"/>
    <url>/2021/08/07/windows%E4%B8%8B%E5%AE%89%E8%A3%85nvm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20.4下使用clash</title>
    <link href="/2021/08/05/ubuntu20-4%E4%B8%8B%E4%BD%BF%E7%94%A8clash/"/>
    <url>/2021/08/05/ubuntu20-4%E4%B8%8B%E4%BD%BF%E7%94%A8clash/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ubuntu20-4下使用clash"><a href="#ubuntu20-4下使用clash" class="headerlink" title="ubuntu20.4下使用clash"></a>ubuntu20.4下使用clash</h1><h2 id="下载clash"><a href="#下载clash" class="headerlink" title="下载clash"></a>下载clash</h2><p><code>github 地址</code>：<a href="https://github.com/Dreamacro/clash">https://github.com/Dreamacro/clash</a></p><p><code>下载最新版本 clash</code>：<a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p><p>或者通过curl下载:</p><pre><code class="hljs awk">culr -o clash.gz https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Dreamacro/</span>clash<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.6.5/</span>clash-linux-amd64-v1.<span class="hljs-number">6.5</span>.gz</code></pre><p>解压:</p><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> zxvf  clash-linux-amd64-v1.<span class="hljs-number">6</span>.<span class="hljs-number">5</span>.gz</code></pre><p>授权可执行权限:</p><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x clash</code></pre><p>初始化clash:</p><pre><code class="hljs bash">./clash</code></pre><blockquote><p>初始化执行 clash 会默认在 ~/.config/clash/ 目录下生成配置文件和全球IP地址库：config.yaml 和 Country.mmdb</p></blockquote><h2 id="配置clash"><a href="#配置clash" class="headerlink" title="配置clash"></a>配置clash</h2><p>clash 使用 yaml 作为配置文件，配置文件示例可以参考：<a href="https://github.com/Dreamacro/clash/wiki/configuration">https://github.com/Dreamacro/clash/wiki/configuration</a></p><p>默认的 clash 配置只有一个端口号，一般服务商会提供完整的配置文件（或者 URL），如果 URL 直接是配置内容，可以直接将配置文件内容复制到文件中</p><p>我的服务商提供的是无法直接应用的内容，因此还是从 windows 上的 clash 将配置内容导出来然后再复制到配置的。</p><p>再次执行 clash，可以发现执行成功（可以作为守护进程一直执行）</p><pre><code class="hljs bash">./clash</code></pre><blockquote><p>笔者就是通过windows平台的clash配置文件导出，然后覆盖linux平台下~/.config/clash/config.yml文件.</p></blockquote><h2 id="配置clash终端别名"><a href="#配置clash终端别名" class="headerlink" title="配置clash终端别名"></a>配置clash终端别名</h2><p>笔者.bashrc文件下加入了clash别名，方便每次开启clash代理:</p><pre><code class="hljs abnf">alias clash<span class="hljs-operator">=</span><span class="hljs-string">&quot;~/Documents/software/clash&quot;</span><span class="hljs-comment">;</span></code></pre><p>最后让~/.bashrc文件生效:</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h2 id="配置ubuntu的网络代理"><a href="#配置ubuntu的网络代理" class="headerlink" title="配置ubuntu的网络代理"></a>配置ubuntu的网络代理</h2><img src="/2021/08/05/ubuntu20-4%E4%B8%8B%E4%BD%BF%E7%94%A8clash/2021-08-07-11-29-10.png" class=""><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://www.ptbird.cn/ubuntu-2004-clash-for-linux.html">ubuntu 20.04 配置使用 clash for linux</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea设置关闭ideavim模式快捷键</title>
    <link href="/2021/08/01/idea%E8%AE%BE%E7%BD%AE%E5%85%B3%E9%97%ADideavim%E6%A8%A1%E5%BC%8F%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/08/01/idea%E8%AE%BE%E7%BD%AE%E5%85%B3%E9%97%ADideavim%E6%A8%A1%E5%BC%8F%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="idea设置关闭ideavim模式快捷键"><a href="#idea设置关闭ideavim模式快捷键" class="headerlink" title="idea设置关闭ideavim模式快捷键"></a>idea设置关闭ideavim模式快捷键</h1><img src="/2021/08/01/idea%E8%AE%BE%E7%BD%AE%E5%85%B3%E9%97%ADideavim%E6%A8%A1%E5%BC%8F%E5%BF%AB%E6%8D%B7%E9%94%AE/2021-08-01-18-58-01.png" class="">]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发工序管理</title>
    <link href="/2021/07/16/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%BA%8F%E7%AE%A1%E7%90%86/"/>
    <url>/2021/07/16/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%BA%8F%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="开发工序管理"><a href="#开发工序管理" class="headerlink" title="开发工序管理"></a>开发工序管理</h1><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://jtong.dev/2020/07/20/something-about-software-development/developing-process-management/">jtong.dev</a></p></blockquote><blockquote><p>什么是开发工序管理所谓的开发工序管理，就是把开发人员的工作步骤管理起来，以期其产出的代码达成组织期望的代码质量。</p></blockquote><h2 id="什么是开发工序管理"><a href="#什么是开发工序管理" class="headerlink" title="什么是开发工序管理"></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%BA%8F%E7%AE%A1%E7%90%86" title="什么是开发工序管理"></a>什么是开发工序管理</h2><p>所谓的开发工序管理，就是把开发人员的工作步骤管理起来，以期其产出的代码达成组织期望的代码质量。</p><h2 id="为什么需要工序管理"><a href="#为什么需要工序管理" class="headerlink" title="为什么需要工序管理"></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%B7%A5%E5%BA%8F%E7%AE%A1%E7%90%86" title="为什么需要工序管理"></a>为什么需要工序管理</h2><p>DevOps 的理想和现实面前，有一个开发工序管理的鸿沟。<br>很多组织落地 DevOps 时，只把工具链、平台都搭好了，但并没有项目在这个平台上按照 DevOps 期望的节奏运转，也就是不能快速发布，价值并不能持续的流动，基本上都是卡壳的。<br>这是由于开发人员不能生产出可以快速回归的软件，自然不能快速发布，就算是快速发布了，也是可能有质量问题隐藏在其中。</p><p>这个问题持续不能解决的原因是因为开发人员缺乏开发者自测试的能力，需要规模化写测试的能力，否则我们无法形成可快速回归验证的软件。如果不能规模化写测试的能力的话，DevOps 的落地最后就是开着敞篷跑车上太空，就算你飞上过去一次，也不应该有第二次。</p><p>规模化之前，我们先看一个胜任的个体是什么样，我们横向比较一个开发者自测试能力强的和一个这方面弱的程序员的工作就会发现他们的工作步骤完全不同。</p><p>强的开发人员能够按照架构设计把需求分解为可测试步骤组成的工序，并能按照工序高效得写出有测试保护的代码。弱的人则只能拆解为写代码的步骤，至于能不能测试，就不再考虑范围之内了。尽管他们后续的工作时间都差不多，但是产出的代码一个有测试，一个没有，而且也很难加。</p><p>而在我们过去的过程改进经验中，能够按照架构设计把需求分解为可测试步骤这件事，并不容易，需要特定的胜任力——分析型思考和少量的概念性思考，而这两者在软件开发人员当中是很稀缺的。于是导致前一种工序很难被推广开来，而不解决这个问题，我们产出的软件始终是一个难以快速回归的软件，所以我们需要工序管理，可以帮助我们规范开发人员的行为，规模化的使开发人员可以高效的产出有测试保护的代码。</p><h2 id="怎么做工序管理"><a href="#怎么做工序管理" class="headerlink" title="怎么做工序管理"></a><a href="#%E6%80%8E%E4%B9%88%E5%81%9A%E5%B7%A5%E5%BA%8F%E7%AE%A1%E7%90%86" title="怎么做工序管理"></a>怎么做工序管理</h2><p>在讲解怎么做工序管理之前，首先要讲一个概念：杠杆率。</p><p>杠杆率就是我们认为胜任的高级人员（后面称之为 Sr.) 和不完全胜任的初级人员（后面称之为 Jr.）之间的比率，比如一个 Sr. 带着 5 个 Jr. 杠杆率就是 5，称之为杠杆率高，反之，如果 2 个 Sr. 带 1 个 Jr. 杠杆率是 0.5，称之为杠杆率低。</p><p>那么介绍这个概念的目的自然是，在杠杆率不同的情况下，工序管理的手段是不同的。</p><p>如果杠杆率比较低，也就是初级人员是宝贝，高级人员团队里到处都是，那么就不用费劲了，给初级人员设置个导师，一个不过瘾还可以多设置几个。一副江南七怪教郭靖的架势（这个比喻应该还不算过时吧……），一群老师盯着你输出的代码耳提面命，我就不信你学不会。<br>这也是为什么早期的工程实践方法论里，较少提到这个概念的原因，因为在当时的西方社会里，低杠杆率是普遍现象。</p><p>然而在中国，这个现象则完全不成立。我们这个行业以 25% 的增长率暴增了这么多年，现在的情况是，不但杠杆率高，而且 Sr 也未必胜任。这个时候我们就需要针对目前的现象进行更适合中国特色的工序管理。</p><p>首先我们要聊一聊架构，因为架构是指导如何进行工序分解的，对于我们怎么做日常编码工作是有强烈的指导意义的。如果架构本身就不是容易测试的，那么对应的工序也就很难形成，或者其中某些步骤的测试成本过高。由于我们这个行业发展过快，我不确定我们现在的架构师们，是否在这件事上是普遍胜任的，从现状来看，普遍不胜任可能更接近事实。可能工序管理的第一步还是先帮助架构师搞出可测试性比较高的架构才行，起码别跑个测试还要上硬件或者部署到 UAT 环境，那就不太合适了。</p><p>接着，我们需要给我们的 Sr 人员进行培训，让他们的可以做到 “按照架构设计把需求分解为可测试步骤组成的工序，并能按照工序高效得写出有测试保护的代码”。然后由初级的人员，按照工序编写代码。</p><p>接着，就是工时管理，我们拆分出的每个任务，都应该在一个固定的时间内完成，如果没有在固定的时间内完成，我们则视为是一个事故，需要针对该事故做分析并提出改进计划。通常就可以发现要么是工序拆解的有问题，要么是初级人员的能力有问题，都可以针对性的进行能力建设。</p><h2 id="落地的细节"><a href="#落地的细节" class="headerlink" title="落地的细节"></a><a href="#%E8%90%BD%E5%9C%B0%E7%9A%84%E7%BB%86%E8%8A%82" title="落地的细节"></a>落地的细节</h2><h3 id="架构师是否拆解工序"><a href="#架构师是否拆解工序" class="headerlink" title="架构师是否拆解工序"></a><a href="#%E6%9E%B6%E6%9E%84%E5%B8%88%E6%98%AF%E5%90%A6%E6%8B%86%E8%A7%A3%E5%B7%A5%E5%BA%8F" title="架构师是否拆解工序"></a>架构师是否拆解工序</h3><p>架构师首先应该学会这件事，毕竟他要能解决工序如何拆分的问题。所以还要打个样，看看工序怎么拆分，是不是可以拆为生产可测试代码的工序。然后他自己也要写一下代码，看看工序映射为代码的过程是否会遇到障碍，有时候自己写一下会发现之前很多关键细节没有想清楚，这对于架构师也是有好处的。</p><h3 id="Sr-首先自己要胜任"><a href="#Sr-首先自己要胜任" class="headerlink" title="Sr 首先自己要胜任"></a><a href="#Sr%E9%A6%96%E5%85%88%E8%87%AA%E5%B7%B1%E8%A6%81%E8%83%9C%E4%BB%BB" title="Sr首先自己要胜任"></a>Sr 首先自己要胜任</h3><p>这点其实也不是很常见的一件事，毕竟不胜任在我们这个行业太普遍了。Sr 首先自己要能拆出来可以测试的步骤，而这一点其实并不容易。首先是对于很多人来说，能够分解为可测试的每一步就已经很挑战了，而当把这些步骤映射为代码时候，我们会发现更多的人根本不能按照自己所划分的任务进行正确的映射。写代码的步骤可能和划分的步骤完全对不上，更不要说每一步都可测试了。这里是能力建设的一个关键点。</p><h3 id="优化无止境"><a href="#优化无止境" class="headerlink" title="优化无止境"></a><a href="#%E4%BC%98%E5%8C%96%E6%97%A0%E6%AD%A2%E5%A2%83" title="优化无止境"></a>优化无止境</h3><p>通过对工序的完成时间进行追踪，我们不但可以得到高效的个人，还可以发现效率的瓶颈，进一步的改进工序，比如开发一些工具。</p><h3 id="工序管理是否复辟了软件蓝领的概念"><a href="#工序管理是否复辟了软件蓝领的概念" class="headerlink" title="工序管理是否复辟了软件蓝领的概念"></a><a href="#%E5%B7%A5%E5%BA%8F%E7%AE%A1%E7%90%86%E6%98%AF%E5%90%A6%E5%A4%8D%E8%BE%9F%E4%BA%86%E8%BD%AF%E4%BB%B6%E8%93%9D%E9%A2%86%E7%9A%84%E6%A6%82%E5%BF%B5" title="工序管理是否复辟了软件蓝领的概念"></a>工序管理是否复辟了软件蓝领的概念</h3><p>先说结论，并不是。因为软件蓝领是只写代码，把程序员压缩在编码在一个小环节里面，不端到端考虑问题，不管需求，不考虑怎么测试。<br>而工序管理只是压缩在了一个更小的问题域里，但是这个问题仍然是需要理解、需要思考、需要测试的。<br>我们要承认普通开发人员可能在当前阶段的认知水平不高，所以我们的工序管理是一个生手和熟手配合的工作方式，是追求一种更大杠杆率的生手和熟手配合的场景。<br>通过高级别人的人一种更高效的传帮带的方式教会普通开发在当前业务下、当前架构下进行工序分解的能力。当生手的认知能力变得提高之后，他可以自然的去解决更大的问题，而不是把开发人员从高级工作中隔离出来，异化为一个可以随时被替换的螺丝钉。</p><p>比起软件白领与软件蓝领的关系，高级开发人员和初级开发人员更像师傅带徒弟的关系或者是教练和运动员的关系。</p>]]></content>
    
    
    <categories>
      
      <category>思考的思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑是怎样练成的</title>
    <link href="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/"/>
    <url>/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="逻辑是怎样练成的"><a href="#逻辑是怎样练成的" class="headerlink" title="逻辑是怎样练成的"></a>逻辑是怎样练成的</h1><p><strong>01 故事起源</strong></p><p>假设现在有下面三个问题，你觉得它们有没有什么共同点？</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-21-58.png" class=""><p>我猜你应该觉得没有共同点，甚至是毫无关联，没关系，我们接着往下看。</p><p><strong>02 抽象逻辑</strong></p><p>到底什么是抽象，什么是逻辑？</p><p><strong>2.1 抽象</strong></p><p>先看一下这个图，你觉得是什么？</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-15-25.png" class=""><p>如果这样，它像不像一条狗呢？</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-15-39.png" class=""><p>抽象就是找出本质的共同特征，把一个东西想像成另一个东西。上面的过程就是抽象的过程。</p><p><strong>2.2 逻辑</strong></p><p>那如果我问你上面的这个线条是怎么画出来的呢？</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-15-52.png" class=""><p>其实这就是由3个一笔画的线条拼起来的。<br>逻辑其实是一种规律或者规则，可以是自己定义的，只要它符合定义的边界划分。上面用不同的线条，把一个整体拆分成小的部分，这就是一种逻辑。</p><p><strong>2.3 作用</strong></p><p>抽象能力用于问题建模，逻辑能力用于推理。这些能力强的人，可以看到其他人看不到的一些信息，说它是一种超能力也不为过。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-17-32.png" class=""><p><strong>03 回到开局的问题</strong></p><p>那之前的3个问题有没有共同点呢？或者说能不能找出一种特征，抽象成一个统一的模型？</p><p>假设我们建造了一个万能机器，它可以解决所有的问题，只要输入一些相关的信息，就可以得到想要的结果。那么建造机器的过程就是抽象建模的过程。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-17-55.png" class=""><p>那怎么让它运转呢，当然它不是烧油的，是烧脑的，所以就要用逻辑能力来驱动它正常运转。</p><p>其实所有的问题都可以应用这种统一的模型。<br>聪明的同学应该已经发现了，这在数学中其实就是一个函数，建模也就是找出这个函数。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-18-07.png" class=""><p>到这里，我想你肯定会问，那怎么建模呢，问题各种各样，怎么才能建造出能解决对应问题的模型？</p><p><strong>划重点：</strong><br>其实小K在思考问题时，一般都不是直接从建模的地方下手。机器有可能很复杂无法快速构建，如果你见过类似的当然可以直接套用，对于陌生的问题，在所有人看来都是一个黑盒，并不清楚内部的结构。<br>所以更多时候都是从已知的信息开始，一步一步的推出内部结构。</p><p>那要怎么推呢？<br>首先要了解如何解读已知信息。这就要提到生物中常用的<strong>对照实验法</strong>，以及物理中常用的<strong>控制变量法</strong>，欲知详情，且听我慢慢分解。</p><p><strong>04对照实验法</strong></p><p>比如想研究影响小树苗成长的因素有哪些？<br>光照应该对于小树苗成长有影响，那就进行两组对照实验，一组有光照，一组无光照，经过一段时间观察不同组小树苗的成长情况。<br>如果生长情况相同，就说明光照没有影响，如果不同就说明光照有影响。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-18-30.png" class=""><p>影响小树苗成长的因素有可能不只光照，也许还有其它的因素，比如水分。<br>这时的对照实验，就要先保证两组有相同的光照，然后一组水分充足，一组水分不足。经过一段时间观察不同组小树苗的成长情况。<br>如果生长情况相同，就说明水分没有影响，如果不同就说明水分有影响。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-19-01.png" class=""><p>需要注意的就是，如果有多个影响因素，要保证除研究的因素外，其它的条件都相同，否则无法确定不同结果是哪个因素导致的。</p><p>那这个思想对于我们的逻辑有什么用呢？<br>每个问题都会有多个已知条件，到底哪些才是真正能够影响问题的，就可以通过类似的方法进行思想实验。比如更改一些条件，看会不会引起问题的本质变化，这样可以帮助我们梳理出关键信息，屏蔽其它的干扰信息，从而减小分析的难度。</p><p><strong>05 控制变量法</strong></p><p>上面的方法是研究不同的因素对于问题的影响，接着就要研究同一个因素，不同量对于问题的影响，这在物理中经常运用。<br>假设要研究电流与电压之间的关系，可以先固定电阻不变，然后增大或者减小电压，观察电流的变化。发现电流与电压的变化成正比，如此就可以推断出电流与电压之间的关系。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-19-57.png" class="">)<p>那这个思想对于我们的逻辑又有什么用呢？<br>回看上面提到的统一模型中的万能机器，机器内部是一个黑盒，推断内部结构时，就可以通过改变外部的条件，观察输入与输出之间的变化。多尝试改变几次就可以大概感觉出之间的关系了，当然这里更多的也是进行思想实验。</p><p><strong>06 总结</strong></p><p>整个问题建模的过程其实并不是一步到位，都是通过已知信息先得到一个初步的结论，然后再通过上一局的结论进而推出下一步的结论，再经过多次分析推断才能最终得到想要的结果。<br>人的大脑在识别信息时也是一层一层的分析，现在的神经网络算法就是参考人的大脑的分析过程。</p><img src="/2021/07/16/%E9%80%BB%E8%BE%91%E6%98%AF%E6%80%8E%E6%A0%B7%E7%BB%83%E6%88%90%E7%9A%84/2021-07-16-16-20-34.png" class=""><p>上面介绍的几种不同的思维方式主要是帮助大家思考，遇到问题时可以尝试不同的角度去分析，但具体的问题还是要具体分析，没有统一的模型可以直接套用。</p><p>本文原创作者：小K，一个思维独特的写手。<br>文章首发平台：微信公众号【小K算法】。</p><p>如果喜欢小K的文章，请点个关注，分享给更多的人，小K将持续更新，谢谢啦！</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://mp.weixin.qq.com/s/9u5c-6BGL2ZQlhLgGaXZWA">逻辑是怎样炼成的？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>思考的思考</category>
      
      <category>个人成长</category>
      
      <category>思维改变生活</category>
      
      <category>认知升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>道场胜于道法</title>
    <link href="/2021/07/16/%E9%81%93%E5%9C%BA%E8%83%9C%E4%BA%8E%E9%81%93%E6%B3%95/"/>
    <url>/2021/07/16/%E9%81%93%E5%9C%BA%E8%83%9C%E4%BA%8E%E9%81%93%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="道场胜于道法"><a href="#道场胜于道法" class="headerlink" title="道场胜于道法"></a>道场胜于道法</h1><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://jtong.dev/2019/02/10/deliberate-practice-for-digital-talent/dojo-over-method/">jtong.dev</a></p></blockquote><blockquote><p>能力建设的鬼打墙我们为了变强，会订阅很多公众号，牛人博客，收藏很多视频，看很多文章。</p></blockquote><h2 id="能力建设的鬼打墙"><a href="#能力建设的鬼打墙" class="headerlink" title="能力建设的鬼打墙"></a><a href="#%E8%83%BD%E5%8A%9B%E5%BB%BA%E8%AE%BE%E7%9A%84%E9%AC%BC%E6%89%93%E5%A2%99" title="能力建设的鬼打墙"></a>能力建设的鬼打墙</h2><p>我们为了变强，会订阅很多公众号，牛人博客，收藏很多视频，看很多文章。做了很多松鼠的行为，然而最终大多数人并没有变强。<br>我去看了很多学校，大多数学生面临的成长问题与十几年前并无太大区别。<br>我去看了很多家公司，大多数公司面临的能力问题跟十几年前并无太大区别。<br>十几年前，我们买一台电脑都贵得要死，现在跟一台手机差不多钱了。<br>十几年前，我们想学编程连个像样的教程都没有，现在互联网上的教程不要太多。<br>为什么会这样呢？<br>因为信息的多少，并不是学成才的关键。很多人可能知道我又要说刻意练习了，可是按照刻意练习理论，要练一万小时才能成才。但我们从业者练了不止一万小时了吧，每天 996，3 年就该 1 万小时了吧，为啥能力还是个问题呢？<br>因为工作的关系，我不得不思考这个问题，思考的久了，我自己有个理论。我在想，刻意练习把问题过分简化了，学习过程可不是那么简单的，大面上讲，我觉得刻意练习理论是工作的，只是过于粗糙，需要精细化的考虑一下，仔细思考一下刻意练习的背后到底是一个怎样的过程。</p><h2 id="刻意练习的元模型"><a href="#刻意练习的元模型" class="headerlink" title="刻意练习的元模型"></a><a href="#%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E7%9A%84%E5%85%83%E6%A8%A1%E5%9E%8B" title="刻意练习的元模型"></a>刻意练习的元模型</h2><p>经过对自己的学习过程进行反观内视，加上跟很多人的交流，我大概抽取了一个闭环的元模型。<br><img src="https://jtong-pic.obs.cn-north-4.myhuaweicloud.com/dojo-is-more-important-than-method/pic-01.png"></p><p>我发现首先要有问题供学习者思考，我称之为我思，有些问题比较简单，直接可以思考，有些问题比较难，需要先学习一些基础知识才能理解问题本身，后者就是读书的原因之一。</p><p>理解问题之后，就要开始解决问题，毕竟企业里的能力建设都是要解决问题的，必须学以致用。为了能学以致用，那自然就需要练习，但练习不一定是非要专门的练习题，只要将所学知识应用，也算是练习了。练习需要有反馈，知道你做的对还是不对。</p><p>经过练习之后，需要对整个过程进行反思、总结，产出经验和洞见。有数据供反思时分析和有反思的习惯是很重要的，我发现傻做的人很多，反思的人很少，真的是大家都在泥坑里，只有少数人会仰望星空。</p><h3 id="成才三要素之一——环走通"><a href="#成才三要素之一——环走通" class="headerlink" title="成才三要素之一——环走通"></a><a href="#%E6%88%90%E6%89%8D%E4%B8%89%E8%A6%81%E7%B4%A0%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94%E7%8E%AF%E8%B5%B0%E9%80%9A" title="成才三要素之一——环走通"></a>成才三要素之一——环走通</h3><p>按这个环来分析，如果想要成才，首先环要走通。<br>我思的瓶颈在于认知障，所以还是比较简单的，扩大知识面就好了。<br>我做的瓶颈才是最麻烦的，要走通这个环，最难以达成的瓶颈的其实是我做的环节，在互联网时代，你想获得知识已经很容易了，只要你想，你总能找到可以用的知识。<br>但是学到了知识能不能实践其实是关键，你学了大量高并发的知识，但是你工作环境下没有高并发的环境供你练习，你也学不会。你想学软件开发的方法学，却在一个简单机械重复的环境下天天垒那种过些日子就没用处的代码，并不会有所提升。<br>这就是我为什么开始说，道场胜于道法，你没有一个练习场，你学到的知识都卡在第一环节了。<br>然而一个合格的道场本身并不是那么容易具备的，这个我们在后面慢慢讲。</p><p>那么在我反思这个环节上，首先你要有反思的习惯，这个是比较反人性的，所以具备的人本就不多。即便你具备了，一个人的认知又容易受自己的偏见蒙蔽，容易看不清事物的全貌。需要老师的启发式引导，同学的研讨印证。一个具备好的老师同学的环境其实是道场的一部分，你所处的环境里根本没人跟你聊这些，你很容易陷到自己的认知瓶颈里很久都不得突破。</p><p>其次要有数据供自己反思，不过只要有了这个习惯和意识，数据什么的好搞，比如编程的话，可以参考我的《编程的精进之法》。</p><h3 id="成才三要素之二——提高频率"><a href="#成才三要素之二——提高频率" class="headerlink" title="成才三要素之二——提高频率"></a><a href="#%E6%88%90%E6%89%8D%E4%B8%89%E8%A6%81%E7%B4%A0%E4%B9%8B%E4%BA%8C%E2%80%94%E2%80%94%E6%8F%90%E9%AB%98%E9%A2%91%E7%8E%87" title="成才三要素之二——提高频率"></a>成才三要素之二——提高频率</h3><p>一旦环走通之后，频率就是我们接下来要面临的问题。<br>一些简单的内容可以通过设计针对性的练习来提升<br>能进行针对性练习的环境就是我们最好的道场，而现实并不是这样的。<br>我当年练习投篮的时候，就发现，如果是自己一个人练的话，不但要投还要捡球。这单位时间内能练习投篮的频率就降低了。<br>等你把投篮练的差不多了，发现在比赛中能投进和练习时能投进又不一样。<br>针对这两种，你要建立两个环境，互相不能偏废，我称之为专项训练的环境和综合训练的环境。<br>在我们教学生编程的时候，就采用了这两种不同的环境，我们会设置一些非常小的练习，针对性的练习结构化编程、集合的处理、数据结构的设计和数据的转换。<br>然后会设计大作业进行这些技能的组合使用，这个时候需求到具体技术的映射是模糊的。<br>最后会设计项目，团队协作做项目，这个时候需求本身也是模糊的，团队成员之间的配合也需要锻炼。<br>前两种都属于专项训练，分别练习的是单个专项技术的使用和多个专项技术的组合，最后一个属于综合训练，锻炼在模糊不确定性下使用确定性的技术来完成需求的能力。</p><p>这些良好设计的环境都是为我们和我们的客户的校招新员工设计的，普通员工的日常工作中难以具备这样的环境。<br>那么只需要考虑一件事就好了，我们的日常工作中有多少机会来进行练习。如何改造我们的工作环境来，使之成为个体提升的环境是关键。传说中，少林寺的和尚吃饭睡觉都在练功其实就是在讲这个简单的道理：提高频率必须从环境改造下手。</p><h3 id="成才三要素之三——降低废品率"><a href="#成才三要素之三——降低废品率" class="headerlink" title="成才三要素之三——降低废品率"></a><a href="#%E6%88%90%E6%89%8D%E4%B8%89%E8%A6%81%E7%B4%A0%E4%B9%8B%E4%B8%89%E2%80%94%E2%80%94%E9%99%8D%E4%BD%8E%E5%BA%9F%E5%93%81%E7%8E%87" title="成才三要素之三——降低废品率"></a>成才三要素之三——降低废品率</h3><p>解决了闭环、频率问题之后，还有一个不得不面对的因素：废品率。<br>在练习过程当中，并不是所有的练习都是有价值的，大量的练习都是无效的，甚至有些是错误的，在反思阶段会产生反模式。<br>随着闭环次数的增多，熟练度就会提升，不但正确的做法的熟练度会上升，错误做法的熟练度也会上升，如果反思阶段思考的不足，还会得到一些既不是正确做法也不是错误做法的纯粹的无效做法的熟练度。<br>这些熟练度都是问题，都是成长过程中的废品，而如何降低废品率，是高段位竞争者之间的胜负手。<br>这个的获得可以靠反思的时候总结，也可以靠阅读实践者的文章书籍。<br>比如如果纯自己摸索可能最后总会获得大泥球的架构，但是如果阅读了 DDD 之类的文章书籍就能知道可以靠上下文和聚合的方式进行解耦。<br>但是这种实践者写的书籍不像具体的知识那样好懂，通常都是非常抽象的。没有懂行的人指导或研讨，跟看天书也差不多。有时跨过了理解这个坎，又会发现现实环境不允许你进行试验。不管工作流程还是协作方式，从根本上限制了问题的根本解决。（不然问题早就解决了）</p><h2 id="道场建设的窘境"><a href="#道场建设的窘境" class="headerlink" title="道场建设的窘境"></a><a href="#%E9%81%93%E5%9C%BA%E5%BB%BA%E8%AE%BE%E7%9A%84%E7%AA%98%E5%A2%83" title="道场建设的窘境"></a>道场建设的窘境</h2><p>在分析了刻意练习的原模型之后，我们会发现，在今天这个时代，能力建设最大的瓶颈是道场，如何将道场建设起来，比学习知识重要的多，好的练习、好的环境、好的同学比其他的都要重要。</p><p>而现实中，最大的道场就是实际工作环境。所以不管能力建设在开始看起来多么人畜无害，由于涉及到工作环境的改造，最终都会影响到组织的改造和调整。想想也是合理的，按照康威定律，什么样的组织架构需要什么样的软件架构匹配，什么样的软件架构需要什么样的能力匹配，如果旧的环境能够提供足够的练习场，那么能力建设根本就不是个问题，既然能力建设是个问题了，那么在能力建设的需求下，现有组织架构必然是要进行改进的。</p>]]></content>
    
    
    <categories>
      
      <category>思考的思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>铜剑技校</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么值得学</title>
    <link href="/2021/07/15/%E4%BB%80%E4%B9%88%E5%80%BC%E5%BE%97%E5%AD%A6/"/>
    <url>/2021/07/15/%E4%BB%80%E4%B9%88%E5%80%BC%E5%BE%97%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://jtong.dev/2020/01/29/deliberate-practice-for-digital-talent/what-worth-to-be-learn/">jtong.dev</a></p></blockquote><blockquote><p>前言本篇开始针对前文《软件开发人员培养的挑战》提到的挑战试图进行解答。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a href="#%E5%89%8D%E8%A8%80" title="前言"></a>前言</h2><p>本篇开始针对前文<a href="https://jtong.github.io/2020/01/30/deliberate-practice-for-digital-talent/challenge-of-cultivating-programmer/">《软件开发人员培养的挑战<br>》</a>提到的挑战试图进行解答。我们要明白，培养其实是个辅助学员学习知识的过程，那如前文所说，知识量很大又很容易更新换代，所以首先需要明确的一件事就是——什么值得学。根据我的经验需要学习的有两个关键内容：思维框架和具体知识。<br>这两个东西其实很难分得清，或者说他们是迭代交替存在的，思维框架中有知识，知识中有思维框架。但是还是有必要对他们做一个区别介绍，毕竟如果不区别，思考问题时容易搞错问题域。这种区分是为了更好的改造世界，而不是为了更好的解释世界，所以才会出现框架中有知识，知识中有框架的情况。不过在工程的领域，过分追求更完美的解释世界是没有太大必要的，因为工程师的职责不是解释和赞美世界的，工程师的职责是撸起袖子改造世界。</p><p>下面我们一个一个介绍，先介绍思维框架后介绍知识。思维框架这种东西较少有文章详细介绍，所以这里我就说的深入一点。而知识部分网上的内容就很丰富了，我就大概讲讲关键点即可。</p><h2 id="思维框架"><a href="#思维框架" class="headerlink" title="思维框架"></a><a href="#%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6" title="思维框架"></a>思维框架</h2><p>本文介绍的思维框架是通用于所有编程场景的思维模型，是用以解决问题的通用模型，基本上放在所有的编程场景下它都是适用的，但是属于大的框架，可以用以在编程中作为大的方向的指导方针，而不是一步步解决具体问题的框架。虽然听起来比较抽象，但思维框架本身也是非常重要的，因为我在过去的工作中发现，好多人是靠本能思考，没有思维框架的指导，这种情况下的很多人尤其是不太资深的人，都容易陷入无思路头脑一片空白的状况；或者不能还原来看其实复杂的程序也不过是简单程序的叠加，没有什么神秘的，一遇到问题就会过分戏剧化思考而无所适从的状况；有时也没有办法识别自己现在是卡在哪种情况，没有办法求助。所以先介绍比较大的思维框架我认为是比较重要的。</p><p>如前文所述，软件开发是如下的工作：</p><ul><li>把你的业务问题转化为数学问题，让它的规则逻辑自洽，然后用代码实现</li><li>如果它的规则过于复杂，人力不能判断逻辑是否自洽，进行抽象，寄希望于抽象之后逻辑自洽</li><li>如果抽象之后依然过于复杂，不能判断逻辑自洽；或如果进一步抽象将变成过度抽象，从而无法判断是否可以落地，那就切分。寄希望于在一个问题子域中，解决方案可以逻辑自洽，不同的问题子域的方案之间可以映射以合作解决大的问题域</li></ul><p>那么上述三项工作，哪个最重要呢？很多人可能觉得第三个最重要，第二个次之，第一个最简单，也最不重要。但根据我多年工作经验来看，第一个是最要命的。第一个确实最简单，简单到跟篮球运动员的运球和投篮一样简单，然而最简单的事情不意味着大多数人都做得很好。从能力角度，最需要构建的能力，其实并不是什么高大上的能力，恰恰是最基本的能力。而这些最基本的能力是大多数人所不具备的。这就好像人人都在谈论上乘武学，然而大多数人马步都扎不牢。</p><h3 id="思维框架第一级：输入输出"><a href="#思维框架第一级：输入输出" class="headerlink" title="思维框架第一级：输入输出"></a><a href="#%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E7%AC%AC%E4%B8%80%E7%BA%A7%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA" title="思维框架第一级：输入输出"></a>思维框架第一级：输入输出</h3><p>由于软件开发是把业务问题转化为数学问题使之逻辑自洽。那么首先，软件要合逻辑，其基本表现是可预测，也就是可测试。也就是说，确定的输入，一定要得到确定的输出，不然就是玄学。那么软件开发人员首先具备的能力就是要能够把程序从输入输出的角度进行思考，把输入输出想清楚再开始工作，这件事情在软件行业竟然不是通识，也是很悲哀的，大量的人根本没想清楚就冲进去一顿乱搞。<br>由于软件本身的复杂性和人的易错性，可以把一个大的具体的处理过程，拆成一个个小的处理过程，分段验证以隔离人的错误是可测试性角度进一步的要求。举个例子：<br>某段程序的职责是处理输入，得到一些数据，然后提交。这段逻辑中，最后有个函数叫 commit。整段有两种实现，一种是 commit 之前先把处理后的数据结构化好，然后再传给 commit 进行提交。另一种就是直接在 commit 内构建数据，然后提交。二者相比后者比起前者更具可测试性。中间处理过程，如果比较长，也分步切割，使得每一步都可以单独测试，就比只有一个大步，更具可测试性。</p><p>也就是说能否拆解出更细粒度的具备可测试性的程序是保障程序合逻辑的基本要求。（这也是软件是否可信的关键点之一，如果无法细粒度的观测软件，那么软件的行为就是个黑盒，无论如何说不上可信。）</p><p>这是很重要的思维模型，很多人思考软件都是凭本能，最后变成了王宝强的烧饼，必须他来做才能做出来（源自于泰囧里，王宝强饰演的角色说我的配方就是我来做，我来做就是我的配方）。从社会角度还是企业角度都不能承受这种风险，同时，对于初学者他还不具备做好的基础，凭本能只会一团乱，所以建立起输入输出的思维模型是重中之重。</p><h3 id="思维框架第二级：抽象"><a href="#思维框架第二级：抽象" class="headerlink" title="思维框架第二级：抽象"></a><a href="#%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E7%AC%AC%E4%BA%8C%E7%BA%A7%EF%BC%9A%E6%8A%BD%E8%B1%A1" title="思维框架第二级：抽象"></a>思维框架第二级：抽象</h3><p>输入输出思维模型，建立起来之后，我们会发现这个分析是没完没了的，很容易陷入细节，最后设计搞了半天却还没开始写代码。随着要构建的软件越来越复杂，这个时候我们需要抽象来加速我们的思维过程。也就是我们前面说的几点的软件开发到底是什么工作的第二点，也就是抽象。</p><p>所谓抽象就是对实现细节的封装，计算机从底层到上层，实在是太复杂了，没有人可以同时思考这么多的细节，所以必须通过封装来完成对思维负担的降低。当我们抽象出一套概念后，我们基于这一套概念来思考，而不是基于概念的实现来思考。通过抽象封装，我们可以降低思考的复杂度，我们对这部分的思考就简化了，可以释放出来思考更复杂的业务。</p><p>编程非形式的讲，处理两样东西：数据和过程。那么抽象自然是对两种东西的抽象：数据的抽象和过程的抽象。</p><p>首先来讲是数据的抽象，数据的抽象就是把相关的数据封装在一起，给这一堆数据起个类型名，比如把 username、email 等封装一个数据类型叫 User。这样的一个直接收益就是我们思考输入输出的时候可以思考得内容更多一些，因为通过数据的抽象封装了很多细节之后，我们需要思考的细节就变少了。与之相反的操作，在日常工作中，好多人都习惯用 Map（有的语言是 Dictionary）存取，避免起类型名，这是个反模式，因为起名字费劲而不起名字就是在放弃抽象，就是在放弃驾驭复杂问题甚至复杂方案。另一个问题。</p><p>数据抽象是一种极其常见的手法，在面向对象里，我们管这个叫封装，即便是在面向过程或其他编程范式中，这个动作也是有的，比如面向过程里通常也都有结构体等方法来自定义类型。只是面向对象通常是把数据和过程封装在一起作为类。面向对象的这个做法恰恰揭示了数据封装的关键点，那就是数据的封装是跟过程相关的。面向对象的这个手法可能粗暴了一点，但是不管有没有这个手法，数据都是跟某些过程有比较强的相关性，跟有些过程有比较弱的相关性，其他绝大部分的过程完全没有关系。这种相关性是抽象的关键依据，然而大部分的人也都是不会识别和处理或者就只是凭借本能识别和处理。</p><p>其次过程也需要抽象，首先前面说到的围绕自定义的类型进行相应操作的过程，本身这些过程就是很多细节，它会打开这个抽象的封装，然后进行一系列的计算，做这么多细碎的事情的过程自身必须有个名字，也就是过程名，这个过程名本身就是一种抽象。这种抽象使得我们不会去关注其中的细节便可以进行思考，于是可以驾驭的思维内容又可以再一次变多。当然前提是我们进行好的封装不会随意的破坏，这也是一种反模式，很多程序员对抽象是很无意识的，前面数据的封装没有意识，到过程里用的时候也没有意识，封装拆封没有任何规律，很随意，这代码写的就非常难以维护，思考的时候必然也是混乱的从而难以交流和配合。</p><p>那么什么样才是有规律的呢，或者说好的做法呢？那最好的方式就是复用人类已有的思维规律——语言。一旦完成数据的抽象，并且围绕封装好的数据可以进行相应的操作的过程的抽象，我们就会获得一套语言体系：数据的抽象往往是名词，过程的抽象往往是动词。在过程中，数据被拆开封装进行计算，计算完后返回另一个封装好的抽象，交给另一个封装好的过程进行处理。围绕着这些名词和动词，还可能延伸出其他词性，比如排序可能传入一个表达正序还是倒序的数据抽象，这个数据抽象就算是副词。还会演化出连接子句的连词，比如过程的进一步抽象高阶过程。通过对语言体系的一一映射，我们就可以使用自己本来就已经极其熟练的思维技巧来驾驭极其复杂的问题及其解决方案，从而提升思维的效率的同时保障精确性甚至提升创造力。这也是跨界能力存在的背后机理。</p><p>语言的描述是很重要的一种思维模式，不能用人类语言描述的东西基本上也没法用软件编写出来，人们能力所限不会描述是一回事，但是只要是能写出来的软件，必然是可以用语言描述的，毕竟计算机语言也是一门语言。</p><p>当然整个过程也不会那么一帆风顺，有时候抽象之后的思考会有一些偏差，漏掉一些关键的细节从而导致落不了地。不同于其他工作，前文说到写代码这件事不遵从差不多原则，不能差不多就行，差一点整个程序也运转不了，所以它的抽象要求格外严格。有丝毫的偏差，这个抽象就是空中楼阁，或者变成技术债存在于代码中。由于软件的每一个版本之间不存在推倒重来，之前的每一个代码都是后续开发者必须背负的负担，哪怕删除一行也是需要一定成本的，有时候关键的技术债，消除的成本有的时候并不比重新造一个系统简单，而重新造一个系统也不能保证不再有此类技术债存在其中，所以开发者必须面对技术债带来的两难困境。这也是这个行业为什么痛恨 PPT 架构师的缘故。</p><h3 id="思维框架第三级：边界"><a href="#思维框架第三级：边界" class="headerlink" title="思维框架第三级：边界"></a><a href="#%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6%E7%AC%AC%E4%B8%89%E7%BA%A7%EF%BC%9A%E8%BE%B9%E7%95%8C" title="思维框架第三级：边界"></a>思维框架第三级：边界</h3><p>数据和过程的基本抽象仅仅是入门，比起输入输出模型，相对来说就好一点，但是软件进一步复杂下去，就要开始看第三点了，也就是抽象层次问题和限界上下文问题。</p><p>很多人学会了抽象，就像建立起一种可以解决世界上一切问题的统一抽象。这个实际上最后并不能解决编程的问题，因为你已经有一个可以解决编程世界里一切问题的统一抽象了：通用编程语言。你一直抽象到最后，只会得到另一套通用编程语言，于效率提高无益。学会一项技能，有节制的控制和使用是很关键的，所以我们需要理解边界对于解决问题的重大意义。</p><p>前面说到，我们人脑是 “内存” 非常小的一种 “计算设备”，而软件的细节太多了，从上层的抽象到底层的机器信号，这么多复杂的细节，如果都去思考，不用很长时间，大脑的 “内存” 就溢出了，根本思考不下去，所以我们需要抽象。而抽象并不一定能解决问题，问题的复杂化是没有止境的，往往抽象之后，逻辑依然复杂，信息量可能依然很大，大脑依然崩溃。</p><p>所以我们需要建立抽象的分层来隔离掉细节和更底层的噪音，才能解放大脑来关注更重要的事情。</p><p>这个技巧不仅仅是在从软件到底层的角度需要，复杂系统的架构的设计、业务逻辑的拆分、日常的任务分解都需要这个技巧，否则很难高效的完成工作，就算完成设计也是混乱的。举个例子：</p><blockquote><p>我们需要写一个 parser 解析命令行传入的若干参数。传递给程序的参数包含两个部分：</p><ul><li>flag: 是一个字符，在传入给程序时必须前置一个短横线，flag 后可以有 0 个或 1 个 value</li><li>value: 跟在 flag 后的具体值</li></ul><p>parser 能够接受一个 schema 来指定期望接受到的参数格式，其中 schema 会指定 flag 和 value 的 &gt; 数量及类型。当程序将参数传递给 parser 后，parser 会首先检查传入的参数是否符合 schema 的 &gt; 要求。例如，程序希望的传入参数如下：</p><p>-l -p 8080 -d /usr/logs</p><p>那么对应的 schema 要求应为：</p><ul><li>参数可以有三种 flag: l, p, d</li><li>l 是一个布尔标记不需要传入对应的 value，当传入参数中有 l 时代表 true，否则为 false</li><li>p 的 value 类型为整数</li><li>d 的 value 类型为 string</li></ul><p>假如 schema 支持的 flag 没有在参数中出现，那么其值为默认值。例如布尔值的默认值为 false，&gt; 数值的默认值为 0，字符串的默认值为””。</p></blockquote><p>在这种级别的需求面前，比起抓紧开始抽象概念，首先要做的就是分层。因为传入的是字符串，先把字符串变成结构化数据是一层。结构化后的数据再转化为抽象概念的自定义数据类型又是一层，校验自定义数据类型的实例的值是否合法是另一层。起码要分这几层，如果是更复杂的需求分的层次还会更多，比如后面还会有执行命令又是一层。通过分层使得每一层的抽象都是简单的，而不需要进行复杂的抽象，既降低了我们的设计难度也降低了我们的实现难度，最终也会减低我们的维护难度。</p><p>这例子告诉我们在接到需求的时候，不要着急的考虑具体概念的抽象，先考虑分层。而这种意识，对与很多人是欠缺的，他们有时候没有这个意识去思考，有时候意识到了，不知道该怎么思考。</p><p>其实思考这个事情的思路跟前面的思路一样，就是个语言问题。当我们把数据从字符串转成结构化数据为一层的时候，对于这一层来说，他知道的只有 -, 横线后的字符，空格，几个字符这些概念。它就干一件事，把字符串按照一个格式拆开，组成某种简单的无噪音的格式，交给下一层继续处理。并不需要知道 boolean 之类的类型，也不需要知道什么默认值，至于 flag 是否支持就更没有必要知道了。对于这一层来说，它知道的概念极少，做的事极简。这样它领域内的抽象就不会异常复杂。</p><p>一个层次只用一组概念，互相作用。如无必要，勿增实体。这就是通过边界的划分来限制概念的爆炸性增长从而避免复杂化的技巧。</p><p>这个技巧可以用于分层，也可以用于分块。分出来的不管是层还是模块，他们都遵从同一个原则，只有一组有限的概念，这种东西我们在语言中叫做一个上下文，在软件开发中，我们也叫它一个上下文。在一个叫 ddd 的开发方法里，它有一个叫限界上下文的概念就是此类东西。</p><p>有时候，你不但分块，还会通过把问题分解道不同的时间维度上来解决，比如类似宏，采用编译时拼接来解决产品线问题。</p><p>基本上软件设计就是在做上下文的切割，上下文的切割有很多典型的场景，我就不在这展开说了。一个恰当切割的上下文会最大限度的降低设计的难度、避免后续实施中的坑并且可以有效的控制需求扩展对架构的冲击。</p><p>在这之外还有其他思维框架及对应的技巧，比如 sicp 中有个例子，由于是基于 pair 这个数据结构实现的 list，tree 等数据结构。所以一个可以递归遍历 pair 的函数就可以遍历所有的 list、tree。也正是因为我们做了良好的设计，使得在一个层次上可使用的操作，跨越不同的层次依然可以使用。这会带来生产力的提升，毕竟一个函数的适用范围变大了。</p><p>这种换个角度看问题的思维模式（list，tree 其实都只是 pair 里放着另一个 pair 的数据而已）确实在很多时候是很精妙的设计。但这种技巧过于精巧并不是绝大多数人容易掌握的，自然也就不应该期望于绝大多数人掌握那种过于精巧的技巧来完成软件，毕竟软件开发是个团队工作，人也是来自于市场，受制于现实情况，我们不是在真空中做软件。</p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a><a href="#%E7%9F%A5%E8%AF%86" title="知识"></a>知识</h2><p>知识部分，前文说到我们是个可怕的行业，首先知识量大不说，还很容易过时。然而又不能不学。毕竟只有思维模型，不具备具体的知识，也只是坐而论道的高手，我们需要培养的是能撸起袖子实干的人才。</p><p>这样的情况下，我们自然要对知识进行合理的分解，进行有策略的学习。识别哪些知识是初期必须的，在具备了初期的知识后，那些知识又是长期可以保值的，那些知识是会快速贬值的。不管对人来说还是对组织来说，投资快速贬值的知识是很危险的。</p><p>作为初学者来说，一门语言的语法是必须要掌握的，然后就是一门语言的各种库。这些都是必要的，除了学会基本的东西外，主要是知道语言能干什么以及怎么干。</p><p>ide 也是要掌握的，在 ide 导入工程、更改依赖、执行、启动服务、调试以及日常的文件操作和编辑快捷键这些是比较关键的，其他的都算是细节。</p><p>接着就是代码版本管理的工具，基本的提交、同步、拉分支、合并、解决冲突之类要会，当然这些 IDE 也都有相应操作。</p><p>然后就是具体的编程框架了，没有编程框架的辅助，绝大部分人都没法从事具体的应用开发。所以编程框架的学习还是很重要的，有了编程框架才能更好的从事具体应用的开发。</p><p>但是以上的学习中有会有巨大的坑，那就是我前面说到的，知识是会以极高的速度过时的。比如框架，不管前端框架还是后端框架，不知道有多少都消失在历史的烟海中了，还有多少人用得到如何用 Struts 框架来响应 HTTP 请求？有些语言的开发框架倒是没啥变化，然而整个语言整体退出某些开发领域的主流地位变得非常边缘了，像 Rails 尽管曾经风靡一时，你现在招 Ruby 程序员也不好招了。即便留存下来的，更当时的用法也有了不少的变化，现如今的 Spring Boot 跟当年的 Spring 对只学表面的人看来也是完全不同的东西了。</p><p>还有人非常依赖图形界面，太依赖 IDE，换了 IDE 就不会干了，这也是很糟糕的。基于图形界面的知识是贬值速度非常快的，不但 IDE 如此，其他各种工具都是如此，我之前面试了一个人，他对于他的知识只能用他擅长的软件界面来编码的，他回答怎么做开发都是画个大概的 ui 然后说自己怎么做。这种知识是极其容易贬值的，软件界面一变化他的知识就过时了，要重新学习。从 win32 到今天的 windows 都变了多少呢？更不要说其他的工具，更是变化的很随意。</p><p>从工具角度讲，GUI（图形界面）类型的工具就不如 CLI（命令行界面）类型的工具保值，</p><p>虽然框架会变，然而背后的思想及其相关概念往往是比较稳定的，思想通常是不会过时的，只是实现方式会有变化。跟着这些框架、工具、学习思想及其相关概念还可以学习前文所提到的抽象能力边界、识别能力，甚至可以学到一些前面提到的高级的抽象技巧应用于将来复杂问题的解决。</p><p>基于这些概念的工艺类的工程实践也是比较长久的。常见的 TDD、CI 等极限编程的工程实践外，基于不同的框架也会有相应的手法，比如 React 文档中就有一篇<a href="https://jtong.dev/2020/01/29/deliberate-practice-for-digital-talent/what-worth-to-be-learn/[https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)">《Thinking in React》</a>，即便是脱离了 React 也是很有价值的前端工程实践。</p><p>设计模式值不值得学。简单的答案是值得，其实模式化是一种很重要的东西，凡是能模式化写代码的地方都应该模式化，只有模式化的写代码才是专业的态度。毕竟我们的代码是要被多人维护的，你写代码一会一风格，不遵从行业的常用模式，换其他比较严肃的工业领域，说在犯罪也不是太过。模式化这个东西用于艺术创作固然可能不是好事，但是对于工程，这是很大的好事，毕竟它可以再挣提升提升效率同事却不损害质量。</p><p>但是提到模式，只想到 gof 做的 23 种设计模式是有点狭隘的，只要是模式化的编程方式都是应该值得学习。</p><p>比如说过程存在一些模式化的抽象，举个例子我们进行的一个培训里，我在一开始告诉了学员 7 种过程：map、filter、find、anyMatch、allMatch、Sum、split（当然除了 split 和 map，都可以统一称之为 reduce，这就有点过度抽象了，我就没提），我告诉大家我们后面的培训只需要复用这七种过程就能完成几乎所有的作业，同时由于这些操作是通用的，于是我们的实现方式也会比较模式化，希望大家体会。然而很多人后面做的时候，还是各种乱写，并不能把问题拆解然后抽象为这七种过程，通过它们的组合来解决，或者找不到他们中的最简组合来解决，这种思维也是要练的。</p><p>很多编程范式也是值得学习的，比如 OO、函数式编程等。编程范式通常天然便带有一些 GoF 设计模式，有的时候还会带有一些 GoF 设计模式之外的模式。模式很多，学习模式不是为了学习金科玉律，主要是学习先贤们思考问题解决问题的方式。</p><h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a><a href="#%E5%B0%8F%E8%8A%82" title="小节"></a>小节</h2><p>以上就是软件开发人员最需要学习的两大部分内容，希望对于致力于培养软件开发人员或想要自己培养自己成为软件开发人员的人有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>思考的思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>铜剑技校</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS中MAT启动报错</title>
    <link href="/2021/07/11/MacOS%E4%B8%ADMAT%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
    <url>/2021/07/11/MacOS%E4%B8%ADMAT%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MacOS中MAT启动报错"><a href="#MacOS中MAT启动报错" class="headerlink" title="MacOS中MAT启动报错"></a>MacOS中MAT启动报错</h1><img src="/2021/07/11/MacOS%E4%B8%ADMAT%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/2021-07-11-19-18-19.png" class=""><hr><p><strong>问题描述:</strong></p><blockquote><p><code>错误信息</code>: The JVM shared library “/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/../lib/server/libjvm.dylib”<br>does not contain the JNI_CreateJavaVM symbol.</p></blockquote><p><strong>解决方法:</strong></p><p>1、安装JDK11</p><p>去华为云下载JDK11，下载地址：<a href="https://repo.huaweicloud.com/java/jdk/11.0.2+9/jdk-11.0.2_osx-x64_bin.dmg">https://repo.huaweicloud.com/java/jdk/11.0.2+9/jdk-11.0.2_osx-x64_bin.dmg</a></p><p>2、进入Eclipse Memory Analyzer的安装目录下</p><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /Applications/<span class="hljs-keyword">mat</span>.<span class="hljs-keyword">app</span>/Contentsvi Info.plist</code></pre><p>3、修改Info.plist文件</p><pre><code class="hljs gradle">&lt;array&gt;    &lt;!-- To use a specific Java version (instead of the <span class="hljs-keyword">default</span>) uncomment the following option and    edit it to add a VM. Installed VMs can be found via $<span class="hljs-regexp">/usr/</span>libexec/java_home -V    &lt;string&gt;-vm&lt;<span class="hljs-regexp">/string&gt;&lt;string&gt;/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk-11.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>bin<span class="hljs-regexp">/java&lt;/</span>string&gt;--&gt;    &lt;string&gt;-vm&lt;<span class="hljs-regexp">/string&gt;&lt;string&gt;/</span>Library<span class="hljs-regexp">/Java/</span>JavaVirtualMachines<span class="hljs-regexp">/jdk1.8.0_221.jdk/</span>Contents<span class="hljs-regexp">/Home/</span>bin<span class="hljs-regexp">/java&lt;/</span>string&gt;    &lt;string&gt;-keyring&lt;/string&gt;    &lt;string&gt;~<span class="hljs-regexp">/.eclipse_keyring&lt;/</span>string&gt;  &lt;/array&gt;</code></pre><img src="/2021/07/11/MacOS%E4%B8%ADMAT%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/2021-07-11-19-31-26.png" class="">]]></content>
    
    
    <categories>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>mat</tag>
      
      <tag>分析工具</tag>
      
      <tag>fault</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的vscode快捷键速查表</title>
    <link href="/2021/07/11/%E6%88%91%E7%9A%84vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2021/07/11/%E6%88%91%E7%9A%84vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="我的vscode快捷键速查表"><a href="#我的vscode快捷键速查表" class="headerlink" title="我的vscode快捷键速查表"></a>我的vscode快捷键速查表</h1><h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h2><ol><li>command+Shift+P: 打开命令面板</li><li>command+P 模式:</li></ol><ul><li>直接输入文件名，跳转到文件</li><li>? 列出当前可执行的动作</li><li>! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M</li><li>: 跳转到行数，也可以 Ctrl+G 直接进入</li><li>@ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入</li><li>@ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入</li><li>#根据名字查找 symbol，也可以 Ctrl+T</li></ul><ol start="3"><li>ctrl + 1：由终端切换到编辑器</li><li>ctrl + shift + `: 新建一个命令行窗口</li><li>ctrl + `: 快速切换到命令行窗口</li><li>command + w: 这个是装了eclipse keymap插件</li><li>command + h: 往前移动一个tab(这个是本人自定义的)</li><li>command + l: 往后移动一个tab(这个是本人自定义的)</li><li>command + `: 切换vscode窗口</li></ol><h2 id="编辑相关"><a href="#编辑相关" class="headerlink" title="编辑相关"></a>编辑相关</h2><p>本人安装的是vim插件，所以编辑相关的快捷键都是用vim的功能.</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>个人向的cheatsheet，会不定时更新.</p>]]></content>
    
    
    <categories>
      
      <category>cheatsheet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>cheatsheet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode修改tab页切换快捷键</title>
    <link href="/2021/07/11/vscode%E4%BF%AE%E6%94%B9tab%E9%A1%B5%E5%88%87%E6%8D%A2%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/07/11/vscode%E4%BF%AE%E6%94%B9tab%E9%A1%B5%E5%88%87%E6%8D%A2%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vscode-修改tab页切换快捷键"><a href="#vscode-修改tab页切换快捷键" class="headerlink" title="vscode 修改tab页切换快捷键"></a>vscode 修改tab页切换快捷键</h1><p>装了vim后一直没找到切tab页的快捷键</p><p>Code&gt;Preferences&gt;Keyboard Shortcutson macOS</p><p>搜索这2个选项</p><p>我设置成了command+h 向前切换，command+l向后切换，贴合vim的方向设置</p><p>workbench.action.previousEditor command+h</p><p>workbench.action.nextEditor command+l</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/198990464">vscode 修改tab(editor)页切换快捷键</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的阅读标注系统</title>
    <link href="/2021/07/10/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E6%A0%87%E6%B3%A8%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/07/10/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E6%A0%87%E6%B3%A8%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>盒须图BoxPlot</title>
    <link href="/2021/07/09/%E7%9B%92%E9%A1%BB%E5%9B%BEBoxPlot/"/>
    <url>/2021/07/09/%E7%9B%92%E9%A1%BB%E5%9B%BEBoxPlot/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="盒须图"><a href="#盒须图" class="headerlink" title="盒须图"></a>盒须图</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><img src="/2021/07/09/%E7%9B%92%E9%A1%BB%E5%9B%BEBoxPlot/2021-07-09-16-30-19.png" class=""><p>// TODO:未完待续… </p>]]></content>
    
    
    <categories>
      
      <category>统计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS中DBeaver启动时报错</title>
    <link href="/2021/06/30/MacOS%E4%B8%ADDBeaver%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99/"/>
    <url>/2021/06/30/MacOS%E4%B8%ADDBeaver%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决MacOS-DBeaver启动时报错：fail-to-create-java-virtual-machine"><a href="#解决MacOS-DBeaver启动时报错：fail-to-create-java-virtual-machine" class="headerlink" title="解决MacOS DBeaver启动时报错：fail to create java virtual machine"></a>解决MacOS DBeaver启动时报错：fail to create java virtual machine</h2><pre><code class="hljs awk">vi <span class="hljs-regexp">/Applications/</span>DBeaverEE.app<span class="hljs-regexp">/Contents/</span>Eclipse/dbeaver.ini</code></pre><p>查看reame.txt：</p><blockquote><p>-vm <java vm path><br>    Use Java VM installed in <java vm path> folder instead of default<br>    location.</p></blockquote><p>添加如下内容:</p><pre><code class="hljs awk">-vm<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_221.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/bin/</span>java</code></pre>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行工具挂代理方式</title>
    <link href="/2021/06/27/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E6%8C%82%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/06/27/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E6%8C%82%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="命令行工具挂代理方式"><a href="#命令行工具挂代理方式" class="headerlink" title="命令行工具挂代理方式"></a>命令行工具挂代理方式</h1><h2 id="git-代理"><a href="#git-代理" class="headerlink" title="git 代理"></a>git 代理</h2><h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:8087</span>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> <span class="hljs-string">&#x27;socks5://127.0.0.1:1080&#x27;</span>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> <span class="hljs-string">&#x27;socks5://127.0.0.1:1080&#x27;</span></code></pre><h3 id="清除配置"><a href="#清除配置" class="headerlink" title="清除配置"></a>清除配置</h3><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.proxy</span>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https.proxy</code></pre><h3 id="临时代理"><a href="#临时代理" class="headerlink" title="临时代理"></a>临时代理</h3><pre><code class="hljs awk">git clone -c http.proxy=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8087</span>  git clone -c sock.proxy=sock5:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1086</span>  http:<span class="hljs-regexp">//</span>XXX.gitALL_PROXY=socks5:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span> git clone xxxALL_PROXY=socks5:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span> git push xxx</code></pre><h2 id="curl代理"><a href="#curl代理" class="headerlink" title="curl代理"></a>curl代理</h2><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> -x <span class="hljs-number">127.0.0.1:8087</span> google.com</code></pre><h2 id="设置-http-代理"><a href="#设置-http-代理" class="headerlink" title="设置 http 代理"></a>设置 http 代理</h2><pre><code class="hljs awk">curl -x HTTPS_PROXY:<span class="hljs-regexp">//</span>代理ip:端口 -OL https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/alibaba/</span>arthas<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/arthas-all-4.0.4/</span>arthas-tunnel-server-<span class="hljs-number">4.0</span>.<span class="hljs-number">4</span>-fatjar.jar</code></pre><pre><code class="hljs awk"><span class="hljs-comment"># 指定http代理IP和端口</span>curl -x <span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.phpcurl --proxy <span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#指定为http代理</span>curl -x http_proxy:<span class="hljs-regexp">//</span><span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#指定为https代理</span>curl -x HTTPS_PROXY:<span class="hljs-regexp">//</span><span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#指定代理用户名和密码，basic认证方式</span>curl -x aiezu:<span class="hljs-number">123456</span>@<span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.phpcurl -x <span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> -U aiezu:<span class="hljs-number">123456</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.phpcurl -x <span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> --proxy-user aiezu:<span class="hljs-number">123456</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#指定代理用户名和密码，ntlm认证方式</span>curl -x <span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> -U aiezu:<span class="hljs-number">123456</span> --proxy-ntlm http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#指定代理协议、用户名和密码，basic认证方式</span>curl -x http_proxy:<span class="hljs-regexp">//</span>aiezu:<span class="hljs-number">123456</span>@<span class="hljs-number">113.185</span>.<span class="hljs-number">19.192</span>:<span class="hljs-number">80</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php</code></pre><h2 id="设置-socks-代理："><a href="#设置-socks-代理：" class="headerlink" title="设置 socks 代理："></a>设置 socks 代理：</h2><pre><code class="hljs awk"><span class="hljs-comment">#使用socks4代理，无需认证方式</span>curl --socks4 <span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.phpcurl -x socks4:<span class="hljs-regexp">//</span><span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#使用socks4a代理，无需认证方式</span>curl --socks4a <span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.phpcurl -x socks4a:<span class="hljs-regexp">//</span><span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#使用socks5代理，basic认证方式</span>curl --socks5 <span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> -U aiezu:<span class="hljs-number">123456</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.phpcurl -x socks5:<span class="hljs-regexp">//</span>aiezu:<span class="hljs-number">123456</span>@<span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> http:<span class="hljs-regexp">//</span>aiezu.com/test.php <span class="hljs-comment">#使用socks5代理，basic认证方式，ntlm认证方式</span>curl -x socks5:<span class="hljs-regexp">//</span>aiezu:<span class="hljs-number">123456</span>@<span class="hljs-number">122.192</span>.<span class="hljs-number">32.76</span>:<span class="hljs-number">7280</span> --proxy-ntlm http:<span class="hljs-regexp">//</span>aiezu.com/test.php</code></pre><p><strong>参数说明:</strong></p><p><code>-x</code>  设置代理，格式为host[:port]，port的缺省值为1080</p><p>*参考文档: *</p><ul><li><a href="https://www.cnblogs.com/panxuejun/p/10574038.html">Linux curl 命令使用代理、以及代理种类介绍</a></li></ul><h2 id="wget代理"><a href="#wget代理" class="headerlink" title="wget代理"></a>wget代理</h2><pre><code class="hljs nginx"><span class="hljs-attribute">wget</span> -Y <span class="hljs-literal">on</span> -e <span class="hljs-string">&quot;http_proxy=http://127.0.0.1:8087&quot;</span> <span class="hljs-string">&quot;google.com&quot;</span></code></pre><p><strong>参数说明:</strong></p><p><code>-Y</code>  是否使用代理</p><p><code>-e</code>  执行命令</p><h2 id="CMD代理"><a href="#CMD代理" class="headerlink" title="CMD代理"></a>CMD代理</h2><p>通过命令行设置环境变量：<br>打开命令提示符（CMD）。<br>使用 set 命令临时设置代理：</p><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:1080    <span class="hljs-built_in">set</span> <span class="hljs-attribute">https_proxy</span>=http://127.0.0.1:1080</code></pre><h2 id="powershell代理"><a href="#powershell代理" class="headerlink" title="powershell代理"></a>powershell代理</h2><p><strong>以管理员的身份运行powershell:</strong></p><pre><code class="hljs arduino">Start-<span class="hljs-built_in">Process</span> powershell -Verb runAs</code></pre><p><strong>设置代理</strong></p><pre><code class="hljs routeros">netsh winhttp <span class="hljs-built_in">set</span><span class="hljs-built_in"> proxy </span><span class="hljs-string">&quot;127.0.0.1:7890&quot;</span></code></pre><p><strong>检查代理:</strong></p><pre><code class="hljs dart">netsh winhttp <span class="hljs-keyword">show</span> proxy</code></pre><p><strong>测试连接:</strong></p><pre><code class="hljs awk">iwr -Uri https:<span class="hljs-regexp">//</span>www.google.com<span class="hljs-comment"># or</span>iwr -Uri https:<span class="hljs-regexp">//</span>www.google.com | Select-Object -Property StatusCode</code></pre><p><strong>关闭proxy:</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">netsh winhttp reset proxy</span></code></pre><h2 id="bash终端设置代理"><a href="#bash终端设置代理" class="headerlink" title="bash终端设置代理"></a>bash终端设置代理</h2><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&#x27;http://localhost:8118&#x27;</span><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&#x27;http://localhost:8118&#x27;</span></code></pre><p><strong>临时取消代理:</strong></p><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> http_proxy<span class="hljs-built_in">unset</span> https_proxy</code></pre><h2 id="git-bash-终端设置代理"><a href="#git-bash-终端设置代理" class="headerlink" title="git bash 终端设置代理"></a>git bash 终端设置代理</h2><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=socks5://127.0.0.1:1080</code></pre><p>众所周知 Github DNS 被污染了，所有有时候下载十分困难，LazyVim 基本上所有的东西都托管在 Github 上，所以我们其实不用梯子也可以很完美的安装好 LazyVim，用代理就行。 我喜欢用 <a href="https://mirror.ghproxy.com/">GitHub Proxy</a> 这个代理，也有其他代理，大家可以自行找寻。</p><p>我们打开一个终端，输入：</p><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> url.<span class="hljs-string">&quot;https://mirror.ghproxy.com/https://github.com/&quot;</span><span class="hljs-string">.insteadof</span> <span class="hljs-string">&quot;https://github.com/&quot;</span></code></pre><p>这样就可以让 <a href="https://mirror.ghproxy.com/">GitHub Proxy</a> 代理 GitHub 的 git clone , wget , curl 了。一般来说，这种 Github 代理都不会代理 ssh 协议，所以不会影响 ssh 访问 Github，另外其实 ssh 也没有被污染。</p><p>取消也很简单，首先我们看一下 git 的设置列表：</p><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span></code></pre><p>就可以看到 Git 的一些设置</p><p>也许可以看到有这么一项：</p><pre><code class="hljs awk">url.https:<span class="hljs-regexp">//mi</span>rror.ghproxy.com<span class="hljs-regexp">/https:/</span><span class="hljs-regexp">/github.com/</span>.insteadof=https:<span class="hljs-regexp">//gi</span>thub.com/</code></pre><p>加入想取消这一项，就输入等号前面的内容：</p><pre><code class="hljs awk">git config --global --unset url.https:<span class="hljs-regexp">//mi</span>rror.ghproxy.com<span class="hljs-regexp">/https:/</span><span class="hljs-regexp">/github.com/</span>.insteadof</code></pre><h2 id="socks5转http代理"><a href="#socks5转http代理" class="headerlink" title="socks5转http代理"></a>socks5转http代理</h2><p><strong>目标: 定制socks5代理转发</strong></p><pre><code class="hljs markdown">　　　｜＝＝＝＝＞｜　　　　　　　｜＝＝＝＝＞｜　　　　　　　｜＝＝＝＝＞｜浏览器｜　　　　　｜Ｐｒｉｖｏｘｙ｜　　　　　｜ＳＯＣＫＳ代理｜　　　　　｜目标网站　　　｜＜＝＝＝＝｜　　　　　　　｜＜＝＝＝＝｜　　　　　　　｜＜＝＝＝＝｜<span class="hljs-code">      ｜此阶段是　｜　　　　　　　｜此阶段是　｜　　　　　　　｜此阶段是　｜</span><span class="hljs-code"></span>　　　｜ＨＴＴＰ　｜　　　　　　　｜ＳＯＣＫＳ｜　　　　　　　｜ＨＴＴＰ　｜</code></pre><p><strong>privoxy简介</strong></p><p><a href="https://www.privoxy.org/faq/installation.html#WHICHOS">Privoxy</a> 是一个代理软件。支持的平台非常多，<a href="https://www.privoxy.org/">了解更多</a></p><blockquote><p>借由 Privoxy，我们可以控制出去的请求，还可以改写返回的响应。不必要的请求 – 比如视频广告的地址、图片广告的地址，我们可以直接 block 掉；不必要的响应内容 – 比如页面中的文字广告，我们可以借由 filter 过滤掉，不让它们在浏览器页面上显示。<br>– 摘自: <a href="https://www.cnblogs.com/hongdada/p/10787924.html">https://www.cnblogs.com/hongdada/p/10787924.html</a></p></blockquote><p><strong>下载地址:</strong></p><p><a href="https://sourceforge.net/projects/ijbswa/files/Win32/">Download Address</a></p><h2 id="windows平台"><a href="#windows平台" class="headerlink" title="windows平台"></a>windows平台</h2><p><strong>windows privoxy安装目录说明:</strong></p><pre><code class="hljs pgsql">PS D:\Program Files (x86)\Privoxy&gt; tree /f卷 软件 的文件夹 <span class="hljs-type">PATH</span> 列表卷序列号为 <span class="hljs-number">0003</span>-DE55D:.│  AUTHORS.txt│  config.txt  ## 主配置文件│  <span class="hljs-keyword">default</span>.action│  <span class="hljs-keyword">default</span>.<span class="hljs-keyword">filter</span>│  LICENSE.txt│  match-<span class="hljs-keyword">all</span>.action│  privoxy.exe│  privoxy.<span class="hljs-keyword">log</span>│  privoxy_uninstall.exe│  README.txt│  trust.txt│  <span class="hljs-keyword">user</span>.action│  <span class="hljs-keyword">user</span>.<span class="hljs-keyword">filter</span></code></pre><p><strong>在配置文件config.txt中添加如下配置:</strong></p><p><strong>代理的IP地址与监听端口:</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">listen</span>-address  <span class="hljs-number">127.0.0.1:8118</span></code></pre><p><strong>配置转发请求的代理IP地址与监听端口:</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">forward</span>-socks5 / <span class="hljs-number">127.0.0.1:1080</span> .</code></pre><h2 id="linux平台"><a href="#linux平台" class="headerlink" title="linux平台"></a>linux平台</h2><p><strong>系统环境</strong></p><p>笔者的系统版本为: ubuntu20.4<br>笔者的socks代理为: 127.0.0.1:1080<br>使用的代理工具为: clashx + 某供应商提供的trojan机场 or <code>ssh -D</code> + 自建trojan机场</p><blockquote><p>笔者自己用于备份内容<br><code>ssh -D</code> 挂代理脚本:</p></blockquote><p><strong>版本一:</strong></p><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span>PID=$(ps aux|grep ssh|grep fgnTN|grep -v grep |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PID</span><span class="hljs-comment"># $? shell最后运行的后台PID</span><span class="hljs-comment"># $$ shell本身的PID(Proccess ID)</span><span class="hljs-comment"># $- 使用Set命令设定的Flag一览</span><span class="hljs-comment"># $* 所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><span class="hljs-comment"># $@ 所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><span class="hljs-comment"># $# 添加到shell的参数个数</span><span class="hljs-comment"># $0 shell本身的文件名</span><span class="hljs-comment"># $1～$n 添加到Shell的各参数值。$1是第1参数、$2是第2参数…</span><span class="hljs-keyword">if</span> [ $? -eq 0 -a ! -z <span class="hljs-string">&quot;<span class="hljs-variable">$PID</span>&quot;</span> ]<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy server is on...&quot;</span><span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy server is death...&quot;</span> ssh -fgnTN -D 7079 yourusernam@yourhostname <span class="hljs-keyword">if</span> [ $? -eq 0 ] <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy Service restart successd.&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy Service restart failed.&quot;</span> <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span></code></pre><p><strong>版本二:</strong></p><p>笔者的脚本目录如下:</p><pre><code class="hljs asciidoc">➜  scripts tree -L 1<span class="hljs-bullet">.</span><span class="hljs-bullet"></span>├── proxy<span class="hljs-emphasis">_login.sh</span><span class="hljs-emphasis">├── ssh_</span>proxy.sh</code></pre><p><code>proxy_login.sh</code>负责自动登录代理服务器<br><code>ssh_proxy.sh</code> 负责登录重启的逻辑</p><p><em>附件:</em></p><p><code>proxy_login.sh</code> 脚本源码:</p><pre><code class="hljs d"><span class="hljs-meta">#!/usr/bin/expect</span> set password <span class="hljs-string">&quot;123456789@&quot;</span> spawn ssh -fgnTN -D <span class="hljs-number">1080</span> installer<span class="hljs-keyword">@shop</span>.foch.tk expect <span class="hljs-string">&quot;installer@shop.foch.tk&#x27;s password:&quot;</span> send <span class="hljs-string">&quot;$password&quot;</span> expect eof interact</code></pre><blockquote><p>proxy_login.sh脚本的环境依赖</p><ol><li>安装 expect<br>apt-get install expect</li><li>代码注释</li></ol></blockquote><pre><code class="hljs tcl">//这一行告诉操作系统脚本里的代码使用哪一个shell来执行。这里的expect其实和linux下的bash、windows下的cmd是一类东西。 <span class="hljs-comment">#!/usr/bin/expect </span>//<span class="hljs-keyword">set</span>的功能是给参数赋值，这里设置的是超时时间，计时单位是：秒   。timeout <span class="hljs-number">-1</span> 为永不超时<span class="hljs-keyword">set</span> timeout <span class="hljs-number">30</span>//expect脚本可以接受从bash传递过来的参数.可以使用[<span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> n]获得，n从<span class="hljs-number">0</span>开始，分别表示第一个,第二个,第三个....参数。[<span class="hljs-keyword">lrange</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]表示第<span class="hljs-number">1</span>个参数，[<span class="hljs-keyword">lrange</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span>]为第一个到第五个参数。<span class="hljs-keyword">set</span> ipaddr [<span class="hljs-keyword">lrange</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<span class="hljs-keyword">set</span> passwd <span class="hljs-string">&quot;password&quot;</span>//spawn是进入expect环境后才可以执行的expect内部命令，功能是给ssh运行进程加个壳，用来传递交互指令。spawn ssh root@<span class="hljs-variable">$ipaddr</span>              //expect也是expect的一个内部命令，功能是判断上次输出结果里是否包含“password:”的字符串，如果有则立即返回，否则就等待一段时间后返回，这里等待时长就是前面设置的<span class="hljs-number">30</span>秒 expect <span class="hljs-string">&quot;password:&quot;</span>  //send的功能是执行交互动作，与手工输入密码的动作等效。命令字符串结尾别忘记加上“\r”。send <span class="hljs-string">&quot;$passwd\r&quot;</span> //expect命令结束expect <span class="hljs-keyword">eof</span> //执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。如果没有这一句登录完成后会退出，而不是留在远程终端上。如果你只是登录过去执行 interact</code></pre><p><code>ssh_proxy.sh</code>脚本源码: </p><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span>PID=$(ps aux|grep ssh|grep fgnTN|grep -v grep |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PID</span><span class="hljs-keyword">if</span> [ $? -eq 0 -a ! -z <span class="hljs-string">&quot;<span class="hljs-variable">$PID</span>&quot;</span> ]<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy server is on...&quot;</span><span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy server is death...&quot;</span> ./proxy_login.sh <span class="hljs-keyword">if</span> [ $? -eq 0 ] <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy Service restart successd.&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH Proxy Service restart failed.&quot;</span> <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span></code></pre><p><strong>安装privoxy</strong></p><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> privoxy</code></pre><p><strong>更改privoxy配置</strong></p><pre><code class="hljs awk">sudo vi <span class="hljs-regexp">/etc/</span>privoxy/config</code></pre><p>在 froward-socks4下面添加一条socks5的，地址是127.0.0.1:1080。注意最后有一个.</p><pre><code class="hljs apache"><span class="hljs-attribute">forward</span>-socks5   /  <span class="hljs-number">127.0.0.1:1080</span> .</code></pre><p><strong>重启privoxy服务</strong></p><pre><code class="hljs maxima">sudo systemctl <span class="hljs-built_in">restart</span> privoxy.serivce</code></pre><p>或者</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service privoxy restart</span></code></pre><p><strong>测试</strong></p><pre><code class="hljs ruby">dantefung<span class="hljs-variable">@WIN</span>-<span class="hljs-variable constant_">RL03VFUMQFV</span><span class="hljs-symbol">:/mnt/d/scripts</span><span class="hljs-variable">$ </span>./ssh_proxy.shdantefung<span class="hljs-variable">@WIN</span>-<span class="hljs-variable constant_">RL03VFUMQFV</span><span class="hljs-symbol">:/mnt/d/scripts</span><span class="hljs-variable">$ </span>export http_proxy=<span class="hljs-string">&#x27;http://127.0.0.1:8118&#x27;</span>dantefung<span class="hljs-variable">@WIN</span>-<span class="hljs-variable constant_">RL03VFUMQFV</span><span class="hljs-symbol">:/mnt/d/scripts</span><span class="hljs-variable">$ </span>curl -I www.google.com</code></pre><p>期望结果:</p><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=ISO-8859-1<span class="hljs-attribute">P3P</span><span class="hljs-punctuation">: </span>CP=&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;<span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Thu, 17 Feb 2022 17:23:08 GMT<span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>gws<span class="hljs-attribute">X-XSS-Protection</span><span class="hljs-punctuation">: </span>0<span class="hljs-attribute">X-Frame-Options</span><span class="hljs-punctuation">: </span>SAMEORIGIN<span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<span class="hljs-attribute">Expires</span><span class="hljs-punctuation">: </span>Thu, 17 Feb 2022 17:23:08 GMT<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>private<span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>1P_JAR=2022-02-17-17; path=/; domain=.google.com; Secure<span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>NID=511=pcqU1X_oEh95me7ZnpKgUNGTmzSvSRIizVdUHVZTDZGQBwiyLtRMKW1ZokdQsczrA0TeX8EmEV2OpihlqPgK-6-JAw8ZmQrcPYcFyfbEliFd2PxPdZOPZ2A9M_svTXEITKNtoW_1k6t3tViNObjVly-IxFJxPApfaAg92qrK-3k; path=/; domain=.google.com; HttpOnly<span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive</code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://www.jianshu.com/p/e2a144e42bf9">Windows 下 powershell 使用代理</a></p></li><li><p><a href="https://web.archive.org/web/20220106110033/https://www.cnblogs.com/hongdada/p/10787924.html">Privoxy教程</a></p></li><li><p><a href="https://blog.csdn.net/gongchenyu/article/details/80482981">Mac/Ubuntu18.04 使用 privoxy 将 socks 转为 https、http 和 ftp 代理_α-geek 的专栏 - CSDN 博客</a></p></li><li><p><a href="https://www.cnblogs.com/meitian/p/5134797.html">shell 脚本通过 expect 脚本实现自动输入密码（使用 expect）</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive中创建dual虚表</title>
    <link href="/2021/06/25/hive%E4%B8%AD%E5%88%9B%E5%BB%BAdual%E8%99%9A%E8%A1%A8/"/>
    <url>/2021/06/25/hive%E4%B8%AD%E5%88%9B%E5%BB%BAdual%E8%99%9A%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="hive中创建dual虚表"><a href="#hive中创建dual虚表" class="headerlink" title="hive中创建dual虚表"></a>hive中创建dual虚表</h1><p><strong>1、通过如下方式创建dual.txt文件.</strong></p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;X&#x27;</span> &gt; dual.txt</code></pre><p><strong>2、在hive中创建虚表</strong></p><pre><code class="hljs lua"><span class="hljs-built_in">create</span> <span class="hljs-built_in">table</span> dual(dummy <span class="hljs-built_in">string</span>);</code></pre><p><strong>3、将dual.txt文件load到虚表中</strong></p><pre><code class="hljs pgsql"><span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/tmp/dual.txt&#x27;</span> overwrite <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> dual;</code></pre><p><strong>4、测试虚表</strong></p><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> dual;<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hello world&#x27;</span> <span class="hljs-keyword">from</span> dual;</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.csdn.net/qq_20641565/article/details/52927511">hive中构建dual虚表</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>hive</category>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqoop的安装与使用</title>
    <link href="/2021/06/24/sqoop%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/06/24/sqoop%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="sqoop的安装与使用"><a href="#sqoop的安装与使用" class="headerlink" title="sqoop的安装与使用"></a>sqoop的安装与使用</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>java环境</li><li>hadoop环境</li><li>hive环境</li><li>zookeeper环境</li><li>hbase环境</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="https://sqoop.apache.org/">sqoop官网</a></p><img src="/2021/06/24/sqoop%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/2021-06-24-13-55-50.png" class=""><ol><li>下载sqoop-1.4.7.tar.gz<pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt<span class="hljs-attribute">wget</span>  https://mirrors.bfsu.edu.cn/apache/sqoop/<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">7</span>/sqoop-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.tar.gz</code></pre></li><li>解压</li></ol><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> zxvf sqoop-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.tar.gz</code></pre><ol start="3"><li>配置环境变量</li></ol><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>profile</code></pre><p>添加如下内容:</p><pre><code class="hljs"></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu修改默认jdk</title>
    <link href="/2021/06/23/ubuntu%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4jdk/"/>
    <url>/2021/06/23/ubuntu%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4jdk/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ubuntu修改默认jdk"><a href="#ubuntu修改默认jdk" class="headerlink" title="ubuntu修改默认jdk"></a>ubuntu修改默认jdk</h1><pre><code class="hljs sql">sudo <span class="hljs-keyword">update</span><span class="hljs-operator">-</span>alternatives <span class="hljs-comment">--config java</span></code></pre><img src="/2021/06/23/ubuntu%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4jdk/2021-06-23-11-34-12.png" class="">]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu源码编译安装hue</title>
    <link href="/2021/06/18/ubuntu%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85hue/"/>
    <url>/2021/06/18/ubuntu%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85hue/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ubuntu源码编译安装hue"><a href="#ubuntu源码编译安装hue" class="headerlink" title="ubuntu源码编译安装hue"></a>ubuntu源码编译安装hue</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hue是一个开源的Apache Hadoop UI系统，最早是由Cloudera Desktop演化而来，<br>由Cloudera贡献给开源社区，它是基于Python Web框架Django实现的。<br>通过使用Hue我们可以在浏览器端的Web控制台上与Hadoop集群进行交互来分析处理数据，<br>例如操作HDFS上的数据，运行MapReduce Job,Hive等等。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>数据库查询编辑器,支持 Hive, Impala, MySql, PostGres, Sqlite and Oracle<br>动态查询仪表盘,支持 Solr<br>支持 Spark 编辑器和仪表盘<br>浏览器查看状态,支持 YARN, HDFS, Hive table Metastore, HBase, ZooKeeper<br>支持 Pig Editor, Sqoop2, Oozie workflows 编辑器和仪表盘<br>将数据导入hdfs</p><h2 id="安装包下载地址"><a href="#安装包下载地址" class="headerlink" title="安装包下载地址"></a>安装包下载地址</h2><p><a href="https://github.com/cloudera/hue/releases/tag/release-4.10.0">https://github.com/cloudera/hue/releases/tag/release-4.10.0</a></p><h2 id="创建用户组及用户"><a href="#创建用户组及用户" class="headerlink" title="创建用户组及用户"></a>创建用户组及用户</h2><pre><code class="hljs processing">groupadd <span class="hljs-built_in">hue</span>useradd -g <span class="hljs-built_in">hue</span> <span class="hljs-built_in">hue</span> -m -s /bin/bashpasswd <span class="hljs-built_in">hue</span> # 为<span class="hljs-built_in">hue</span>用户设置密码为<span class="hljs-built_in">hue</span>chown -R <span class="hljs-built_in">hue</span>.<span class="hljs-property">hue</span> /opt/<span class="hljs-built_in">hue</span>-release<span class="hljs-number">-4.10</span><span class="hljs-number">.0</span>su - <span class="hljs-built_in">hue</span></code></pre><h2 id="hosts文件配置"><a href="#hosts文件配置" class="headerlink" title="hosts文件配置"></a>hosts文件配置</h2><pre><code class="hljs accesslog">hue@utopa:/opt/hue-release-<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>$ cat /etc/hosts<span class="hljs-number">127.0.0.1</span>       localhost<span class="hljs-number">127.0.1.1</span>       utopa# The following lines are desirable for IPv6 capable hosts::<span class="hljs-number">1</span>     ip6-localhost ip6-loopbackfe00::<span class="hljs-number">0</span> ip6-localnetff00::<span class="hljs-number">0</span> ip6-mcastprefixff02::<span class="hljs-number">1</span> ip6-allnodesff02::<span class="hljs-number">2</span> ip6-allrouters<span class="hljs-number">10.10.27.70</span> zk.had01 GT70<span class="hljs-number">10.10.27.8</span> zk.had02 root-RiskCtrl<span class="hljs-number">10.187.100.120</span> zk.had03 selenium-test</code></pre><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>maven3.6</li><li>jdk1.8</li><li>mysql8.0</li><li>python2.7</li><li>npm</li></ul><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install mavensudo apt-<span class="hljs-built_in">get</span> install npmsudo apt-<span class="hljs-built_in">get</span> install mysql</code></pre><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install ant gcc g++ libkrb5-<span class="hljs-built_in">dev</span> libffi-<span class="hljs-built_in">dev</span> libmysqlclient-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> libsasl2-<span class="hljs-built_in">dev</span> libsasl2-modules-gssapi-mit libsqlite3-<span class="hljs-built_in">dev</span> libtidy<span class="hljs-number">-0.99</span><span class="hljs-number">-0</span> libxml2-<span class="hljs-built_in">dev</span> libxslt-<span class="hljs-built_in">dev</span> make libldap2-<span class="hljs-built_in">dev</span> maven python-<span class="hljs-built_in">dev</span> python-setuptools libgmp3-<span class="hljs-built_in">dev</span></code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt/hue-release-<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span><span class="hljs-attribute">sudo</span> make apps</code></pre><img src="/2021/06/18/ubuntu%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85hue/2021-06-18-17-26-05.png" class=""><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre><code class="hljs awk">vi <span class="hljs-regexp">/home/</span>hue<span class="hljs-regexp">/hue/</span>desktop<span class="hljs-regexp">/conf/</span>pseudo-distributed.ini</code></pre><pre><code class="hljs ini"><span class="hljs-section">[desktop]</span>       <span class="hljs-comment"># 安全秘钥，存储session的加密处理</span>       <span class="hljs-attr">secret_key</span>=malsjljljwrlwerwel       <span class="hljs-comment"># 不启用的模块</span>       <span class="hljs-attr">app_blacklist</span>=impala,security,filebrowser,jobbrowser,rdbms,jobsub，pig,hbase,sqoop,zookeeper,metastore,spark,oozie,indexer</code></pre><pre><code class="hljs ini"><span class="hljs-section">[[database]]</span>       <span class="hljs-comment"># 数据库引擎类型</span>       <span class="hljs-attr">engine</span>=mysql       <span class="hljs-comment"># 数据库主机地址</span>       <span class="hljs-attr">host</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">221.130</span>       <span class="hljs-comment"># 数据库端口</span>       <span class="hljs-attr">port</span>=<span class="hljs-number">3306</span>       <span class="hljs-comment"># 数据库用户名</span>       <span class="hljs-attr">user</span>=hue       <span class="hljs-comment"># 数据库密码</span>       <span class="hljs-attr">password</span>=hue       <span class="hljs-comment"># 数据库库名</span>       <span class="hljs-attr">name</span>=hue</code></pre><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p>创建数据库，数据库：hue，用户：hue，密码：hue</p><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> hue <span class="hljs-keyword">DEFAULT</span> CHARSET utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;hue&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;hue&#x27;</span>;<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> hue.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;hue&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;FLUSH <span class="hljs-keyword">PRIVILEGES</span>;</code></pre><p>初始化数据库</p><pre><code class="hljs awk">sudo .<span class="hljs-regexp">/build/</span>env<span class="hljs-regexp">/bin/</span>hue syncdbsudo .<span class="hljs-regexp">/build/</span>env<span class="hljs-regexp">/bin/</span>hue migrate</code></pre><img src="/2021/06/18/ubuntu%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85hue/2021-06-18-17-49-29.png" class=""><h2 id="启动系统服务，并通过浏览器访问"><a href="#启动系统服务，并通过浏览器访问" class="headerlink" title="启动系统服务，并通过浏览器访问"></a>启动系统服务，并通过浏览器访问</h2><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> chown -R gtland.gtland /opt/hue-release-<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span></code></pre><p>启动服务:</p><pre><code class="hljs gradle">nohup .<span class="hljs-regexp">/build/</span>env<span class="hljs-regexp">/bin/</span>supervisor &gt;&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;</code></pre><p>浏览器访问:</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">221.130</span>:<span class="hljs-number">8000</span>/</code></pre><img src="/2021/06/18/ubuntu%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85hue/2021-06-18-18-26-44.png" class=""><p><strong>启动与关闭:</strong></p><pre><code class="hljs awk"><span class="hljs-comment"># 启动hue</span>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/hue/</span>build<span class="hljs-regexp">/env/</span>binsupervisor &amp;<span class="hljs-comment"># 关闭hue</span>pkill -U hue或者killall -u hue</code></pre><h2 id="HUE-集成Hadoop"><a href="#HUE-集成Hadoop" class="headerlink" title="HUE 集成Hadoop"></a>HUE 集成Hadoop</h2><p>1、<strong>修改core-site.xml</strong></p><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/etc/</span>hadoopvi core-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p>2、<strong>修改hdfs-site.xml</strong></p><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/etc/</span>hadoopvi hdfs-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p><strong>修改httpfs-site.xml</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>httpfs.proxyuser.hadoop.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>httpfs.proxyuser.hadoop.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p><strong>3、重启 HDFS</strong></p><p><strong>4、修改 pseudo-distributed.ini</strong></p><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> vi pseudo-distributed.ini</code></pre><pre><code class="hljs ini"><span class="hljs-section">[hadoop]</span>  <span class="hljs-comment"># Configuration for HDFS NameNode</span>  <span class="hljs-comment"># ------------------------------------------------------------------------</span>  <span class="hljs-section">[[hdfs_clusters]]</span>    <span class="hljs-comment"># HA support by using HttpFs</span>    <span class="hljs-section">[[[default]]]</span>      <span class="hljs-comment"># Enter the filesystem uri</span>      <span class="hljs-attr">fs_defaultfs</span>=hdfs://<span class="hljs-number">10.10</span>.<span class="hljs-number">27.70</span>:<span class="hljs-number">9000</span>      <span class="hljs-comment"># NameNode logical name.</span>      <span class="hljs-comment">## logical_name=</span>      <span class="hljs-comment"># Use WebHdfs/HttpFs as the communication mechanism.</span>      <span class="hljs-comment"># Domain should be the NameNode or HttpFs host.</span>      <span class="hljs-comment"># Default port is 14000 for HttpFs.</span>      <span class="hljs-comment">## webhdfs_url=http://localhost:50070/webhdfs/v1</span>      <span class="hljs-attr">webhdfs_url</span>=http://<span class="hljs-number">10.10</span>.<span class="hljs-number">27.70</span>:<span class="hljs-number">50070</span>/webhdfs/v1        <span class="hljs-comment"># Whether Hue should list this HDFS cluster. For historical reason there is no way to disable HDFS.</span>      <span class="hljs-attr">is_enabled</span>=<span class="hljs-literal">true</span></code></pre><h2 id="HUE-集成yarn"><a href="#HUE-集成yarn" class="headerlink" title="HUE 集成yarn"></a>HUE 集成yarn</h2><p><strong>1.修改hue的配置文件( pseudo-distributed.ini)</strong></p><img src="/2021/06/18/ubuntu%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85hue/2021-06-21-17-05-41.png" class=""><p><strong>2.开启yarn日志聚合服务</strong></p><p>修改 hadoop的配置文件(yarn-site.xml)</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 是否启用日志聚集功能。--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 设置日志保留时间，单位是秒 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>106800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p><strong>3.重启yarn,hue</strong></p><p>重启hadoop集群</p><pre><code class="hljs vim"><span class="hljs-keyword">stop</span>-<span class="hljs-keyword">all</span>-<span class="hljs-keyword">sh</span>start-<span class="hljs-keyword">all</span>.<span class="hljs-keyword">sh</span></code></pre><p>重启hue</p><pre><code class="hljs awk">su huecd <span class="hljs-regexp">/opt/</span>hue-release-<span class="hljs-number">4.10</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/opt/</span>hue-build<span class="hljs-regexp">/env/</span>bin/supervisor</code></pre><h2 id="HUE集成Hbase"><a href="#HUE集成Hbase" class="headerlink" title="HUE集成Hbase"></a>HUE集成Hbase</h2><p>Hbase配置文件-hbase-site.xml</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.thrift.support.proxyuser<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.regionserver.thrift.http<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p>core-site.xml添加</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> vi pseudo-distributed.ini</code></pre><pre><code class="hljs ini"><span class="hljs-section">[hbase]</span><span class="hljs-attr">hbase_conf_dir</span>=&#123;&#123;HBASE_CONF_DIR&#125;&#125;<span class="hljs-attr">thrift_transport</span>=buffered</code></pre><pre><code class="hljs vim">hbase-daemon.<span class="hljs-keyword">sh</span> <span class="hljs-keyword">stop</span> thrifthbase-daemon.<span class="hljs-keyword">sh</span> start thrift</code></pre><h2 id="HUE集成hive"><a href="#HUE集成hive" class="headerlink" title="HUE集成hive"></a>HUE集成hive</h2><p><strong>1.  配置Hive</strong></p><p>Hive数据存储在HDFS上，默认路径是【/user/hive/warehouse】（或者是在hive-site.xml中配置的hive.metastore.warehouse.dir），要确保这个路径存在，并且你创建数据表的用户对这个路径具有写权限。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.server2.thrift.port<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yjt<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.metastore.uris<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>thrift://yjt:9083<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.server2.long.polling.timeout<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p><strong>2.  配置Hue</strong></p><p>修改【HUE_HOME/desktop/conf】目录下的 <code>pseudo-distributed.ini</code> 关于beeswax的配置来集成Hive，这些配置位于[beeswax]</p><pre><code class="hljs ini"><span class="hljs-comment"># Host where HiveServer2 is running.</span><span class="hljs-comment"># If Kerberos security is enabled, use fully-qualified domain name (FQDN).</span><span class="hljs-attr">hive_server_host</span>=zk.had01<span class="hljs-comment"># Port where HiveServer2 Thrift server runs on.</span><span class="hljs-attr">hive_server_port</span>=<span class="hljs-number">10000</span><span class="hljs-comment"># Hive configuration directory, where hive-site.xml is located</span><span class="hljs-attr">hive_conf_dir</span>=/opt/hive/conf</code></pre><p><strong>3. 验证</strong></p><p><strong>3.1 准备测试数据</strong></p><p><strong>3.2 启动hive</strong></p><p>需要同时启动hive的metastore和hiveserve2。</p><p>在zk.had01(10.10.27.70)的节点上 </p><pre><code class="hljs jboss-cli"><span class="hljs-string">/opt/apache-hive-2.3.9/bin</span><span class="hljs-string">./hive</span> <span class="hljs-params">--service</span> hiveserver2 <span class="hljs-params">--hiveconf</span> hive.server2.thrift.port 10000 &amp;<span class="hljs-string">./hive</span> <span class="hljs-params">--service</span> hiveserver2 &amp;</code></pre><p><font color='red'>matestore服务是Hive连接Mysql的metastore数据库用的。</font><br><font color='red'>hiveserver2服务是通过JDBC访问Hive用的，默认端口是：10000。</font></p><p>启动hiveWebInterface，通过网页访问hive</p><pre><code class="hljs jboss-cli"><span class="hljs-string">./hive</span> <span class="hljs-params">--service</span> hwi &amp;</code></pre><p><strong>3.3 导入数据</strong></p><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>apache-hive-<span class="hljs-number">2.3</span>.<span class="hljs-number">9</span>/binhive</code></pre><p>创建数据库</p><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">create database my_test;</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">use my_test;</span></code></pre><p>创建数据表</p><pre><code class="hljs pgsql">&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> department(<span class="hljs-type">name</span> string, count <span class="hljs-type">int</span>)  <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;</code></pre><p><font color='red'>这里的 terminated by ‘\t’ 是与创建表时所声明的字段分隔符一致的。</font></p><p>导入数据</p><pre><code class="hljs pgsql">&gt; <span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/usr/local/cdh-5.2.0/hive-0.13.1/department.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> department;</code></pre><p>查询</p><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">select * <span class="hljs-keyword">from</span> department;</span></code></pre><h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><p><code>Hue _mysql.c:44:10: fatal error: my_config.h: No such file or directory</code></p><pre><code class="hljs livecodeserver">I could <span class="hljs-keyword">not</span> find <span class="hljs-keyword">any</span> package <span class="hljs-keyword">for</span> CentOS <span class="hljs-number">8</span> <span class="hljs-keyword">with</span> that <span class="hljs-built_in">file</span>. However, I found <span class="hljs-keyword">the</span> source <span class="hljs-built_in">file</span> <span class="hljs-keyword">for</span> <span class="hljs-number">8.0</span><span class="hljs-number">.11</span> <span class="hljs-keyword">on</span> <span class="hljs-title">MySQL</span>’<span class="hljs-title">s</span> <span class="hljs-title">official</span> <span class="hljs-title">site</span>. <span class="hljs-keyword">https</span>://dev.mysql.com/doc/dev/mysql-server/<span class="hljs-number">8.0</span><span class="hljs-number">.11</span>/my__config_8h_source.html I created <span class="hljs-keyword">a</span> my_config.h <span class="hljs-built_in">file</span> under /usr/<span class="hljs-built_in">include</span> <span class="hljs-keyword">and</span> copy <span class="hljs-keyword">the</span> content <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> source <span class="hljs-built_in">file</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> I just created. I was able <span class="hljs-built_in">to</span> install MySQL-python module afterward.</code></pre><p><code>hue使用hbase报错User: root is not allowed to impersonate admin</code></p><p>hadoop 的 core-site.xml</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.xxx.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.xxx.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><p>User: root is not allowed to impersonate admin</p><p>User:后面是什么xxx就是什么</p><pre><code class="hljs awk">sudo thrift --gen py <span class="hljs-regexp">/opt/</span>hbase-<span class="hljs-number">1.7</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/src/m</span>ain<span class="hljs-regexp">/resources/</span>org<span class="hljs-regexp">/apache/</span>hadoop<span class="hljs-regexp">/hbase/</span>thrift2/hbase.thrift</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://gethue.com/how-to-build-hue-on-ubuntu-14-04-trusty/">How to build Hue on Ubuntu</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装HUE</title>
    <link href="/2021/06/18/Docker%E5%AE%89%E8%A3%85HUE/"/>
    <url>/2021/06/18/Docker%E5%AE%89%E8%A3%85HUE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Docker安装HUE"><a href="#Docker安装HUE" class="headerlink" title="Docker安装HUE"></a>Docker安装HUE</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/cloudera/hue">https://github.com/cloudera/hue</a></p><img src="/2021/06/18/Docker%E5%AE%89%E8%A3%85HUE/2021-06-18-15-09-06.png" class=""><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -it -p <span class="hljs-number">8888</span>:<span class="hljs-number">8888</span> gethue/hue:latest</code></pre><img src="/2021/06/18/Docker%E5%AE%89%E8%A3%85HUE/2021-06-18-15-07-13.png" class=""><img src="/2021/06/18/Docker%E5%AE%89%E8%A3%85HUE/2021-06-18-15-07-38.png" class=""><img src="/2021/06/18/Docker%E5%AE%89%E8%A3%85HUE/2021-06-18-15-07-46.png" class="">]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式计算框架之MapReduce</title>
    <link href="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/"/>
    <url>/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="分布式计算框架之MapReduce"><a href="#分布式计算框架之MapReduce" class="headerlink" title="分布式计算框架之MapReduce"></a>分布式计算框架之MapReduce</h1><img src="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/2021-06-17-22-52-03.png" class=""><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><ul><li><p>MapReduce是一种分布式计算模型，由Google提出，主要用于搜索领域，解决海量数据的计算问题.</p></li><li><p>MR由两个阶段组成：Map和Reduce，用户只需要实现map()和reduce()两个函数，即可实现分布式计算，非常简单。</p></li><li><p>这两个函数的形参是key、value对，表示函数的输入信息。</p></li></ul><h2 id="MR执行流程"><a href="#MR执行流程" class="headerlink" title="MR执行流程"></a>MR执行流程</h2><img src="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/2021-06-17-21-14-27.png" class=""><h2 id="MapReduce原理"><a href="#MapReduce原理" class="headerlink" title="MapReduce原理"></a>MapReduce原理</h2><img src="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/2021-06-17-21-16-06.png" class=""><p>◆执行步骤：</p><p> <strong>1. map任务处理</strong></p><p>1.1 读取输入文件内容，解析成key、value对。对输入文件的每一行，解析成key、value对。每一个键值对调用一次map函数。<br>1.2 写自己的逻辑，对输入的key、value处理，转换成新的key、value输出。<br>1.3 对输出的key、value进行分区。<br>1.4 对不同分区的数据，按照key进行排序、分组。相同key的value放到一个集合中。<br>1.5 (可选)分组后的数据进行归约。</p><p><strong>2.reduce任务处理</strong></p><p>2.1 对多个map任务的输出，按照不同的分区，通过网络copy到不同的reduce节点。<br>2.2 对多个map任务的输出进行合并、排序。写reduce函数自己的逻辑，对输入的key、value处理，转换成新的key、value输出。<br>2.3 把reduce的输出保存到文件中。</p><img src="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/2021-06-17-22-54-26.png" class=""><h2 id="例子：实现WordCountApp"><a href="#例子：实现WordCountApp" class="headerlink" title="例子：实现WordCountApp"></a>例子：实现WordCountApp</h2><p>文件内容:</p><pre><code class="hljs applescript">hello youhello <span class="hljs-keyword">me</span></code></pre><p><code>1.1</code> 读取输入文件内容，解析成key、value对。对输入文件的每一行，解析成key、value对。每一个键值对调用一次map函数。</p><p><code>执行结果: </code></p><p>​        解析成2个&lt;k,v&gt;，分别是&lt;0, hello you&gt;&lt;10, hello me&gt;。调用2次map函数。</p><p><code>1.2</code> 覆盖map()，接收1.1产生的&lt;k,v&gt;，进行处理，转换为新的&lt;k,v&gt;输出</p><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">map</span><span class="hljs-params">(k, v, ctx)</span></span>&#123;   <span class="hljs-type">String</span>[] splited = v.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;\t&quot;</span>);   <span class="hljs-keyword">for</span>(<span class="hljs-type">String</span> <span class="hljs-type">word</span> : splited)&#123;      ctx.<span class="hljs-built_in">write</span>(<span class="hljs-type">word</span>, <span class="hljs-number">1</span>);   &#125;&#125;</code></pre><p><code>1.3</code> 对1.2输出的&lt;k,v&gt;进行分区。默认分为1个区。</p><p>​        </p><p><code>1.4</code> 对不同分区中的数据进行排序(按照k)、分组。分组指的是相同key的value放到一个集合中。</p><pre><code class="hljs bnf">map输出后的数据是:<span class="hljs-attribute">&lt;hello,1&gt;</span>,<span class="hljs-attribute">&lt;you,1&gt;</span>,<span class="hljs-attribute">&lt;hello,1&gt;</span>,<span class="hljs-attribute">&lt;me,1&gt;</span>排序后是:<span class="hljs-attribute">&lt;hello,1&gt;</span>,<span class="hljs-attribute">&lt;hello,1&gt;</span>,<span class="hljs-attribute">&lt;me,1&gt;</span>,<span class="hljs-attribute">&lt;you,1&gt;</span>分组后是:<span class="hljs-attribute">&lt;hello,&#123;1,1&#125;&gt;</span>,<span class="hljs-attribute">&lt;me,&#123;1&#125;&gt;</span>,<span class="hljs-attribute">&lt;you,&#123;1&#125;&gt;</span></code></pre><p><code>1.5 (可选)</code> 对分组后的数据进行规约。</p><p><code>2.1</code> 多个map任务的输出，按照不同的分区，通过网络copy到不同的reduce节点上。</p><p><code>2.2</code> 对多个map的输出进行合并、排序。覆盖reduce函数，接收的是分组后的数据，实现自己的业务逻辑，处理后，产生新的&lt;k,v&gt;输出。</p><pre><code class="hljs axapta"><span class="hljs-comment">//reduce函数被调用的次数是3</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> reduce(k,vs, ctx)&#123;    <span class="hljs-built_in">long</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>L;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">long</span> times : vs)&#123;        <span class="hljs-keyword">sum</span> += times;        &#125;      ctx.write(k, <span class="hljs-keyword">sum</span>);&#125;</code></pre><p><code>2.3</code> 对reduce输出的&lt;k,v&gt;写到hdfs中。</p><pre><code class="hljs apache"><span class="hljs-attribute">hello</span>   <span class="hljs-number">2</span><span class="hljs-attribute">me</span>      <span class="hljs-number">1</span><span class="hljs-attribute">you</span>     <span class="hljs-number">1</span></code></pre><h2 id="map、reduce键值对格式"><a href="#map、reduce键值对格式" class="headerlink" title="map、reduce键值对格式"></a>map、reduce键值对格式</h2><img src="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/2021-06-17-21-18-40.png" class=""><h2 id="Hadoop-MapReduce-Framework-Architecture"><a href="#Hadoop-MapReduce-Framework-Architecture" class="headerlink" title="Hadoop MapReduce Framework Architecture"></a>Hadoop MapReduce Framework Architecture</h2><img src="/2021/06/17/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6%E4%B9%8BMapReduce/2021-06-17-21-23-14.png" class=""><table><thead><tr><th>组件</th><th>描述</th></tr></thead><tbody><tr><td>JobTracker</td><td>负责接收用户提交的作业，负责启动、跟踪任务执行。</td></tr><tr><td>JobSubmissionProtocol是JobClient与JobTracker通信的接口。</td><td></td></tr><tr><td>InterTrackerProtocol是TaskTracker与JobTracker通信的接口。</td><td></td></tr><tr><td>TaskTracker</td><td>负责执行任务。</td></tr><tr><td>JobClient</td><td>是用户作业与JobTracker交互的主要接口。</td></tr><tr><td>负责提交作业的，负责启动、跟踪任务执行、访问任务状态和日志等。</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hbase集群安装</title>
    <link href="/2021/06/14/hbase%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <url>/2021/06/14/hbase%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Hbase集群安装"><a href="#Hbase集群安装" class="headerlink" title="Hbase集群安装"></a>Hbase集群安装</h2><h3 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h3><table><thead><tr><th>IP</th><th>域名</th><th>系统版本号</th></tr></thead><tbody><tr><td>10.10.x.70</td><td>zk.had01</td><td>Linux version 5.4.0-70-generic (buildd@lcy01-amd64-004) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #78-Ubuntu SMP Fri Mar 19 13:29:52 UTC 2021</td></tr><tr><td>10.10.x.8</td><td>zk.had02</td><td>Linux version 5.4.0-70-generic (buildd@lcy01-amd64-004) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #78-Ubuntu SMP Fri Mar 19 13:29:52 UTC 2021</td></tr><tr><td>10.187.x.120</td><td>zk.had03</td><td>Linux version 3.10.0-957.el7.x86_64 (<a href="mailto:&#109;&#111;&#99;&#107;&#98;&#117;&#105;&#108;&#100;&#64;&#x6b;&#x62;&#x75;&#x69;&#108;&#x64;&#101;&#114;&#x2e;&#x62;&#x73;&#121;&#115;&#x2e;&#99;&#x65;&#x6e;&#116;&#111;&#x73;&#46;&#x6f;&#x72;&#x67;">&#109;&#111;&#99;&#107;&#98;&#117;&#105;&#108;&#100;&#64;&#x6b;&#x62;&#x75;&#x69;&#108;&#x64;&#101;&#114;&#x2e;&#x62;&#x73;&#121;&#115;&#x2e;&#99;&#x65;&#x6e;&#116;&#111;&#x73;&#46;&#x6f;&#x72;&#x67;</a>) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) #1 SMP Thu Nov 8 23:39:32 UTC 2018</td></tr></tbody></table><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>JDK8</li></ul><h3 id="host文件"><a href="#host文件" class="headerlink" title="host文件"></a>host文件</h3><p>将本地回环地址改成内网地址(hbase需要), 将规划的域名zk.had01, zk.had02, zk.had03的配置如下:</p><p>10.10.27.70机器的host配置:</p><pre><code class="hljs accesslog">root@GT70:~# cat /etc/hosts#<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>      localhost<span class="hljs-number">10.10.27.70</span>     GT70<span class="hljs-number">127.0.0.1</span>      localhost# The following lines are desirable for IPv6 capable hosts::<span class="hljs-number">1</span>     ip6-localhost ip6-loopbackfe00::<span class="hljs-number">0</span> ip6-localnetff00::<span class="hljs-number">0</span> ip6-mcastprefixff02::<span class="hljs-number">1</span> ip6-allnodesff02::<span class="hljs-number">2</span> ip6-allrouters<span class="hljs-number">10.10.27.70</span> zk.had01<span class="hljs-number">10.10.27.8</span> zk.had02<span class="hljs-number">10.187.100.120</span> zk.had03</code></pre><p>10.10.27.8机器的host配置:</p><pre><code class="hljs accesslog">hadoop@root-RiskCtrl:/opt/hbase234/logs$ cat /etc/hosts<span class="hljs-number">10.10.27.8</span>      root-RiskCtrl<span class="hljs-number">127.0.0.1</span>       localhost# The following lines are desirable for IPv6 capable hosts::<span class="hljs-number">1</span>     ip6-localhost ip6-loopbackfe00::<span class="hljs-number">0</span> ip6-localnetff00::<span class="hljs-number">0</span> ip6-mcastprefixff02::<span class="hljs-number">1</span> ip6-allnodesff02::<span class="hljs-number">2</span> ip6-allrouters<span class="hljs-number">10.10.27.70</span> zk.had01 GT70 master<span class="hljs-number">10.10.27.8</span> zk.had02 root-RiskCtrl<span class="hljs-number">10.187.100.120</span> zk.had03 selenium-test</code></pre><p>10.187.100.120机器的host配置:</p><pre><code class="hljs accesslog"><span class="hljs-string">[hadoop@selenium-test hadoop]</span>$ cat /etc/hosts<span class="hljs-number">10.187.100.120</span> selenium-test<span class="hljs-number">127.0.0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="hljs-number">10.5.28.240</span>    riskmg-dev.gtland.cn<span class="hljs-number">10.5.28.240</span>    authcctr-dev.gtland.cn<span class="hljs-number">10.10.27.70</span>    zk.had01<span class="hljs-number">10.10.27.8</span>     zk.had02   root-RiskCtrl<span class="hljs-number">10.187.100.120</span> zk.had03<span class="hljs-number">10.10.27.70</span>    GT70 master</code></pre><h3 id="用户及用户组"><a href="#用户及用户组" class="headerlink" title="用户及用户组"></a>用户及用户组</h3><p><strong>用户组、用户、权限规划</strong></p><table><thead><tr><th>用户组</th><th>用户</th><th>权限</th></tr></thead><tbody><tr><td>hadoop</td><td>hadoop</td><td>/opt/hadoop-2.10-1<br />/opt/hbase234</td></tr></tbody></table><p>新建用户组hadoop</p><pre><code class="hljs ebnf"><span class="hljs-attribute">groupadd hadoop</span></code></pre><p>新建hadoop用户</p><pre><code class="hljs awk">useradd hadoop -g hadoop -m -s <span class="hljs-regexp">/bin/</span>bash</code></pre><p> 给已创建的用户hadoop设置密码为hadoop</p><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd hadoop</span></code></pre><p>修改目录所属用户</p><pre><code class="hljs awk">chown -R hadoop.hadoop <span class="hljs-regexp">/opt/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span>chown -R hadoop.hadoop <span class="hljs-regexp">/opt/</span>hbase234</code></pre><p>切换用户hadoop</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su - hadoop</span></code></pre><blockquote><p>Note:<br>zk.had01, zk.had02, zk.had03 三台机上面都要创建.并切换成hadoop用户.</p></blockquote><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><img src="/2021/06/14/hbase%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/2021-06-15-23-55-30.png" class=""><p><strong>方式一:</strong></p><pre><code class="hljs applescript">ssh-keygenssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -p <span class="hljs-number">22612</span> hadoop@zk.had01ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -p <span class="hljs-number">22612</span> hadoop@zk.had02ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -p <span class="hljs-number">22612</span> hadoop@zk.had03</code></pre><p><strong>方式二:</strong></p><p>将本机的公钥文件上传到目标服务器上，然后在服务器需要免密登录的用户家目录下查看是否有 ~/.ssh/authorized_keys这个文件，<br>如果没有手动创建一个:</p><pre><code class="hljs arcade">touch ~<span class="hljs-regexp">/.ssh/</span>authorized_keys</code></pre><p>然后我们将公钥内容写入到authorized_keys文件中，因为这个文件可能已经有内容了，所以你可以使用如下方式</p><pre><code class="hljs arcade">cat -n ~<span class="hljs-regexp">/.ssh/</span>rsa.pub ~<span class="hljs-regexp">/.ssh/</span>authorized_keys</code></pre><p>这样就将公钥内容追加到authorized_keys中了，然后需要注意配置权限了，否则SSH不会工作的.</p><p>将.ssh目录的权限为700<br>将authorized_keys目录的权限为600</p><p><strong>设置别名:</strong></p><pre><code class="hljs arcade">vi ~<span class="hljs-regexp">/.ssh/</span>config</code></pre><p>内容如下:</p><pre><code class="hljs crmsh">host hadoop1     <span class="hljs-keyword">user</span> <span class="hljs-title">hadoop</span>     hostname <span class="hljs-number">10.10</span>.<span class="hljs-number">27.70</span>     port <span class="hljs-number">22612</span>host hadoop2     <span class="hljs-keyword">user</span> <span class="hljs-title">hadoop</span>     hostname <span class="hljs-number">10.10</span>.<span class="hljs-number">27.8</span>     port <span class="hljs-number">22612</span>host hadoop3     <span class="hljs-keyword">user</span> <span class="hljs-title">hadoop</span>     hostname <span class="hljs-number">10.187</span>.<span class="hljs-number">100.120</span>     port <span class="hljs-number">22612</span></code></pre><h3 id="下载Hbase"><a href="#下载Hbase" class="headerlink" title="下载Hbase"></a>下载Hbase</h3><pre><code class="hljs awk">cd /optwget http:<span class="hljs-regexp">//mi</span>rrors.hust.edu.cn<span class="hljs-regexp">/apache/</span>hbase<span class="hljs-regexp">/stable/</span>hbase-<span class="hljs-number">2.3</span>.<span class="hljs-number">4</span>-bin.tar.gz</code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf hbase-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>-bin.tar.gz</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p><strong>修改hbase-env.sh:</strong></p><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> hbase-<span class="hljs-number">2.3</span>.<span class="hljs-number">4</span>/<span class="hljs-keyword">conf</span><span class="hljs-keyword">vi</span> hbase-env.<span class="hljs-keyword">sh</span></code></pre><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_73<span class="hljs-built_in">export</span> <span class="hljs-attribute">HBASE_MANAGES_ZK</span>=<span class="hljs-literal">false</span></code></pre><p><strong>修改hbase-site.xml:</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>      <span class="hljs-comment">&lt;!--指定zk的地址,多个用,分割 --&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>zk.had01:2181,zk.had02:2181,zk.had03:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-comment">&lt;!-- 指定 hbase 在 HDFS 上存储的路径 --&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://zk.had01:9000/hbase234<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--zookooper配置、日志等的存储位置，必须为以存在 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/data/hbase/zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--hbase web 端口 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.master.info.port<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>16610<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改regionservers:</strong></p><pre><code class="hljs smali">hadoop2hadoop3</code></pre><p><strong>修改backup-masters:</strong></p><pre><code class="hljs">zk.had02</code></pre><p><strong>修改hdfs-site.xml 和 core-site.xml:</strong><br>最重要一步，要把 hadoop 的 hdfs-site.xml 和 core-site.xml 放到 hbase-2.3.4/conf 下</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/etc/</span>hadoopcp core-site.xml hdfs-site.xml <span class="hljs-regexp">/opt/</span>hbase-<span class="hljs-number">2.3</span>.<span class="hljs-number">4</span><span class="hljs-regexp">/conf/</span></code></pre><h3 id="将Hbase安装包分发到其他节点"><a href="#将Hbase安装包分发到其他节点" class="headerlink" title="将Hbase安装包分发到其他节点"></a>将Hbase安装包分发到其他节点</h3><p>分发之前先删除HBase目录下的docs文件夹</p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt/hbase-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/<span class="hljs-attribute">rm</span> -rf docs</code></pre><p>分发</p><pre><code class="hljs apache"><span class="hljs-attribute">scp</span> -r hbase-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/ hadoop@zk.had02:/tmp<span class="hljs-attribute">scp</span> -r hbase-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/ hadoop@zk.had03:/tmp</code></pre><p>分别登陆zk.had02, zk.had03，移动hbase-2.3.4至/opt下</p><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> /tmp/hbase-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span> /opt</code></pre><h3 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h3><p>HBase 集群对于时间的同步要求的比 HDFS 严格，所以，集群启动之前千万记住要进行 时间同步，要求相差不要超过 30s</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code class="hljs bash">vi ~/.bashrc</code></pre><p>内容如下:</p><pre><code class="hljs routeros"><span class="hljs-comment">#HBase</span><span class="hljs-built_in">export</span> <span class="hljs-attribute">HBASE_HOME</span>=/opt/hbase-2.3.4/<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HBASE_HOME/bin</code></pre><p>使环境变量立即生效</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h2 id="启动Hbase集群"><a href="#启动Hbase集群" class="headerlink" title="启动Hbase集群"></a>启动Hbase集群</h2><h3 id="启动zookeeper集群"><a href="#启动zookeeper集群" class="headerlink" title="启动zookeeper集群"></a>启动zookeeper集群</h3><p>每个zookeeper节点都要执行以下命令</p><pre><code class="hljs crmsh">zkServer.sh <span class="hljs-literal">start</span></code></pre><h3 id="启动HDFS集群及YARN集群"><a href="#启动HDFS集群及YARN集群" class="headerlink" title="启动HDFS集群及YARN集群"></a>启动HDFS集群及YARN集群</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/hadoop-2.10.1/sbin./start-all.sh</code></pre><h3 id="启动HBase"><a href="#启动HBase" class="headerlink" title="启动HBase"></a>启动HBase</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/hbase-2.3.4/bin./start-hbase.sh</code></pre><h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><ul><li><a href="https://blog.csdn.net/yangrui1985123/article/details/103381243">Hadoop集群、Hbase集群指定ssh端口</a></li><li><a href="https://www.cnblogs.com/qingyunzong/p/8668880.html">HBase学习之路 （二）HBase集群安装</a></li><li><a href="https://www.cnblogs.com/ysocean/p/6959776.html">Hadoop中ssh+IP、ssh+别名免秘钥登录配置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop集群搭建</title>
    <link href="/2021/06/12/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/06/12/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="hadoop集群搭建"><a href="#hadoop集群搭建" class="headerlink" title="hadoop集群搭建"></a>hadoop集群搭建</h2><h3 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h3><table><thead><tr><th>IP</th><th>域名</th><th>系统版本号</th></tr></thead><tbody><tr><td>10.10.x.70</td><td>zk.had01</td><td>Linux version 5.4.0-70-generic (buildd@lcy01-amd64-004) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #78-Ubuntu SMP Fri Mar 19 13:29:52 UTC 2021</td></tr><tr><td>10.10.x.8</td><td>zk.had02</td><td>Linux version 5.4.0-70-generic (buildd@lcy01-amd64-004) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #78-Ubuntu SMP Fri Mar 19 13:29:52 UTC 2021</td></tr><tr><td>10.187.x.120</td><td>zk.had03</td><td>Linux version 3.10.0-957.el7.x86_64 (<a href="mailto:&#109;&#111;&#99;&#107;&#98;&#x75;&#105;&#108;&#x64;&#64;&#x6b;&#x62;&#x75;&#x69;&#108;&#100;&#101;&#x72;&#46;&#98;&#115;&#121;&#x73;&#x2e;&#99;&#x65;&#110;&#116;&#111;&#x73;&#x2e;&#x6f;&#114;&#x67;">&#109;&#111;&#99;&#107;&#98;&#x75;&#105;&#108;&#x64;&#64;&#x6b;&#x62;&#x75;&#x69;&#108;&#100;&#101;&#x72;&#46;&#98;&#115;&#121;&#x73;&#x2e;&#99;&#x65;&#110;&#116;&#111;&#x73;&#x2e;&#x6f;&#114;&#x67;</a>) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) #1 SMP Thu Nov 8 23:39:32 UTC 2018</td></tr></tbody></table><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>JDK8</li></ul><h3 id="下载软件并安装"><a href="#下载软件并安装" class="headerlink" title="下载软件并安装"></a>下载软件并安装</h3><p><a href="https://hadoop.apache.org/releases.html">官网下载地址</a></p><blockquote><p>Note:<br>本文使用的版本号为hadoop-2.10.1.tar.gz<br>存放地址为/opt</p></blockquote><h3 id="host文件"><a href="#host文件" class="headerlink" title="host文件"></a>host文件</h3><p>将本地回环地址改成内网地址(hbase需要), 将规划的域名zk.had01, zk.had02, zk.had03的配置如下:</p><p>10.10.27.70机器的host配置:</p><pre><code class="hljs accesslog">root@GT70:~# cat /etc/hosts#<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>      localhost<span class="hljs-number">10.10.27.70</span>     GT70<span class="hljs-number">127.0.0.1</span>      localhost# The following lines are desirable for IPv6 capable hosts::<span class="hljs-number">1</span>     ip6-localhost ip6-loopbackfe00::<span class="hljs-number">0</span> ip6-localnetff00::<span class="hljs-number">0</span> ip6-mcastprefixff02::<span class="hljs-number">1</span> ip6-allnodesff02::<span class="hljs-number">2</span> ip6-allrouters<span class="hljs-number">10.10.27.70</span> zk.had01<span class="hljs-number">10.10.27.8</span> zk.had02<span class="hljs-number">10.187.100.120</span> zk.had03</code></pre><p>10.10.27.8机器的host配置:</p><pre><code class="hljs accesslog">hadoop@root-RiskCtrl:/opt/hbase234/logs$ cat /etc/hosts<span class="hljs-number">10.10.27.8</span>      root-RiskCtrl<span class="hljs-number">127.0.0.1</span>       localhost# The following lines are desirable for IPv6 capable hosts::<span class="hljs-number">1</span>     ip6-localhost ip6-loopbackfe00::<span class="hljs-number">0</span> ip6-localnetff00::<span class="hljs-number">0</span> ip6-mcastprefixff02::<span class="hljs-number">1</span> ip6-allnodesff02::<span class="hljs-number">2</span> ip6-allrouters<span class="hljs-number">10.10.27.70</span> zk.had01 GT70 master<span class="hljs-number">10.10.27.8</span> zk.had02 root-RiskCtrl<span class="hljs-number">10.187.100.120</span> zk.had03 selenium-test</code></pre><p>10.187.100.120机器的host配置:</p><pre><code class="hljs accesslog"><span class="hljs-string">[hadoop@selenium-test hadoop]</span>$ cat /etc/hosts<span class="hljs-number">10.187.100.120</span> selenium-test<span class="hljs-number">127.0.0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="hljs-number">10.5.28.240</span>    riskmg-dev.gtland.cn<span class="hljs-number">10.5.28.240</span>    authcctr-dev.gtland.cn<span class="hljs-number">10.10.27.70</span>    zk.had01<span class="hljs-number">10.10.27.8</span>     zk.had02   root-RiskCtrl<span class="hljs-number">10.187.100.120</span> zk.had03<span class="hljs-number">10.10.27.70</span>    GT70 master</code></pre><h3 id="用户及用户组"><a href="#用户及用户组" class="headerlink" title="用户及用户组"></a>用户及用户组</h3><p><strong>用户组、用户、权限规划</strong></p><table><thead><tr><th>用户组</th><th>用户</th><th>权限</th></tr></thead><tbody><tr><td>hadoop</td><td>hadoop</td><td>/opt/hadoop-2.10-1<br />/opt/hbase234</td></tr></tbody></table><p>新建用户组hadoop</p><pre><code class="hljs ebnf"><span class="hljs-attribute">groupadd hadoop</span></code></pre><p>新建hadoop用户</p><pre><code class="hljs awk">useradd hadoop -g hadoop -m -s <span class="hljs-regexp">/bin/</span>bash</code></pre><p> 给已创建的用户hadoop设置密码为hadoop</p><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd hadoop</span></code></pre><p>修改目录所属用户</p><pre><code class="hljs awk">chown -R hadoop.hadoop <span class="hljs-regexp">/opt/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span>chown -R hadoop.hadoop <span class="hljs-regexp">/opt/</span>hbase234</code></pre><p>切换用户hadoop</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su - hadoop</span></code></pre><blockquote><p>Note:<br>zk.had01, zk.had02, zk.had03 三台机上面都要创建.并切换成hadoop用户.</p></blockquote><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><p><strong>方式一:</strong></p><pre><code class="hljs applescript">ssh-keygenssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -p <span class="hljs-number">22612</span> hadoop@zk.had01ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -p <span class="hljs-number">22612</span> hadoop@zk.had02ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> -p <span class="hljs-number">22612</span> hadoop@zk.had03</code></pre><p><strong>方式二:</strong></p><p>将本机的公钥文件上传到目标服务器上，然后在服务器需要免密登录的用户家目录下查看是否有 ~/.ssh/authorized_keys这个文件，<br>如果没有手动创建一个:</p><pre><code class="hljs arcade">touch ~<span class="hljs-regexp">/.ssh/</span>authorized_keys</code></pre><p>然后我们将公钥内容写入到authorized_keys文件中，因为这个文件可能已经有内容了，所以你可以使用如下方式</p><pre><code class="hljs arcade">cat -n ~<span class="hljs-regexp">/.ssh/</span>rsa.pub ~<span class="hljs-regexp">/.ssh/</span>authorized_keys</code></pre><p>这样就将公钥内容追加到authorized_keys中了，然后需要注意配置权限了，否则SSH不会工作的.</p><p>将.ssh目录的权限为700<br>将authorized_keys目录的权限为600</p><p><strong>设置别名:</strong></p><pre><code class="hljs arcade">vi ~<span class="hljs-regexp">/.ssh/</span>config</code></pre><p>内容如下:</p><pre><code class="hljs crmsh">host hadoop1     <span class="hljs-keyword">user</span> <span class="hljs-title">hadoop</span>     hostname <span class="hljs-number">10.10</span>.<span class="hljs-number">27.70</span>     port <span class="hljs-number">22612</span>host hadoop2     <span class="hljs-keyword">user</span> <span class="hljs-title">hadoop</span>     hostname <span class="hljs-number">10.10</span>.<span class="hljs-number">27.8</span>     port <span class="hljs-number">22612</span>host hadoop3     <span class="hljs-keyword">user</span> <span class="hljs-title">hadoop</span>     hostname <span class="hljs-number">10.187</span>.<span class="hljs-number">100.120</span>     port <span class="hljs-number">22612</span></code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>hadoop-env.sh</li><li>core-site.xml</li><li>hdfs-site.xml</li><li>mapred-site.xml</li><li>yarn-site.xml</li><li>slaves</li></ul><p><strong>修改hadoop-env.sh</strong><br>改其中的JAVA_HOME为我们安装jdk的路径</p><pre><code class="hljs arcade">JAVA_HOME=<span class="hljs-regexp">/usr/</span>local/jdk</code></pre><p><strong>修改core-site.xml文件</strong><br>/opt/hadoop-2.10.1/etc/hadoop/core-site.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><span class="hljs-comment">  you may not use this file except in compliance with the License.</span><span class="hljs-comment">  You may obtain a copy of the License at</span><span class="hljs-comment"></span><span class="hljs-comment">    http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment"></span><span class="hljs-comment">  Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><span class="hljs-comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment">  See the License for the specific language governing permissions and</span><span class="hljs-comment">  limitations under the License. See accompanying LICENSE file.</span><span class="hljs-comment">--&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://zk.had01:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定hadoop临时目录 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-2.10.1/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定zookeeper地址 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>zk.had01:2181,zk.had02:2181,zk.had03:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.zookeeper.session-timeout.ms<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改hdfs-site.xml</strong><br>/opt/hadoop-2.10.1/etc/hadoop/hdfs-site.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><span class="hljs-comment">  you may not use this file except in compliance with the License.</span><span class="hljs-comment">  You may obtain a copy of the License at</span><span class="hljs-comment"></span><span class="hljs-comment">    http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment"></span><span class="hljs-comment">  Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><span class="hljs-comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment">  See the License for the specific language governing permissions and</span><span class="hljs-comment">  limitations under the License. See accompanying LICENSE file.</span><span class="hljs-comment">--&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <span class="hljs-comment">&lt;!-- configuration for NameNode:--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-2.10.1/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 块大小 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>268435456<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.handler.count<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-comment">&lt;!-- configuration for DateNode:--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-2.10.1/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改mapred-site.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><span class="hljs-comment">  you may not use this file except in compliance with the License.</span><span class="hljs-comment">  You may obtain a copy of the License at</span><span class="hljs-comment"></span><span class="hljs-comment">    http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment"></span><span class="hljs-comment">  Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><span class="hljs-comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment">  See the License for the specific language governing permissions and</span><span class="hljs-comment">  limitations under the License. See accompanying LICENSE file.</span><span class="hljs-comment">--&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改yarn-site.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><span class="hljs-comment">  you may not use this file except in compliance with the License.</span><span class="hljs-comment">  You may obtain a copy of the License at</span><span class="hljs-comment"></span><span class="hljs-comment">    http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment"></span><span class="hljs-comment">  Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><span class="hljs-comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment">  See the License for the specific language governing permissions and</span><span class="hljs-comment">  limitations under the License. See accompanying LICENSE file.</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>zk.had01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                                                                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改slaves文件:</strong><br>这里配置的是ssh的别名</p><pre><code class="hljs smali">hadoop2hadoop3</code></pre><h3 id="配置hadoop环境变量"><a href="#配置hadoop环境变量" class="headerlink" title="配置hadoop环境变量"></a>配置hadoop环境变量</h3><p>方便执行hadoop相关的命令.</p><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>profile</code></pre><p>内容如下:</p><pre><code class="hljs routeros"><span class="hljs-attribute">JAVA_HOME</span>=/usr/lib/jvm/java-8-openjdk-amd64<span class="hljs-attribute">HADOOP_HOME</span>=/opt/hadoop-2.10.1<span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin<span class="hljs-built_in">export</span> JAVA_HOME<span class="hljs-built_in">export</span> HADOOP_HOME<span class="hljs-built_in">export</span> PATH</code></pre><blockquote><p>Note:<br>zk.had01, zk.had02, zk.had03 也要配置.</p></blockquote><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>将zk.had01的/opt/hadoop-2.10.1分发到zk.had02, zk.had03.</p><pre><code class="hljs apache"><span class="hljs-attribute">scp</span> -r /opt/hadoop-<span class="hljs-number">2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span> hadoop@zk.had02:/tmp<span class="hljs-attribute">scp</span> -r /opt/hadoop-<span class="hljs-number">2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span> hadoop@zk.had03:/tmp</code></pre><p>分别登陆zk.had02, zk.had03，移动hadoop-2.10.1至/opt下</p><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> /tmp/hadoop-<span class="hljs-number">2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span> /opt</code></pre><h3 id="启动hadoop集群"><a href="#启动hadoop集群" class="headerlink" title="启动hadoop集群"></a>启动hadoop集群</h3><p><strong>格式化一个新的分布式文件系统：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt/hadoop-<span class="hljs-number">2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span>/bin<span class="hljs-attribute">hadoop</span> namenode -format</code></pre><p><strong>启动：</strong></p><p>在zk.had01上启动:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/hadoop-2.10.1/sbin./start-all.sh</code></pre><h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><ul><li><p><a href="https://www.cnblogs.com/ysocean/p/6959776.html">Hadoop中ssh+IP、ssh+别名免秘钥登录配置</a></p></li><li><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html">Hadoop集群搭建</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Proxifier的安装与激活</title>
    <link href="/2021/06/12/Proxifier%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/"/>
    <url>/2021/06/12/Proxifier%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Proxifier的安装与激活"><a href="#Proxifier的安装与激活" class="headerlink" title="Proxifier的安装与激活"></a>Proxifier的安装与激活</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://www.proxifier.com/download/#mac-tab">https://www.proxifier.com/download/#mac-tab</a></p><blockquote><p>笔者安装的版本为3.5</p></blockquote><h3 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h3><pre><code class="hljs apache"><span class="hljs-attribute">3CWNN</span>-WYTP4-SD83W-ASDFR-<span class="hljs-number">84</span>KEA</code></pre><p>激活码生成工具:</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Danz17/</span>Proxifier-Keygen</code></pre><h3 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h3><ul><li><a href="https://www.cnblogs.com/itachilee/p/14202469.html">proxifier注册码</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zookeeper集群搭建</title>
    <link href="/2021/06/12/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/06/12/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="zookeeper集群搭建"><a href="#zookeeper集群搭建" class="headerlink" title="zookeeper集群搭建"></a>zookeeper集群搭建</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>安装JDK8</li></ul><h3 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h3><p>在局域网内规划三台机器:</p><table><thead><tr><th>IP</th><th>域名</th><th>系统版本号</th></tr></thead><tbody><tr><td>10.10.x.70</td><td>zk.had01</td><td>Linux version 5.4.0-70-generic (buildd@lcy01-amd64-004) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #78-Ubuntu SMP Fri Mar 19 13:29:52 UTC 2021</td></tr><tr><td>10.10.x.8</td><td>zk.had02</td><td>Linux version 5.4.0-70-generic (buildd@lcy01-amd64-004) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #78-Ubuntu SMP Fri Mar 19 13:29:52 UTC 2021</td></tr><tr><td>10.187.x.120</td><td>zk.had03</td><td>Linux version 3.10.0-957.el7.x86_64 (<a href="mailto:&#x6d;&#x6f;&#x63;&#x6b;&#x62;&#x75;&#x69;&#108;&#x64;&#x40;&#x6b;&#x62;&#117;&#x69;&#108;&#x64;&#101;&#114;&#x2e;&#x62;&#115;&#x79;&#x73;&#x2e;&#x63;&#101;&#110;&#x74;&#111;&#115;&#x2e;&#111;&#114;&#103;">&#x6d;&#x6f;&#x63;&#x6b;&#x62;&#x75;&#x69;&#108;&#x64;&#x40;&#x6b;&#x62;&#117;&#x69;&#108;&#x64;&#101;&#114;&#x2e;&#x62;&#115;&#x79;&#x73;&#x2e;&#x63;&#101;&#110;&#x74;&#111;&#115;&#x2e;&#111;&#114;&#103;</a>) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) #1 SMP Thu Nov 8 23:39:32 UTC 2018</td></tr></tbody></table><p><strong>host文件配置</strong></p><pre><code class="hljs accesslog"><span class="hljs-number">10.10.27.70</span>    zk.had01<span class="hljs-number">10.10.27.8</span>     zk.had02<span class="hljs-number">10.187.100.120</span> zk.had03</code></pre><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><img src="/2021/06/12/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/2021-06-12-17-03-53.png" class=""><h3 id="下载zookeeper并安装"><a href="#下载zookeeper并安装" class="headerlink" title="下载zookeeper并安装"></a>下载zookeeper并安装</h3><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt<span class="hljs-attribute">wget</span> https://archive.apache.org/dist/zookeeper/zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>/zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.tar.gz<span class="hljs-attribute">tar</span> -zxvf zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.tar.gz<span class="hljs-attribute">chmod</span> +wxr zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span><span class="hljs-attribute">cd</span> zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span><span class="hljs-attribute">mkdir</span> data<span class="hljs-attribute">mkdir</span> logs<span class="hljs-attribute">vi</span> conf/zoo.cfg</code></pre><p><strong>zoo.cfg内容</strong></p><pre><code class="hljs apache"><span class="hljs-comment"># The number of milliseconds of each tick</span><span class="hljs-attribute">tickTime</span>=<span class="hljs-number">2000</span><span class="hljs-comment"># The number of ticks that the initial</span><span class="hljs-comment"># synchronization phase can take</span><span class="hljs-attribute">initLimit</span>=<span class="hljs-number">10</span><span class="hljs-comment"># The number of ticks that can pass between</span><span class="hljs-comment"># sending a request and getting an acknowledgement</span><span class="hljs-attribute">syncLimit</span>=<span class="hljs-number">5</span><span class="hljs-comment"># the directory where the snapshot is stored.</span><span class="hljs-comment"># do not use /tmp for storage, /tmp here is just</span><span class="hljs-comment"># example sakes.</span><span class="hljs-attribute">dataDir</span>=/opt/zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>/data<span class="hljs-attribute">dataLogDir</span>=/opt/zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>/logs<span class="hljs-attribute">server</span>.<span class="hljs-number">1</span>=zk.had01:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><span class="hljs-attribute">server</span>.<span class="hljs-number">2</span>=zk.had02:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><span class="hljs-attribute">server</span>.<span class="hljs-number">3</span>=zk.had03:<span class="hljs-number">2888</span>:<span class="hljs-number">3888</span><span class="hljs-comment"># the port at which the clients will connect</span><span class="hljs-attribute">clientPort</span>=<span class="hljs-number">2181</span><span class="hljs-comment"># the maximum number of client connections.</span><span class="hljs-comment"># increase this if you need to handle more clients</span><span class="hljs-comment">#maxClientCnxns=60</span><span class="hljs-comment">#</span><span class="hljs-comment"># Be sure to read the maintenance section of the</span><span class="hljs-comment"># administrator guide before turning on autopurge.</span><span class="hljs-comment">#</span><span class="hljs-comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="hljs-comment">#</span><span class="hljs-comment"># The number of snapshots to retain in dataDir</span><span class="hljs-comment">#autopurge.snapRetainCount=3</span><span class="hljs-comment"># Purge task interval in hours</span><span class="hljs-comment"># Set to &quot;0&quot; to disable auto purge feature</span><span class="hljs-comment">#autopurge.purgeInterval=1</span></code></pre><pre><code class="hljs haskell"><span class="hljs-title">cd</span> <span class="hljs-class"><span class="hljs-keyword">data</span></span><span class="hljs-title">vi</span> myid</code></pre><blockquote><p>Note:<br>根据我们的配置文件：<br>server.1=zk.had01:2888:3888<br>server.2=zk.had02:2888:3888<br>server.3=zk.had03:2888:3888<br>所以:<br>zk.had01 的myid 为 1<br>zk.had02 的myid 为 2<br>zk.had03 的myid 为 3</p></blockquote><p>将配置好的整个zookeeper-3.4.10文件夹压缩</p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt<span class="hljs-attribute">tar</span> -cvf zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.tar zookeeper.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span></code></pre><p>即将刚压缩好的文件夹传送到另外的两台服务器, zk.had02, zk.had03 </p><pre><code class="hljs apache"><span class="hljs-attribute">scp</span> zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.tar yourusername@yourip:/tmp</code></pre><p>分别登陆zk.had02和zk.had03将压缩包zookeeper-3.4.10.tar移至/opt目录下</p><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> /tmp/zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span> /opt</code></pre><p>解压该压缩文件</p><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xvf zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.tar</code></pre><p>修改myid</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span>zookeeper-<span class="hljs-number">3.4</span>.<span class="hljs-number">10</span><span class="hljs-regexp">/data/</span>vi myid</code></pre><p>zk.had02节点的myid修改为2， zk.had03节点的myid修改为3.</p><h3 id="启动zookeeper集群"><a href="#启动zookeeper集群" class="headerlink" title="启动zookeeper集群"></a>启动zookeeper集群</h3><p>分别ssh进入zk.had01, zk.had02, zk.had03 </p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/zookeeper-3.4.10/bin./zkServer.sh start</code></pre><p>待三台机器都起来后, 再键入</p><pre><code class="hljs bash">./zkServer.sh status</code></pre><p><strong>注意事项:</strong><br>防火墙的设置，保证ip和端口都能相通.</p><h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><ul><li><a href="https://www.cnblogs.com/netbloomy/p/6658041.html">1、zookeeper集群安装</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决MAC电脑键盘和触摸板突然没有反应问题</title>
    <link href="/2021/05/31/%E8%A7%A3%E5%86%B3MAC%E7%94%B5%E8%84%91%E9%94%AE%E7%9B%98%E5%92%8C%E8%A7%A6%E6%91%B8%E6%9D%BF%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/31/%E8%A7%A3%E5%86%B3MAC%E7%94%B5%E8%84%91%E9%94%AE%E7%9B%98%E5%92%8C%E8%A7%A6%E6%91%B8%E6%9D%BF%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决MAC电脑键盘和触摸板突然没有反应问题"><a href="#解决MAC电脑键盘和触摸板突然没有反应问题" class="headerlink" title="解决MAC电脑键盘和触摸板突然没有反应问题"></a>解决MAC电脑键盘和触摸板突然没有反应问题</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>更新系统macOS Big Sur 版本：11.4 后，使用原生键盘登陆进入系统后，触控板能使用，但是原生键盘不可用。连接HHKB BT可使用。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>第一个方法：</strong>重置一下NVRAM：首先关机，然后在按开机键后立即同时按下option+command+P+R，听到3-4边启动声音后松手（按好几十秒钟那，自己找个了个地方，因为声音不小，办公区都可以听到。。），进入系统，看看键盘和触控板是不是恢复正常。</p><p><strong>第二种方法:</strong> 重置SMC：关闭电脑，如果没有连接电源，连接上电源，键盘上同时按下（左侧）Shift+Control+Option+开关机键，大约十秒钟后同时松开所有键和电源按钮，开机，看看键盘和触控板是不是恢复正常。（重置 SMC 时，电源适配器上的 LED 指示灯可能会更改状态或暂时关闭）。</p><p>笔者，尝试了第一种方法后可行。</p><p>补充：</p><p>1、Ctrl + 关机：弹出关机提示</p><p>2、Ctrl + Option + 关机 ： 正常关机快捷键</p><p>3、Command + Option + 关机 ：进入休眠状态</p><p>4、Ctrl + Command + 关机：重启机器</p><p>5、Shift + Ctrl + Option + 关机：瞬间关机</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.jianshu.com/p/51d6142b564a">解决MAC电脑键盘和触摸板突然没有反应问题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL45讲笔记</title>
    <link href="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL45讲笔记"><a href="#MySQL45讲笔记" class="headerlink" title="MySQL45讲笔记"></a>MySQL45讲笔记</h1><h2 id="01、基础架构：一条SQL语句是如何执行的"><a href="#01、基础架构：一条SQL语句是如何执行的" class="headerlink" title="01、基础架构：一条SQL语句是如何执行的"></a>01、基础架构：一条SQL语句是如何执行的</h2><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/2021-05-06-21-19-45.png" class=""><h2 id="02、日志系统：一条SQL更新语句是如何执行的？"><a href="#02、日志系统：一条SQL更新语句是如何执行的？" class="headerlink" title="02、日志系统：一条SQL更新语句是如何执行的？"></a>02、日志系统：一条SQL更新语句是如何执行的？</h2><h2 id="03、事务隔离：为什么你改了我还看不见？"><a href="#03、事务隔离：为什么你改了我还看不见？" class="headerlink" title="03、事务隔离：为什么你改了我还看不见？"></a>03、事务隔离：为什么你改了我还看不见？</h2><h3 id="事务的四个特性"><a href="#事务的四个特性" class="headerlink" title="事务的四个特性"></a>事务的四个特性</h3><p> ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）</p><h3 id="为什么会有隔离级别的概念"><a href="#为什么会有隔离级别的概念" class="headerlink" title="为什么会有隔离级别的概念?"></a>为什么会有隔离级别的概念?</h3><p>当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><h3 id="并发事务处理的问题"><a href="#并发事务处理的问题" class="headerlink" title="并发事务处理的问题"></a>并发事务处理的问题</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>脏读</td><td>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态，这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些 “脏” 数据，并据此做进一步的处理， 就会产生未提交的数据依赖关系。这种现象被形象地叫做”脏读”。</td><td>读到别人未提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。一句话：事务A读取到了事务B已经提交的修改数据，不符合隔离性</td><td>读到别人已经提交的数据</td></tr><tr><td>幻读</td><td>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</td><td>读到别人新插入的数据</td></tr></tbody></table><p><code>注意：</code>幻读和脏读有点类似，脏读是事务B里面<em>修改</em>了数据，幻读是事务B里面<em>新增</em>了数据。</p><h3 id="SQL-标准的事务隔离级别"><a href="#SQL-标准的事务隔离级别" class="headerlink" title="SQL 标准的事务隔离级别"></a>SQL 标准的事务隔离级别</h3><table><thead><tr><th>读未提交（read uncommitted）</th><th>一个事务还没提交时，它做的变更就能被别的事务看到。</th><th></th></tr></thead><tbody><tr><td>读提交（read committed）</td><td>一个事务提交之后，它做的变更才会被其他事务看到。</td><td></td></tr><tr><td>可重复读（repeatable read）</td><td>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</td><td></td></tr><tr><td>串行化（serializable ）</td><td>“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</td><td></td></tr></tbody></table><h4 id="抛砖引玉"><a href="#抛砖引玉" class="headerlink" title="抛砖引玉"></a>抛砖引玉</h4><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/2021-05-06-22-18-42.png" class=""><h3 id="事务隔离是如何实现的？"><a href="#事务隔离是如何实现的？" class="headerlink" title="事务隔离是如何实现的？"></a>事务隔离是如何实现的？</h3><p><strong>前置知识</strong></p><p><em>视图</em></p><table><thead><tr><th>虚拟表（view）</th><th>它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。</th></tr></thead><tbody><tr><td>一致性读视图(consistent read view)</td><td>InnoDB 在实现 MVCC 时用到的<strong>一致性读视图</strong>，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。<br /><br />在事务隔离的时候，事务T启动的时候会创建一个视图read-view,之后事务T执行期间，即使有其他事务修改了数据，事务T还是看到和启动时一样的。</td></tr></tbody></table><p><em>事务的起点</em></p><p>begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。</p><p>如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。一般默认autocommit=1。</p><p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。标准SQL事务隔离级别的实现是依赖锁的。</p><table><thead><tr><th>读未提交（read uncommitted）</th><th>直接返回记录上的最新值，没有视图概念</th><th></th><th></th><th>事务对当前被读取的数据不加锁;<br />事务在更新某数据的瞬间(就是发生更新的瞬间) ,必须先对其加<strong>行级共享锁</strong>，直到事务结束才释放。</th></tr></thead><tbody><tr><td>读提交（read committed）</td><td>视图是在每个 SQL 语句开始执行的时候创建的。</td><td></td><td>MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题</td><td>事务对当前被读取的数据加<strong>行级共享锁(当读到时才加锁)**， 一旦读完该行，立即释放该行级共享锁;<br />事务在更新某数据的瞬间(就是发生更新的瞬间) ,必须先对其加</strong>行级排他锁**，直到事务结束才释放。</td></tr><tr><td>可重复读（repeatable read）</td><td>视图是在事务启动时创建的，整个事务存在期间都用这个视图。</td><td></td><td>在可重复读级别通过<strong>间隙锁</strong>解决了幻读问题</td><td>事务在读取某数据的瞬间(就是开始读取的瞬间) , 必须先对其加<strong>行级共享锁</strong>，直到事务结束才释放;<br />事务在更新某数据的瞬间(就是发生更新的瞬间)， 必须先对其加<strong>行级排他锁</strong>，直到事务结束才释放。</td></tr><tr><td>串行化（serializable ）</td><td>直接用加锁的方式来避免并行访问。</td><td><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/2021-05-06-22-33-35.png" class=""></td><td></td><td>事务在读取数据时，必须先对其加<strong>表级共享锁</strong>，直到事务结束才释放;<br />事务在更新数据时，必须先对其加<strong>表级排他锁</strong>，直到事务结束才释放。</td></tr></tbody></table><p><strong>Undo日志实现事务</strong></p><p>undo日志是为了保障数据库的原子性和一致性，是一种逻辑日志。undo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。</p><p><strong>Undo日志作用</strong></p><ul><li>用于事务回滚</li><li>MVCC</li></ul><table><thead><tr><th>inser undo log</th><th>update undo log</th></tr></thead><tbody><tr><td><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/2021-05-06-23-02-47.jpeg" class=""></td><td><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/2021-05-06-23-05-51.jpeg" class=""></td></tr><tr><td>是insert操作中产生的undo log，因为只对本事务可见，该类undo log在事务提交后就可以删除，不需要进行purge操作。</td><td>update undo log是delete和update操作产生的undo log。此类undo log是MVCC的基础，在本事务提交后不能简单的删除，需要放入purge队列purge_sys-&gt;purge_queue等待purge线程进行最后的删除。</td></tr></tbody></table><p>在Innodb中使用表空间，回滚段，页等多级概念结构实现undo功能，并随版本多次改进。</p><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/2021-05-06-22-49-24.png" class=""><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。</p><p>实际上并不是说要把整个数据库都拷贝一遍。而是主要记录事务的id。<br>在InnoDB中里面的每一个事务都有一个唯一id 叫做transaction id。<br>事务开始的时候像InnoDB申请的。并且有严格的递增顺序。</p><p>因为每行数据会有多个版本，每一次事务更新数据的时候都会生成一个新的数据版本，并且吧自己的事务id transaction id 赋值给这个数据版本你的事务ID。</p><p>这个属性记录为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。</p><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/20200902132809617.png" class=""><p>在可重复读中，以事务自己的启动时刻为准，如果一个数据版本是在我启动之前生成的，就可以看见，承认。如果是我启动以后才生成的，我就不认，我必须找到它的上一个版本。</p><p>在这个过程中，InnoDB为每一个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务ID。“活跃指的是”，事务启动但是还没有提交。</p><p>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。</p><p>这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。</p><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/20200902133515809.png" class=""><p>图中的虚线其实是undo log。</p><h2 id="怎么实现？"><a href="#怎么实现？" class="headerlink" title="怎么实现？"></a>怎么实现？</h2><p>这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：<br>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；<br>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；<br>如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。</p><p>具体例子<br>现在有事务ABC<br>1.在事务A开始前，系统里面只有一个活跃事务ID是99；<br>2.在事务A、B、C的ID为100、101、102；<br>3.三个事务开始前，（1,1）这一行数据的row trx_id是90</p><p>这样，事务 A 的视图数组就是[99,100], 事务 B 的视图数组是[99,100,101], 事务 C 的视图数组是[99,100,101,102]。<br>目前有以下逻辑关系</p><img src="/2021/05/06/MySQL45%E8%AE%B2%E7%AC%94%E8%AE%B0/20200902134715902.png" class=""><p>第一次修改数据的是C把数据从 (1,1) 改成了 (1,2)。这时候，这个数据的最新版本的 row trx_id 是 102，而 90 这个版本已经成为了历史版本。<br>第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。<br>当A事务去查看的时候，就会在历史版本中一个个看，第一个看到101的，不在可见视图中，就是大于100，不看，第二个102，大于100，不看。再来看到90，比低水位小，可看。<br>这样事务A不论什么时候查询，看到的行数据的结果都是一致的，所以叫做一致性读</p><p>再看更新逻辑<br>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）。</p><p>除了 update 语句外，select 语句如果加锁，也是当前读。</p><p>如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。下面这两个 select 语句，就是分别加了读锁（S 锁，共享锁）和写锁（X 锁，排他锁）。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java之NIO</title>
    <link href="/2021/04/23/Java%E4%B9%8BNIO/"/>
    <url>/2021/04/23/Java%E4%B9%8BNIO/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java之NIO"><a href="#Java之NIO" class="headerlink" title="Java之NIO"></a>Java之NIO</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="生活例子"><a href="#生活例子" class="headerlink" title="生活例子:"></a>生活例子:</h3><p><strong>同步 ：</strong> 自己亲自出马持银行卡到银行取钱（使用同步IO时，Java自己处理IO读写）。</p><p><strong>异步 ：</strong> 委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO时，Java将IO读写委托给OS处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS需要支持异步IO操作API）。</p><p><strong>阻塞 ：</strong> ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）。</p><p><strong>非阻塞 ：</strong> 柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器会通知可读写时再继续进行读写，不断循环直到读写完成）。</p><h3 id="操作系统层面的理解"><a href="#操作系统层面的理解" class="headerlink" title="操作系统层面的理解:"></a>操作系统层面的理解:</h3><p>Linux内核将所有的外部设备都看作一个文件来操作，对一个文件的读写都会调用内核的系统命令，返回一个文件描述符(File Descriptor, 简称fd, 有些地方也叫做句柄)。</p><p>而对于一个socket的读写也看作是文件读写，同样会返回一个文件描述符， 称作socket fd。</p><p><em>fd</em> 是一个数数字， 它指向内核中的一个数据结构体。 Linux系统中， <em>fd</em> 是有打开限制的。</p><p><strong>1、阻塞I/O（blocking IO）</strong></p><p>应用程序调用一个IO函数，导致应用程序阻塞，如果数据已经准备好，从内核拷贝到用户空间，否则一直等待下去。</p><p>一个典型的读操作流程大致如下图, 当用户进程调用read这个系统调用时。</p><p>kernel 就开始了IO的第一阶段:<font color='blue'> <em>准备数据, 就是数据被拷贝到内核缓冲区中的一个过程.</em></font></p><p>等数据到操作系统的内核缓冲区了, 就到了第二阶段: <font color='blue'><em>将数据从内核缓冲区拷贝到用户内存，然后kernel返回结果，用户进程才会接触block状态，重新运行起来.</em></font></p><p><font color="red">blocking IO的特点就是在IO执行的两个阶段用户进程都会block住。</font></p><img src="/2021/04/23/Java%E4%B9%8BNIO/2021-04-23-16-37-21.png" class=""><p><strong>小结:</strong></p><p>   阻塞的两个部分:<br>   1、CPU把数据从磁盘读到内核缓冲区。<br>   2、CPU把数据从内核缓冲区拷贝到用户缓冲区。</p><p><strong>2、非阻塞IO（nonblocking IO）</strong></p><p><strong>关键字:</strong> 主动轮询</p><p>非阻塞IO模型，我们把一个套接口设置为非阻塞就是告诉内核，当所有请求的IO操作无法完成时， 不要将进程睡眠， 而是返回一个错误。</p><p>这样， 我们的IO操作函数将不断的测试数据是否已经准备好，如果没有准备好，继续测试，直到数据准备好为止。在这个不断测试的过程中， <font color='red'>会大量的占用CPU时间。</font></p><p>当用户进程发出read操作时， 如果kernel钟数据还没准备好，那么并不会block用户进程，而是立即返回error，用户进程判断结果是error，就知道数据还没有准备好， 用户可以再次发read,知道kernel中数据准备好，并且用户再一次发read操作，产生system call, 那么kernel马上将数据拷贝到用户内存， 然后返回。</p><p>所以，<font color='red'>nonblocking IO的特点是用户进程需要不断主动询问kernel数据准备好了没有。</font></p><img src="/2021/04/23/Java%E4%B9%8BNIO/2021-04-25-10-16-55.png" class=""><p><strong>3、IO多路复用模型(IO multiplexing)</strong></p><p><strong>关键字：</strong> 事件驱动机制、event notification mechansim</p><p>非阻塞情况下无可用数据时，应用程序每次轮询内核看数据是否准备好了也耗费CPU，能否不让它轮询，当内核缓冲区数据准备好了，以<code>事件通知的机制</code>告知应用进程数据准备好了呢？应用进程在没有收到数据准备好的事件通知信号时可以忙写其他的工作。此时<code>IO多路复用</code>就派上用场了。</p><img src="/2021/04/23/Java%E4%B9%8BNIO/2021-04-25-10-08-56.png" class=""><p>这里最后一次 read 调用获取数据的过程，是一个同步的过程，是需要等待的过程。这里的同步指的是<font color='green'>内核态的数据拷贝到用户程序的缓存区这个过程。</font></p><p><strong>补充知识:</strong></p><p>I/O multiplexing</p><p>In computing, I/O multiplexing can also be used to refer to the concept of processing multiple input/output events from a single event loop, with system calls like poll[1] and select (Unix).[2]</p><blockquote><p>NOTE: 如何来理解multiplexing？multiplexing的关键在于many和one，下面是一些例子:<br>1、在telecommunications中many 是multiple analog or digital signals ，one是 combined into one signal over a shared medium 。</p><p>many logical and one physical ；</p><p>2、在 computing的 <strong>I/O multiplexing</strong>中，many是<font color='orange'>multiple input/output events</font> 而one则是<font color='orange'>a single event loop object</font>；</p><p>many IO event and one event loop object；</p><p>显然multiplexing的目标在于实现性能的提升，资源的节省；</p><p>在现实application中，都需要有reverse operation: demultiplexing，<strong>demultiplexing</strong>其实非常类似于dispatch</p></blockquote><p><code>I/O multiplexing</code> means what it says - allowing the programmer to examine and block on multiple I/O streams (or other “synchronizing” events), being notified whenever any one of the streams is active so that it can process data on that stream.</p><p>The advantage of IO Multiplexing is that it allows blocking on multiple resources simultaneously(同时地), without needing to use polling (which wastes CPU cycles) or multithreading (which can be difficult to deal with, especially if threads are introduced into an otherwise sequential app only for the purpose of pending on multiple descriptors).</p><blockquote><p>NOTE:<br>以上讲的是IO多路复用的特点，所能做到的事。那么它是如何实现的呢?</p><p>Event Demultiplexer and Event Handler</p><p>一般地,I/O多路复用机制都依赖于一个事件<strong>多路分离器(Event Demultiplexer)。</strong>分离器对象<strong>可将来自事件源的I/O事件分离出来，并分发到对应的</strong>read/write事件处理器(Event Handler)(或回调函数)。开发人员预先注册需要处理的事件及其事件处理器（或回调函数）；事件分离器负责将请求事件传递给事件处理器。</p></blockquote><table><thead><tr><th>IO类型</th><th>描述</th></tr></thead><tbody><tr><td>阻塞IO</td><td>一个线程只能处理一个IO流事件, 要想同时处理多个IO流事件要么多线程要么多进程。</td></tr><tr><td>非阻塞IO</td><td>可以一个线程处理多个流事件，只要不停地轮询所有流事件即可，当然这个方式也不好，当大多数据流没数据时，也是会大量浪费CPU资源。</td></tr></tbody></table><h2 id="Java对BIO、NIO、AIO的支持："><a href="#Java对BIO、NIO、AIO的支持：" class="headerlink" title="Java对BIO、NIO、AIO的支持："></a>Java对BIO、NIO、AIO的支持：</h2><p>Java BIO ： 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</p><p>Java NIO ： 同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</p><p>Java AIO(NIO.2) ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理.</p><h2 id="BIO、NIO、AIO适用场景分析"><a href="#BIO、NIO、AIO适用场景分析" class="headerlink" title="BIO、NIO、AIO适用场景分析:"></a>BIO、NIO、AIO适用场景分析:</h2><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</p><p>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</p><p>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p><blockquote><p>对于初学者来说，同步并阻塞、同步非阻塞、异步非阻塞并不容易理解。</p></blockquote><p>那么网络上有一个段子。。<br>老张爱喝茶，废话不说，煮开水。<br>出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。<br>1 老张把水壶放到火上，立等水开。（同步阻塞）老张觉得自己有点傻<br>2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀<del>~</del>的噪音。<br>3 老张把响水壶放到火上，立等水开。（异步阻塞）老张觉得这样傻等意义不大<br>4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）老张觉得自己聪明了。</p><p>所谓同步异步，只是对于水壶而言。普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。所谓阻塞非阻塞，仅仅对于老张而言。</p><p>立等的老张，阻塞；看电视的老张，非阻塞。情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。<br>——来源网络，作者不明。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><ul><li><a href="https://www.jianshu.com/p/30c01fbcd632">Java NIO（一）探索</a></li><li><a href="https://mp.weixin.qq.com/s/17S9Io1dIS_fihfLk5bsAQ">阻塞、非阻塞、多路复用、同步、异步、BIO、NIO、AIO 一锅端</a></li><li><a href="https://dengking.github.io/Linux-OS/Programming/IO/IO-model/IO-multiplexing/What-is-multiplexing/">Multiplexing</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基准测试</title>
    <link href="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL基准测试"><a href="#MySQL基准测试" class="headerlink" title="MySQL基准测试"></a>MySQL基准测试</h1><p>测量系统性能衡量调优方案是否有效。</p><h2 id="一、什么是基准测试"><a href="#一、什么是基准测试" class="headerlink" title="一、什么是基准测试?"></a>一、什么是基准测试?</h2><p><strong>定义:</strong><br>    基准测试是一种测量和评估软件性能指标的活动，用于简历某个时刻的性能基准，以便当系统发生软硬件变化时重新进行基准测试以评估变化对性能的影响。</p><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-22-35-54.png" class=""><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-22-36-39.png" class=""><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-22-37-26.png" class=""><h2 id="二、如何进行基准测试"><a href="#二、如何进行基准测试" class="headerlink" title="二、如何进行基准测试?"></a>二、如何进行基准测试?</h2><p><strong>基准测试的目的:</strong></p><ul><li>建立MySQL服务器的性能基准线<br>确定当前MySQL服务器的运行情况</li><li>模拟比当前系统更高的负载，以找出系统的扩展瓶颈<br>增加数据库并发，观察QPS, TPS变化， 确定并发量与性能最优的关系。</li><li>测试不同的硬件、软件和操作系统配置</li><li>证明新的硬件设备是否配置正确</li></ul><h3 id="1、对整个系统进行基准测试"><a href="#1、对整个系统进行基准测试" class="headerlink" title="1、对整个系统进行基准测试"></a>1、对整个系统进行基准测试</h3><p>从系统入口进行测试(如网站Web前端，手机App前端)</p><p><code>优点</code>: </p><ul><li><p>能够测试整个系统的性能，包括web服务器缓存、数据库等。</p></li><li><p>能够反映出系统中各个组件接口间的性能问题体现真实性能状况。</p></li></ul><p><code>缺点</code>:</p><ul><li>测试设计复杂，消耗时间长。</li></ul><h3 id="2、单独对MySQL进行基准测试"><a href="#2、单独对MySQL进行基准测试" class="headerlink" title="2、单独对MySQL进行基准测试"></a>2、单独对MySQL进行基准测试</h3><p><code>优点</code>:</p><ul><li>测试设计简单，所需消费时间短<br><code>缺点</code>:<ul><li>无法全面了解整个系统的性能基线</li></ul></li></ul><h2 id="三、MySQL基准测试的常见指标"><a href="#三、MySQL基准测试的常见指标" class="headerlink" title="三、MySQL基准测试的常见指标"></a>三、MySQL基准测试的常见指标</h2><ul><li><p>单位时间内所处理的事务数(TPS)</p></li><li><p>单位时间内所处理的查询数(QPS)</p></li><li><p>响应时间</p><p>平均相应时间、最小相应时间、最大相应时间、各时间所占百分比</p></li><li><p>并发量： 同时处理的查询请求的数量</p></li></ul><blockquote><p>Note：并发量不等于连接数</p></blockquote><p>  正在工作中的并发的操作数或同时工作的数量。</p><h2 id="四、基准测试的步骤"><a href="#四、基准测试的步骤" class="headerlink" title="四、基准测试的步骤"></a>四、基准测试的步骤</h2><h3 id="计划和设计基准测试"><a href="#计划和设计基准测试" class="headerlink" title="计划和设计基准测试"></a>计划和设计基准测试</h3><ul><li><p>对整个系统还是对某一组件</p></li><li><p>使用什么样的数据</p></li></ul><p>生产环境的备份数据或日志数据进行回放</p><ul><li>准备基准测试及数据收集脚本<br>Get_Test_info.sh<pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>INTERVAL=5PREFIX=/home/imooc/benchmarks/<span class="hljs-variable">$INTERVAL</span>-sec-statusRUNFILE=/home/imooc/benchmarks/running<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt; <span class="hljs-variable">$RUNFILE</span>MYSQL=/usr/local/mysql/bin/mysql<span class="hljs-variable">$MYSQL</span> -e <span class="hljs-string">&quot;show global variables&quot;</span> &gt;&gt; mysql-variables<span class="hljs-keyword">while</span> <span class="hljs-built_in">test</span> -e <span class="hljs-variable">$RUNFILE</span>; <span class="hljs-keyword">do</span>file=$(<span class="hljs-built_in">date</span> +%F_%I)<span class="hljs-built_in">sleep</span>=$(<span class="hljs-built_in">date</span> +%s.%N | awk <span class="hljs-string">&#x27;&#123;print 5 - ($1 % 5)&#125;&#x27;</span>)<span class="hljs-built_in">sleep</span> <span class="hljs-variable">$sleep</span>ts=<span class="hljs-string">&quot;<span class="hljs-subst">$(date +<span class="hljs-string">&quot;TS %s.%N %F %T&quot;</span>)</span>&quot;</span>loadavg=<span class="hljs-string">&quot;<span class="hljs-subst">$(uptime)</span>&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ts</span> <span class="hljs-variable">$loadavg</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$PREFIX</span>-<span class="hljs-variable">$&#123;file&#125;</span>-status<span class="hljs-variable">$MYSQL</span> -e <span class="hljs-string">&quot;show global status&quot;</span> &gt;&gt; <span class="hljs-variable">$PREFIX</span>-<span class="hljs-variable">$&#123;file&#125;</span>-status &amp;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ts</span> <span class="hljs-variable">$loadavg</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$PREFIX</span>-<span class="hljs-variable">$&#123;file&#125;</span>-innodbstatus<span class="hljs-variable">$MYSQL</span> -e <span class="hljs-string">&quot;show engine innodb status&quot;</span> &gt;&gt; <span class="hljs-variable">$PREFIX</span>-<span class="hljs-variable">$&#123;file&#125;</span>-innodbstatus &amp;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ts</span> <span class="hljs-variable">$loadavg</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$PREFIX</span>-<span class="hljs-variable">$&#123;file&#125;</span>-processlist<span class="hljs-variable">$MYSQL</span> -e <span class="hljs-string">&quot;show full processlist\G&quot;</span> &gt;&gt; <span class="hljs-variable">$PREFIX</span>-<span class="hljs-variable">$&#123;file&#125;</span>-processlist &amp;<span class="hljs-built_in">echo</span> <span class="hljs-variable">$ts</span><span class="hljs-keyword">done</span><span class="hljs-built_in">echo</span> Exiting because <span class="hljs-variable">$RUNFILE</span> does not exists</code></pre></li><li>运行基准测试</li><li>保存及分析基准测试结果<br>analyze.sh<pre><code class="hljs maxima">#!/bin/bashawk &#x27;   BEGIN &#123;     <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;#ts date time load QPS&quot;</span>;     fmt=<span class="hljs-string">&quot; %.2f&quot;</span>;   &#125;   /^TS/ &#123;   ts = substr($<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,index($<span class="hljs-number">2</span>,<span class="hljs-string">&quot;.&quot;</span>)-<span class="hljs-number">1</span>);   <span class="hljs-built_in">load</span> = NF -<span class="hljs-number">2</span>;   <span class="hljs-built_in">diff</span> = ts - prev_ts;   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\n%s %s %s %s&quot;</span>,ts,$<span class="hljs-number">3</span>,$<span class="hljs-number">4</span>,substr($<span class="hljs-built_in">load</span>,<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>($<span class="hljs-built_in">load</span>)-<span class="hljs-number">1</span>);   prev_ts=ts;   &#125;   /Queries/&#123;   <span class="hljs-built_in">printf</span> fmt,($<span class="hljs-number">2</span>-Queries)/<span class="hljs-built_in">diff</span>;   Queries=$<span class="hljs-number">2</span>   &#125;   &#x27; <span class="hljs-string">&quot;$@&quot;</span></code></pre><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-23-01-35.png" class=""></li></ul><h3 id="基准测试中容易忽略的问题"><a href="#基准测试中容易忽略的问题" class="headerlink" title="基准测试中容易忽略的问题"></a>基准测试中容易忽略的问题</h3><ul><li>使用生产环境数据时只使用了部分数据<br>推荐: 使用数据库完全备份来测试.</li><li>在多用户场景中，只做了单用户的测试<br>推荐: 使用多线程并发测试</li><li>在单服务器上测试分布式应用<br>推荐: 使用相同架构进行测试</li><li>反复执行同一查询<br>容易缓存命中，无法反映真实查询性能。</li></ul><h2 id="五、MySQL基准测试工具之mysqlslap"><a href="#五、MySQL基准测试工具之mysqlslap" class="headerlink" title="五、MySQL基准测试工具之mysqlslap"></a>五、MySQL基准测试工具之mysqlslap</h2><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-23-06-41.png" class=""><h3 id="常用的基准测试工具介绍"><a href="#常用的基准测试工具介绍" class="headerlink" title="常用的基准测试工具介绍"></a>常用的基准测试工具介绍</h3><p>MySQL基准测试工具之  <code>mysqlslap</code></p><p><strong>下载及安装:</strong></p><p>MySQL服务器自带的基准测试工具，随MySQL一起安装</p><p><strong>特点:</strong></p><ul><li>可以模拟服务器负载，并输出相关统计信息</li><li>可以指定也可以自动生成查询语句</li></ul><p><strong>常用参数说明:</strong></p><p><code>--auto-generate-sql</code><br>由系统生成SQL脚本进行测试</p><p><code>--auto-generate-sql-add-autoincrement</code><br>在生成的表中增加自增ID</p><p><code>--auto-generate-sql-load-type</code><br>指定测试中使用的查询类型</p><p><code>--auto-generate-sql-write-number</code><br>指定初始化数据时生成的数据量</p><p><code>--concurrency</code><br>指定并发线程的数量</p><p><code>--engine</code><br>指定要测试表的存储引擎，可以用逗号分隔多个存储引擎</p><p><code>--no-drop</code><br>指定不清理测试数据</p><p><code>--iterations</code><br>指定测试运行的次数</p><p><code>--number-of-queries</code><br>指定每一个线程执行的查询数量</p><p><code>--debug-info</code><br>指定输出额外的内存及CPU统计信息</p><p><code>--number-int-cols</code><br>指定测试表中包含INT类型列的数量</p><p><code>--number-char-cols</code><br>指定测试表中包含的varchar类型的数量</p><p><code>--create-schema</code><br>指定了用于执行测试的数据库的名字</p><p><code>--query</code><br>用于指定自定义SQL的脚本</p><p><code>--only-print</code><br>并不运行测试脚本，而是把生成的脚本打印出来</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><pre><code class="hljs routeros">mysqlslap <span class="hljs-attribute">--concurrency</span>=1,50,100,200 <span class="hljs-attribute">--iterations</span>=3 <span class="hljs-attribute">--number-int-cols</span>=5 <span class="hljs-attribute">--number-char-cols</span>=5 --auto-generate-sql --auto-generate-sql-add-autoincrement <span class="hljs-attribute">--engine</span>=myisam,innodb <span class="hljs-attribute">--number-of-queries</span>=10 <span class="hljs-attribute">--create-schema</span>=sbtest</code></pre><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-23-24-15.png" class=""><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-23-25-25.png" class=""><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-23-25-51.png" class=""><pre><code class="hljs routeros">mysqlslap <span class="hljs-attribute">--concurrency</span>=1,50,100,200 <span class="hljs-attribute">--iterations</span>=3 <span class="hljs-attribute">--number-int-cols</span>=5 <span class="hljs-attribute">--number-char-cols</span>=5 --auto-generate-sql --auto-generate-sql-add-autoincrement <span class="hljs-attribute">--engine</span>=myisam,innodb <span class="hljs-attribute">--number-of-queries</span>=10 <span class="hljs-attribute">--create-schema</span>=sbtest --only-<span class="hljs-built_in">print</span> | more</code></pre><img src="/2021/04/22/MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/2021-04-22-23-27-59.png" class=""><pre><code class="hljs routeros">mysqlslap <span class="hljs-attribute">--concurrency</span>=1,50,100,200 <span class="hljs-attribute">--iterations</span>=3 <span class="hljs-attribute">--number-int-cols</span>=5 <span class="hljs-attribute">--number-char-cols</span>=5 --auto-generate-sql --auto-generate-sql-add-autoincrement <span class="hljs-attribute">--engine</span>=myisam,innodb <span class="hljs-attribute">--number-of-queries</span>=10 <span class="hljs-attribute">--create-schema</span>=sbtest --only-<span class="hljs-built_in">print</span> &gt; 1.sql</code></pre><h2 id="六、MySQL基准测试工具之sysbench"><a href="#六、MySQL基准测试工具之sysbench" class="headerlink" title="六、MySQL基准测试工具之sysbench"></a>六、MySQL基准测试工具之sysbench</h2><p>TODO: // 未完待续…</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Java面试,计算机网络面试核心</title>
    <link href="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/"/>
    <url>/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="剑指Java面试，计算机网络面试核心"><a href="#剑指Java面试，计算机网络面试核心" class="headerlink" title="剑指Java面试，计算机网络面试核心"></a>剑指Java面试，计算机网络面试核心</h1><h2 id="OSI开放式互联参考模型"><a href="#OSI开放式互联参考模型" class="headerlink" title="OSI开放式互联参考模型"></a>OSI开放式互联参考模型</h2><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/5e6fa15f0841966011201587.jpeg" class="" title="% {% asset_img 2021-04-05-12-54-16.png"><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>OSI的”实现”: TCP/IP</p><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-12-56-49.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-12-57-24.png" class=""><h2 id="说说TCP的三次握手"><a href="#说说TCP的三次握手" class="headerlink" title="说说TCP的三次握手"></a>说说TCP的三次握手</h2><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-12-59-29.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-00-06.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-04-07.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-05-51.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-11-43.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-13-07.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-14-52.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-15-46.png" class=""><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-16-43.png" class=""><h2 id="谈谈TCP的四次挥手"><a href="#谈谈TCP的四次挥手" class="headerlink" title="谈谈TCP的四次挥手"></a>谈谈TCP的四次挥手</h2><img src="/2021/04/05/%E5%89%91%E6%8C%87Java%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E6%A0%B8%E5%BF%83/2021-04-05-13-22-09.png" class=""><p>参考: <a href="https://juejin.cn/post/6844903913611591688">https://juejin.cn/post/6844903913611591688</a></p>]]></content>
    
    
    <categories>
      
      <category>剑指Java面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Java面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ控制台</title>
    <link href="/2021/03/14/RocketMQ%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    <url>/2021/03/14/RocketMQ%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="RocketMQ控制台"><a href="#RocketMQ控制台" class="headerlink" title="RocketMQ控制台"></a>RocketMQ控制台</h1><p>文档地址: RocketMQ-Console-Ng</p><p><strong>拉取源码：</strong></p><pre><code class="hljs awk">cd /optgit clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>rocketmq-externals.git</code></pre><p><strong>修改配置:</strong></p><pre><code class="hljs awk">cd rocketmq-console<span class="hljs-regexp">/src/m</span>ain/resourcesvi application.properties</code></pre><p><code>配置文件内容:</code><br>将项目使用的rocketmq.config.namesrvAddr配置上去,设置rocketmq.config.isVIPChannel=false</p><pre><code class="hljs routeros">server.contextPath=server.<span class="hljs-attribute">port</span>=8080<span class="hljs-comment">### SSL setting</span><span class="hljs-comment">#server.ssl.key-store=classpath:rmqcngkeystore.jks</span><span class="hljs-comment">#server.ssl.key-store-password=rocketmq</span><span class="hljs-comment">#server.ssl.keyStoreType=PKCS12</span><span class="hljs-comment">#server.ssl.keyAlias=rmqcngkey</span><span class="hljs-comment">#spring.application.index=true</span>spring.application.<span class="hljs-attribute">name</span>=rocketmq-consolespring.http.encoding.<span class="hljs-attribute">charset</span>=UTF-8spring.http.encoding.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span>spring.http.encoding.<span class="hljs-attribute">force</span>=<span class="hljs-literal">true</span>logging.<span class="hljs-attribute">config</span>=classpath:logback.xml<span class="hljs-comment">#if this value is empty,use env value rocketmq.config.namesrvAddr  NAMESRV_ADDR | now, you can set it in ops page.default localhost:9876</span>rocketmq.config.namesrvAddr=<span class="hljs-comment">#if you use rocketmq version &lt; 3.5.8, rocketmq.config.isVIPChannel should be false.default true</span>rocketmq.config.isVIPChannel=<span class="hljs-comment">#rocketmq-console&#x27;s data path:dashboard/monitor</span>rocketmq.config.<span class="hljs-attribute">dataPath</span>=/tmp/rocketmq-console/data<span class="hljs-comment">#set it false if you don&#x27;t want use dashboard.default true</span>rocketmq.config.<span class="hljs-attribute">enableDashBoardCollect</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#set the message track trace topic if you don&#x27;t want use the default one</span>rocketmq.config.msgTrackTopicName=rocketmq.config.<span class="hljs-attribute">ticketKey</span>=ticket<span class="hljs-comment">#Must create userInfo file: $&#123;rocketmq.config.dataPath&#125;/users.properties if the login is required</span>rocketmq.config.<span class="hljs-attribute">loginRequired</span>=<span class="hljs-literal">false</span></code></pre><p><strong>将rocktmq-console打成jar包，得到rocketmq-console-ng-1.0.0.jar:</strong></p><pre><code class="hljs actionscript">mvn clean <span class="hljs-keyword">package</span> -Dmaven.test.skip=<span class="hljs-literal">true</span></code></pre><p><strong>运行jar包，启动项目，这里也可以设置rocketmq.config.namesrvAdd</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar rocketmq-console-ng-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.jar --server.port=<span class="hljs-number">12581</span> --rocketmq.config.namesrvAddr=<span class="hljs-number">182.254.140.224:9876</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>互联网工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>互联网工程</tag>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过docker快速搭建rocketmq环境</title>
    <link href="/2021/03/14/%E9%80%9A%E8%BF%87docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/03/14/%E9%80%9A%E8%BF%87docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BArocketmq%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="通过-docker-快速搭建-rocketmq-环境"><a href="#通过-docker-快速搭建-rocketmq-环境" class="headerlink" title="通过 docker 快速搭建 rocketmq 环境"></a>通过 docker 快速搭建 rocketmq 环境</h1><h2 id="1-安装-Namesrv"><a href="#1-安装-Namesrv" class="headerlink" title="1. 安装 Namesrv"></a>1. 安装 Namesrv</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull rocketmqinc/rocketmq:<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>`</code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">9876</span>:<span class="hljs-number">9876</span> -v &#123;RmHome&#125;<span class="hljs-regexp">/data/</span>namesrv<span class="hljs-regexp">/logs:/</span>root<span class="hljs-regexp">/logs -v &#123;RmHome&#125;/</span>data<span class="hljs-regexp">/namesrv/</span>store:<span class="hljs-regexp">/root/</span>store --name rmqnamesrv -e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=100000000&quot;</span> rocketmqinc/rocketmq:<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span> sh mqnamesrv</code></pre><p><strong>注意事项:</strong><br> {RmHome} 要替换成你的宿主机想保存 MQ 的日志与数据的地方，通过 docker 的 -v 参数使用 volume 功能，把你本地的目录映射到容器内的目录上。否则所有数据都默认保存在容器运行时的内存中，重启之后就又回到最初的起点。</p><p>{RmHome}的目录结构如下:</p><pre><code class="hljs haskell">.├── conf│   └── broker.conf└── <span class="hljs-class"><span class="hljs-keyword">data</span></span>    ├── broker    │   ├── logs    │   └── store    └── namesrv        ├── logs        └── store</code></pre><h2 id="2-安装-broker-服务器"><a href="#2-安装-broker-服务器" class="headerlink" title="2. 安装 broker 服务器"></a>2. 安装 broker 服务器</h2><h3 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>与上步是同一个镜像，如果上步完成，此步无需拉取<br>创建 broker.conf 文件</p><ol><li>在 {RmHome}/conf 目录下创建 broker.conf 文件</li><li>在 broker.conf 中写入如下内容<pre><code class="hljs abnf"><span class="hljs-attribute">brokerClusterName</span> <span class="hljs-operator">=</span> DefaultCluster<span class="hljs-attribute">brokerName</span> <span class="hljs-operator">=</span> broker-a<span class="hljs-attribute">brokerId</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-attribute">deleteWhen</span> <span class="hljs-operator">=</span> <span class="hljs-number">04</span><span class="hljs-attribute">fileReservedTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">48</span><span class="hljs-attribute">brokerRole</span> <span class="hljs-operator">=</span> ASYNC_MASTER<span class="hljs-attribute">flushDiskType</span> <span class="hljs-operator">=</span> ASYNC_FLUSH<span class="hljs-attribute">brokerIP1</span> <span class="hljs-operator">=</span> &#123;本地外网 IP&#125;</code></pre>brokerIP1 要修改成你自己宿主机的 IP</li></ol><h3 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h3><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">10911</span>:<span class="hljs-number">10911</span> -p <span class="hljs-number">10909</span>:<span class="hljs-number">10909</span> -v &#123;RmHome&#125;<span class="hljs-regexp">/data/</span>broker<span class="hljs-regexp">/logs:/</span>root<span class="hljs-regexp">/logs -v &#123;RmHome&#125;/</span>rocketmq<span class="hljs-regexp">/data/</span>broker<span class="hljs-regexp">/store:/</span>root<span class="hljs-regexp">/store -v &#123;RmHome&#125;/</span>conf<span class="hljs-regexp">/broker.conf:/</span>opt<span class="hljs-regexp">/rocketmq-4.4.0/</span>conf<span class="hljs-regexp">/broker.conf --name rmqbroker --link rmqnamesrv:namesrv -e &quot;NAMESRV_ADDR=namesrv:9876&quot; -e &quot;MAX_POSSIBLE_HEAP=200000000&quot; rocketmqinc/</span>rocketmq:<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span> sh mqbroker -c <span class="hljs-regexp">/opt/</span>rocketmq-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/conf/</span>broker.conf</code></pre><pre><code class="hljs gradle">docker run -u root -d -p <span class="hljs-number">9876</span>:<span class="hljs-number">9876</span> -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>rocketmq<span class="hljs-regexp">/data/</span>namesrv<span class="hljs-regexp">/logs:/</span>root<span class="hljs-regexp">/logs -v /U</span>sers<span class="hljs-regexp">/admin/</span>Documents<span class="hljs-regexp">/software/</span>docker_volume_mapping<span class="hljs-regexp">/rocketmq/</span>data<span class="hljs-regexp">/namesrv/</span>store:<span class="hljs-regexp">/root/</span>store -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>rocketmq<span class="hljs-regexp">/conf/</span>broker.conf:<span class="hljs-regexp">/opt/</span>rocketmq-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/conf/</span>broker.conf --name rmqnamesrv -e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=100000000&quot;</span> --privileged=<span class="hljs-keyword">true</span> rocketmqinc/rocketmq:<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span> sh mqnamesrv</code></pre><p>笔者在/User/admin/Documents/software/docker_volume_mapping/rocketmq/data/conf/broker.conf的内容如下:</p><pre><code class="hljs ini"><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><span class="hljs-comment">#</span><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment">#</span><span class="hljs-comment">#  Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><span class="hljs-comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment">#  See the License for the specific language governing permissions and</span><span class="hljs-comment">#  limitations under the License.</span><span class="hljs-comment"># 所属集群名字</span><span class="hljs-attr">brokerClusterName</span>=DefaultCluster<span class="hljs-comment"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span><span class="hljs-comment"># 在 broker-b.properties 使用: broker-b</span><span class="hljs-attr">brokerName</span>=broker-a<span class="hljs-comment"># 0 表示 Master，&gt; 0 表示 Slave</span><span class="hljs-attr">brokerId</span>=<span class="hljs-number">0</span><span class="hljs-comment"># nameServer地址，分号分割</span><span class="hljs-comment"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><span class="hljs-comment"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</span><span class="hljs-comment"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span><span class="hljs-comment"># 此处为笔者的外网IP</span> <span class="hljs-attr">brokerIP1</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.2</span><span class="hljs-comment"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><span class="hljs-attr">defaultTopicQueueNums</span>=<span class="hljs-number">4</span><span class="hljs-comment"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false</span><span class="hljs-attr">autoCreateTopicEnable</span>=<span class="hljs-literal">true</span><span class="hljs-comment"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><span class="hljs-attr">autoCreateSubscriptionGroup</span>=<span class="hljs-literal">true</span><span class="hljs-comment"># Broker 对外服务的监听端口</span><span class="hljs-attr">listenPort</span>=<span class="hljs-number">10911</span><span class="hljs-comment"># 删除文件时间点，默认凌晨4点</span><span class="hljs-attr">deleteWhen</span>=<span class="hljs-number">04</span><span class="hljs-comment"># 文件保留时间，默认48小时</span><span class="hljs-attr">fileReservedTime</span>=<span class="hljs-number">120</span><span class="hljs-comment"># commitLog 每个文件的大小默认1G</span><span class="hljs-attr">mapedFileSizeCommitLog</span>=<span class="hljs-number">1073741824</span><span class="hljs-comment"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span><span class="hljs-attr">mapedFileSizeConsumeQueue</span>=<span class="hljs-number">300000</span><span class="hljs-comment"># destroyMapedFileIntervalForcibly=120000</span><span class="hljs-comment"># redeleteHangedFileInterval=120000</span><span class="hljs-comment"># 检测物理文件磁盘空间</span><span class="hljs-attr">diskMaxUsedSpaceRatio</span>=<span class="hljs-number">88</span><span class="hljs-comment"># 存储路径</span><span class="hljs-comment"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span><span class="hljs-comment"># commitLog 存储路径</span><span class="hljs-comment"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span><span class="hljs-comment"># 消费队列存储</span><span class="hljs-comment"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span><span class="hljs-comment"># 消息索引存储路径</span><span class="hljs-comment"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span><span class="hljs-comment"># checkpoint 文件存储路径</span><span class="hljs-comment"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span><span class="hljs-comment"># abort 文件存储路径</span><span class="hljs-comment"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span><span class="hljs-comment"># 限制的消息大小</span><span class="hljs-attr">maxMessageSize</span>=<span class="hljs-number">65536</span><span class="hljs-comment"># flushCommitLogLeastPages=4</span><span class="hljs-comment"># flushConsumeQueueLeastPages=2</span><span class="hljs-comment"># flushCommitLogThoroughInterval=10000</span><span class="hljs-comment"># flushConsumeQueueThoroughInterval=60000</span><span class="hljs-comment"># Broker 的角色</span><span class="hljs-comment"># - ASYNC_MASTER 异步复制Master</span><span class="hljs-comment"># - SYNC_MASTER 同步双写Master</span><span class="hljs-comment"># - SLAVE</span><span class="hljs-attr">brokerRole</span>=ASYNC_MASTER<span class="hljs-comment"># 刷盘方式</span><span class="hljs-comment"># - ASYNC_FLUSH 异步刷盘</span><span class="hljs-comment"># - SYNC_FLUSH 同步刷盘</span><span class="hljs-attr">flushDiskType</span>=ASYNC_FLUSH<span class="hljs-comment"># 发消息线程池数量</span><span class="hljs-comment"># sendMessageThreadPoolNums=128</span><span class="hljs-comment"># 拉消息线程池数量</span><span class="hljs-comment"># pullMessageThreadPoolNums=128</span></code></pre><h3 id="启动broker服务"><a href="#启动broker服务" class="headerlink" title="启动broker服务"></a>启动broker服务</h3><pre><code class="hljs gradle">docker run -u root -d -p <span class="hljs-number">10911</span>:<span class="hljs-number">10911</span> -p <span class="hljs-number">10909</span>:<span class="hljs-number">10909</span> -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>rocketmq<span class="hljs-regexp">/data/</span>broker<span class="hljs-regexp">/logs:/</span>root<span class="hljs-regexp">/logs -v /U</span>sers<span class="hljs-regexp">/admin/</span>Documents<span class="hljs-regexp">/software/</span>docker_volume_mapping<span class="hljs-regexp">/rocketmq/</span>data<span class="hljs-regexp">/broker/</span>store:<span class="hljs-regexp">/root/</span>store -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>rocketmq<span class="hljs-regexp">/conf/</span>broker.conf:<span class="hljs-regexp">/opt/</span>rocketmq-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/conf/</span>broker.conf --name rmqbroker --privileged=<span class="hljs-keyword">true</span> --link rmqnamesrv:namesrv -e <span class="hljs-string">&quot;NAMESRV_ADDR=namesrv:9876&quot;</span> -e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=200000000&quot;</span> rocketmqinc<span class="hljs-regexp">/rocketmq:4.4.0 sh mqbroker -c /</span>opt<span class="hljs-regexp">/rocketmq-4.4.0/</span>conf/broker.conf</code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意: {RmHome} 同上步一样，不再缀述。broker.conf 的文件中的 brokerIP1 是你的 broker 注册到 Namesrv 中的 ip。如果不指定他会默认取容器中的内网 IP。除非你的应用也同时部署在网络相通的容器中，本地或容器外就无法连接 broker 服务了，进而导致类似 RemotingTooMuchRequestException 等各种异常。</p><h2 id="3-安装-rocketmq-控制台"><a href="#3-安装-rocketmq-控制台" class="headerlink" title="3. 安装 rocketmq 控制台"></a>3. 安装 rocketmq 控制台</h2><h2 id="拉取镜像-2"><a href="#拉取镜像-2" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><pre><code class="hljs arcade">docker pull pangliang/rocketmq-<span class="hljs-built_in">console</span>-ng</code></pre><h2 id="启动容器-2"><a href="#启动容器-2" class="headerlink" title="启动容器"></a>启动容器</h2><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=&#123;本地外网 IP&#125;:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span> -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -t pangliang/rocketmq-console-ng</code></pre><p>笔者的命令:</p><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.1.2:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span> -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -t pangliang/rocketmq-console-ng</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span> -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -t styletang/rocketmq-console-ng</code></pre><pre><code class="hljs armasm">注意：这里因为我们用了docker，所以namesrv.addr需要换成docker容器的<span class="hljs-built_in">ip</span></code></pre><pre><code class="hljs armasm">查看容器中rmqnamesrv的<span class="hljs-built_in">ip</span></code></pre><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it rmqnamesrv bash<span class="hljs-built_in">cat</span> /etc/hosts</code></pre><pre><code class="hljs armasm">替换 namesrv.<span class="hljs-keyword">addr</span> 后，启动控制台，访问 &#123;你的<span class="hljs-built_in">IP</span>&#125;:<span class="hljs-number">8080</span></code></pre><p><strong>笔者自己的namesr启动命令备份</strong></p><pre><code class="hljs awk">docker run -u root -d -p <span class="hljs-number">9876</span>:<span class="hljs-number">9876</span> -v <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/software/</span>docker_mapping<span class="hljs-regexp">/rocketmq_mapping/</span>data<span class="hljs-regexp">/namesrv/</span>logs:<span class="hljs-regexp">/root/</span>logs -v <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/software/</span>docker_mapping<span class="hljs-regexp">/rocketmq_mapping/</span>data<span class="hljs-regexp">/namesrv/</span>store:<span class="hljs-regexp">/root/</span>store -v <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/software/</span>docker_mapping<span class="hljs-regexp">/rocketmq_mapping/</span>conf<span class="hljs-regexp">/broker.conf:/</span>opt<span class="hljs-regexp">/rocketmq-4.4.0/</span>conf<span class="hljs-regexp">/broker.conf --name rmqnamesrv -e &quot;MAX_POSSIBLE_HEAP=100000000&quot; --privileged=true rocketmqinc/</span>rocketmq:<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span> sh mqnamesrv</code></pre><p><strong>笔者自己的Docker启动Broker命令备份</strong>:</p><pre><code class="hljs awk">docker run -u root -d -p <span class="hljs-number">10911</span>:<span class="hljs-number">10911</span> -p <span class="hljs-number">10909</span>:<span class="hljs-number">10909</span> -v <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/software/</span>docker_mapping<span class="hljs-regexp">/rocketmq_mapping/</span>data<span class="hljs-regexp">/broker/</span>logs:<span class="hljs-regexp">/root/</span>logs -v <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/software/</span>docker_mapping<span class="hljs-regexp">/rocketmq_mapping/</span>data<span class="hljs-regexp">/broker/</span>store:<span class="hljs-regexp">/root/</span>store -v <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/software/</span>docker_mapping<span class="hljs-regexp">/rocketmq_mapping/</span>conf<span class="hljs-regexp">/broker.conf:/</span>opt<span class="hljs-regexp">/rocketmq-4.4.0/</span>conf<span class="hljs-regexp">/broker.conf --name rmqbroker --privileged=true --link rmqnamesrv:namesrv -e &quot;NAMESRV_ADDR=namesrv:9876&quot; -e &quot;MAX_POSSIBLE_HEAP=200000000&quot; rocketmqinc/</span>rocketmq:<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span> sh mqbroker -c <span class="hljs-regexp">/opt/</span>rocketmq-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/conf/</span>broker.conf</code></pre><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">10911</span>:<span class="hljs-number">10911</span> -p <span class="hljs-number">10909</span>:<span class="hljs-number">10909</span> -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>rocketmq<span class="hljs-regexp">/data/</span>broker<span class="hljs-regexp">/logs:/</span>root<span class="hljs-regexp">/logs -v /</span>Users<span class="hljs-regexp">/admin/</span>Documents<span class="hljs-regexp">/software/</span>docker_volume_mapping<span class="hljs-regexp">/rocketmq/</span>data<span class="hljs-regexp">/broker/</span>store:<span class="hljs-regexp">/root/</span>store -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>rocketmq<span class="hljs-regexp">/conf/</span>broker.conf:<span class="hljs-regexp">/opt/</span>rocketmq-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/conf/</span>broker.conf --name rmqbroker --link rmqnamesrv:namesrv -e <span class="hljs-string">&quot;NAMESRV_ADDR=namesrv:9876&quot;</span> -e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=200000000&quot;</span> rocketmqinc<span class="hljs-regexp">/rocketmq:4.4.0 sh mqbroker -c /</span>opt<span class="hljs-regexp">/rocketmq-4.4.0/</span>conf/broker.conf</code></pre><pre><code class="hljs crmsh">docker exec --<span class="hljs-keyword">user</span> <span class="hljs-title">root</span> -it  a5fe17d55f1c3261b57b7689884d6ae51fd64b88b4cd3fc23c84caaffa19feab /bin/bash</code></pre>]]></content>
    
    
    <categories>
      
      <category>互联网工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>互联网工程</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装homebrew-cask</title>
    <link href="/2021/03/07/Mac%E5%AE%89%E8%A3%85homebrew-cask/"/>
    <url>/2021/03/07/Mac%E5%AE%89%E8%A3%85homebrew-cask/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Mac安装homebrew-cask"><a href="#Mac安装homebrew-cask" class="headerlink" title="Mac安装homebrew-cask"></a>Mac安装homebrew-cask</h1><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><h3 id="方式一-手动clone"><a href="#方式一-手动clone" class="headerlink" title="方式一:手动clone"></a>方式一:手动clone</h3><p>1.进入homebrew目录：</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/&quot;</span></code></pre><p>2.开始clone</p><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/homebrew-cask.git /u</span>sr<span class="hljs-regexp">/local/</span>Homebrew<span class="hljs-regexp">/Library/</span>Taps<span class="hljs-regexp">/homebrew/</span>homebrew-cask</code></pre><h3 id="方法二：利用官网文件安装"><a href="#方法二：利用官网文件安装" class="headerlink" title="方法二：利用官网文件安装"></a>方法二：利用官网文件安装</h3><p>从官网上下载homebrew-cask-master.zip压缩包，解压后将文件夹名改为homebrew-cask<br>然后将其拷贝放入/usr/local/Homebrew/Library/Taps/homebrew中，与homebrew-core文件夹同级<br>至此完成homebrew-cask安装</p><h3 id="方法三：使用以下命令进行安装"><a href="#方法三：使用以下命令进行安装" class="headerlink" title="方法三：使用以下命令进行安装"></a>方法三：使用以下命令进行安装</h3><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>cask</code></pre><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><pre><code class="hljs dsconfig"><span class="hljs-string">cd</span> <span class="hljs-string">&quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot;</span><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">ustc</span>.<span class="hljs-string">edu</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">homebrew-cask</span>.<span class="hljs-string">git</span><span class="hljs-string">git</span> -<span class="hljs-string">C</span> <span class="hljs-string">&quot;$(brew --repo homebrew/cask)&quot;</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">ustc</span>.<span class="hljs-string">edu</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">homebrew-cask</span>.<span class="hljs-string">git</span></code></pre><pre><code class="hljs stata"><span class="hljs-keyword">cd</span>brew <span class="hljs-keyword">update</span></code></pre><pre><code class="hljs mipsasm"><span class="hljs-comment"># 运行HomeBrew医生，查看警告文件</span><span class="hljs-keyword">brew </span>doctor</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.csdn.net/m0_46197393/article/details/106752367">Mac快速安装HomeBrew和HomeBrew-Cask方法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python将html转成pdf</title>
    <link href="/2021/03/07/python%E5%B0%86html%E8%BD%AC%E6%88%90pdf/"/>
    <url>/2021/03/07/python%E5%B0%86html%E8%BD%AC%E6%88%90pdf/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="python将html转成pdf"><a href="#python将html转成pdf" class="headerlink" title="python将html转成pdf"></a>python将html转成pdf</h1><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.cnblogs.com/taceywong/p/5643978.html">www.cnblogs.com</a></p></blockquote><hr><p>@Modifer: DANTE FUNG<br>@Date: 2021-03-08 00:00:58</p><hr><p>主要使用的是 wkhtmltopdf 的 Python 封装——pdfkit</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>1. Install python-pdfkit</strong>:</p><pre><code class="hljs cmake">$ pip <span class="hljs-keyword">install</span> pdfkit</code></pre><p><strong>2. Install wkhtmltopdf</strong>:</p><ul><li>Debian/Ubuntu:</li></ul><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> install wkhtmltopdf</code></pre><ul><li>Redhat/CentOS</li></ul><pre><code class="hljs angelscript">sudo yum <span class="hljs-built_in">int</span>sall wkhtmltopdf</code></pre><ul><li>MacOS</li></ul><pre><code class="hljs awk">brew install Caskroom<span class="hljs-regexp">/cask/</span>wkhtmltopdf</code></pre><blockquote><p>Note: 这种安装方式比较慢.</p></blockquote><p>直接去官网下载安装包安装即可。<br> Download the disk image from <a href="http://wkhtmltopdf.org/downloads.html">wkhtmltopdf downloads list</a> and copy the file to a directory where PDFKit can find it. Homebrew is also available, run brew install Caskroom/cask/wkhtmltopdf.</p><img src="/2021/03/07/python%E5%B0%86html%E8%BD%AC%E6%88%90pdf/2021-03-07-23-59-07.png" class=""><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一个简单的例子:</p><pre><code class="hljs reasonml">import pdfkitpdfkit.from<span class="hljs-constructor">_url(&#x27;<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">google</span>.<span class="hljs-params">com</span>&#x27;, &#x27;<span class="hljs-params">out</span>.<span class="hljs-params">pdf</span>&#x27;)</span>pdfkit.from<span class="hljs-constructor">_file(&#x27;<span class="hljs-params">test</span>.<span class="hljs-params">html</span>&#x27;, &#x27;<span class="hljs-params">out</span>.<span class="hljs-params">pdf</span>&#x27;)</span>pdfkit.from<span class="hljs-constructor">_string(&#x27;Hello!&#x27;, &#x27;<span class="hljs-params">out</span>.<span class="hljs-params">pdf</span>&#x27;)</span></code></pre><p>你也可以传递一个 url 或者文件名列表:</p><pre><code class="hljs reasonml">pdfkit.from<span class="hljs-constructor">_url([&#x27;<span class="hljs-params">google</span>.<span class="hljs-params">com</span>&#x27;, &#x27;<span class="hljs-params">yandex</span>.<span class="hljs-params">ru</span>&#x27;, &#x27;<span class="hljs-params">engadget</span>.<span class="hljs-params">com</span>&#x27;], &#x27;<span class="hljs-params">out</span>.<span class="hljs-params">pdf</span>&#x27;)</span>pdfkit.from<span class="hljs-constructor">_file([&#x27;<span class="hljs-params">file1</span>.<span class="hljs-params">html</span>&#x27;, &#x27;<span class="hljs-params">file2</span>.<span class="hljs-params">html</span>&#x27;], &#x27;<span class="hljs-params">out</span>.<span class="hljs-params">pdf</span>&#x27;)</span></code></pre><p>也可以传递一个打开的文件:</p><pre><code class="hljs reasonml"><span class="hljs-keyword">with</span> <span class="hljs-keyword">open</span>(&#x27;file.html&#x27;) <span class="hljs-keyword">as</span> f:        pdfkit.from<span class="hljs-constructor">_file(<span class="hljs-params">f</span>, &#x27;<span class="hljs-params">out</span>.<span class="hljs-params">pdf</span>&#x27;)</span></code></pre><p>如果你想对生成的 PDF 作进一步处理， 你可以将其读取到一个变量中:</p><pre><code class="hljs ini"><span class="hljs-comment"># 设置输出文件为 False，将结果赋给一个变量</span>    <span class="hljs-attr">pdf</span> = pdfkit.from_url(<span class="hljs-string">&#x27;http://google.com&#x27;</span>, <span class="hljs-literal">False</span>)</code></pre><p>你可以制定所有的 wkhtmltopdf <code>选项 &lt;http://wkhtmltopdf.org/usage/wkhtmltopdf.txt&gt;</code>. 你可以移除选项名字前面的 ‘–’ . 如果选项没有值, 使用 <code>None, False</code>or <code>*</code> 作为字典值:</p><pre><code class="hljs pgsql"><span class="hljs-keyword">options</span> = &#123;    <span class="hljs-string">&#x27;page-size&#x27;</span>: <span class="hljs-string">&#x27;Letter&#x27;</span>,    <span class="hljs-string">&#x27;margin-top&#x27;</span>: <span class="hljs-string">&#x27;0.75in&#x27;</span>,    <span class="hljs-string">&#x27;margin-right&#x27;</span>: <span class="hljs-string">&#x27;0.75in&#x27;</span>,    <span class="hljs-string">&#x27;margin-bottom&#x27;</span>: <span class="hljs-string">&#x27;0.75in&#x27;</span>,    <span class="hljs-string">&#x27;margin-left&#x27;</span>: <span class="hljs-string">&#x27;0.75in&#x27;</span>,    <span class="hljs-string">&#x27;encoding&#x27;</span>: &quot;UTF-8&quot;,    <span class="hljs-string">&#x27;no-outline&#x27;</span>: <span class="hljs-keyword">None</span>&#125;pdfkit.from_url(<span class="hljs-string">&#x27;http://google.com&#x27;</span>, <span class="hljs-string">&#x27;out.pdf&#x27;</span>, <span class="hljs-keyword">options</span>=<span class="hljs-keyword">options</span>)</code></pre><p>默认情况下, PDFKit 将会显示所有的 <code>wkhtmltopdf</code> 输出. 如果你不想看到这些信息，你需要传递一个 <code>quiet</code> 选项:</p><pre><code class="hljs gams"><span class="hljs-keyword">options</span> = &#123;        <span class="hljs-string">&#x27;quiet&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>        &#125;    pdfkit.from_url(<span class="hljs-string">&#x27;google.com&#x27;</span>, <span class="hljs-string">&#x27;out.pdf&#x27;</span>, <span class="hljs-keyword">options</span>=<span class="hljs-keyword">options</span>)</code></pre><p>由于 wkhtmltopdf 的命令语法 , <strong>TOC</strong> 和 <strong>Cover</strong> 选项必须分开指定:</p><pre><code class="hljs routeros">toc = &#123;    <span class="hljs-string">&#x27;xsl-style-sheet&#x27;</span>: <span class="hljs-string">&#x27;toc.xsl&#x27;</span>&#125;cover = <span class="hljs-string">&#x27;cover.html&#x27;</span>pdfkit.from_file(<span class="hljs-string">&#x27;file.html&#x27;</span>, <span class="hljs-attribute">options</span>=options, <span class="hljs-attribute">toc</span>=toc, <span class="hljs-attribute">cover</span>=cover)</code></pre><p>当你转换文件、或字符串的时候，你可以通过 <em>css</em> 选项指定扩展的 CSS 文件。</p><pre><code class="hljs reasonml"># 单个 CSS 文件    css = &#x27;example.css&#x27;    pdfkit.from<span class="hljs-constructor">_file(&#x27;<span class="hljs-params">file</span>.<span class="hljs-params">html</span>&#x27;, <span class="hljs-params">options</span>=<span class="hljs-params">options</span>, <span class="hljs-params">css</span>=<span class="hljs-params">css</span>)</span>    # Multiple CSS files    css = <span class="hljs-literal">[&#x27;<span class="hljs-identifier">example</span>.<span class="hljs-identifier">css</span>&#x27;, &#x27;<span class="hljs-identifier">example2</span>.<span class="hljs-identifier">css</span>&#x27;]</span>    pdfkit.from<span class="hljs-constructor">_file(&#x27;<span class="hljs-params">file</span>.<span class="hljs-params">html</span>&#x27;, <span class="hljs-params">options</span>=<span class="hljs-params">options</span>, <span class="hljs-params">css</span>=<span class="hljs-params">css</span>)</span></code></pre><p>你也可以通过你的 HTML 中的 meta tags 传递任意选项：</p><pre><code class="hljs awk">body = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    &lt;html&gt;</span><span class="hljs-string">      &lt;head&gt;</span><span class="hljs-string">        &lt;meta /&gt;</span><span class="hljs-string">        &lt;meta /&gt;</span><span class="hljs-string">      &lt;/head&gt;</span><span class="hljs-string">      Hello World!</span><span class="hljs-string">      &lt;/html&gt;</span><span class="hljs-string">    &quot;&quot;&quot;</span>pdfkit.from_string(body, <span class="hljs-string">&#x27;out.pdf&#x27;</span>) <span class="hljs-comment">#with --page-size=Legal and --orientation=Landscape</span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>每个 API 调用都有一个可选的参数。这应该是 <code>pdfkit.configuration()</code>API 调用的一个实例. 采用 configuration 选项作为初始化参数。可用的选项有:</p><ul><li><code>wkhtmltopdf</code> ——<code>wkhtmltopdf</code> 二进制文件所在的位置。默认情况下 <code>pdfkit</code> 会尝试使用 <code>which</code> (在类 UNIX 系统中) 或 <code>where</code> (在 Windows 系统中) 来判断.</li><li><code>meta_tag_prefix</code> – <code>pdfkit</code> 的前缀指定 meta tags（元标签） - 默认情况是 <code>pdfkit-</code></li></ul><p>示例 ：针对 <code>wkhtmltopdf</code> 不在系统路径中（不在<code>$PATH</code> 里面）:</p><pre><code class="hljs reasonml">config = pdfkit.configuration(wkhtmltopdf=&#x27;/opt/bin/wkhtmltopdf&#x27;))    pdfkit.from<span class="hljs-constructor">_string(<span class="hljs-params">html_string</span>, <span class="hljs-params">output_file</span>, <span class="hljs-params">configuration</span>=<span class="hljs-params">config</span>)</span></code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><code>IOError: &#39;No wkhtmltopdf executable found&#39;</code>:</li></ul><p>确保 wkhtmltopdf 在你的系统路径中（<code>$PATH</code>）， 会通过 configuration 进行了配置 (详情看上文描述)。 在 Windows 系统中使用 <code>where wkhtmltopdf</code> 命令 或 在 linux 系统中使用 <code>which wkhtmltopdf</code> 会返回 wkhtmltopdf 二进制可执行文件所在的确切位置.</p><ul><li><p><code>IOError: &#39;Command Failed&#39;</code></p><p>如果出现这个错误意味着 PDFKit 不能处理一个输入。你可以尝试直接在错误信息后面直接运行一个命令来查看是什么导致了这个错误 （某些版本的 wkhtmltopdf 会因为段错误导致处理失败）</p></li><li><p>正常生成，但是出现中文乱码</p></li></ul><p>确保两项：<br>1）、你的系统中有中文字体<br>2）、在 html 中加入 <strong><meta charset="UTF-8"></strong></p><p>下面是我随便写的一个 HTML 表格：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>Item....<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>衣服<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>$241.10<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>化妆品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>$30.00<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>食物<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>$730.40<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>tOTAL<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>$1001.50<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>下面是生成的 PDF 截图  </p><img src="/2021/03/07/python%E5%B0%86html%E8%BD%AC%E6%88%90pdf/673170-20160705155800186-1254560177.png" class="">]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装Homebrew</title>
    <link href="/2021/03/07/Mac%E5%AE%89%E8%A3%85Homebrew/"/>
    <url>/2021/03/07/Mac%E5%AE%89%E8%A3%85Homebrew/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.cnblogs.com/haojile/p/13193805.html">www.cnblogs.com</a></p></blockquote><h1 id="Mac-安装-Homebrew"><a href="#Mac-安装-Homebrew" class="headerlink" title="Mac 安装 Homebrew"></a>Mac 安装 Homebrew</h1><h2 id="国内安装-可用-："><a href="#国内安装-可用-：" class="headerlink" title="国内安装 (可用)："></a>国内安装 (可用)：</h2><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span></code></pre><p>以上方法来自：<a href="https://zhuanlan.zhihu.com/p/111014448">https://zhuanlan.zhihu.com/p/111014448</a></p><p>如果采用了上面改的方法，就不用看下面的官方方法了。官方的方法可能需要翻墙或者安装完成之后的权限问题。</p><h2 id="官方安装方法-1："><a href="#官方安装方法-1：" class="headerlink" title="官方安装方法 1："></a>官方安装方法 1：</h2><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span></code></pre><p>运行之后：</p><pre><code class="hljs routeros">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span>curl: (7) Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> raw.githubusercontent.com<span class="hljs-built_in"> port </span>443:<span class="hljs-built_in"> Connection </span>refused</code></pre><p>浏览器访问 <a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh">https://raw.githubusercontent.com/Homebrew/install/master/install.sh</a> 也访问不了，需要翻墙，暂时不具备翻墙条件，只能换个方式。</p><h2 id="官方安装方法-2（未测试）"><a href="#官方安装方法-2（未测试）" class="headerlink" title="官方安装方法 2（未测试）"></a>官方安装方法 2（未测试）</h2><blockquote><p>参考：<a href="https://docs.brew.sh/Installation">https://docs.brew.sh/Installation</a></p></blockquote><pre><code class="hljs awk"><span class="hljs-comment"># 安装在/usr/local/目录</span>cd <span class="hljs-regexp">/usr/</span>local/<span class="hljs-comment"># 官方命令行，安装在 homebrew 目录</span>sudo mkdir homebrew &amp;&amp; curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Homebrew/</span>brew<span class="hljs-regexp">/tarball/m</span>aster | tar xz --strip <span class="hljs-number">1</span> -C homebrew</code></pre><p><a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh">HomeBrew自动安装脚本源码</a></p><pre><code class="hljs bash"><span class="hljs-comment">#HomeBrew自动安装脚本</span><span class="hljs-comment">#cunkai.wang@foxmail.com</span><span class="hljs-comment">#获取硬件信息</span>UNAME_MACHINE=<span class="hljs-string">&quot;<span class="hljs-subst">$(uname -m)</span>&quot;</span><span class="hljs-comment">#在X86电脑上测试arm电脑</span><span class="hljs-comment"># UNAME_MACHINE=&quot;arm64&quot;</span><span class="hljs-comment"># 判断是Linux还是Mac os</span>OS=<span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$OS</span>&quot;</span> == <span class="hljs-string">&quot;Linux&quot;</span> ]]; <span class="hljs-keyword">then</span>  HOMEBREW_ON_LINUX=1<span class="hljs-keyword">elif</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$OS</span>&quot;</span> != <span class="hljs-string">&quot;Darwin&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Homebrew 只运行在 Mac OS 或 Linux.&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># 字符串染色程序</span><span class="hljs-keyword">if</span> [[ -t 1 ]]; <span class="hljs-keyword">then</span>  <span class="hljs-function"><span class="hljs-title">tty_escape</span></span>() &#123; <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[%sm&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>; &#125;<span class="hljs-keyword">else</span>  <span class="hljs-function"><span class="hljs-title">tty_escape</span></span>() &#123; :; &#125;<span class="hljs-keyword">fi</span><span class="hljs-function"><span class="hljs-title">tty_universal</span></span>() &#123; tty_escape <span class="hljs-string">&quot;0;<span class="hljs-variable">$1</span>&quot;</span>; &#125; <span class="hljs-comment">#正常显示</span><span class="hljs-function"><span class="hljs-title">tty_mkbold</span></span>() &#123; tty_escape <span class="hljs-string">&quot;1;<span class="hljs-variable">$1</span>&quot;</span>; &#125; <span class="hljs-comment">#设置高亮</span>tty_underline=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_escape <span class="hljs-string">&quot;4;39&quot;</span>)</span>&quot;</span> <span class="hljs-comment">#下划线</span>tty_blue=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_universal 34)</span>&quot;</span> <span class="hljs-comment">#蓝色</span>tty_red=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_universal 31)</span>&quot;</span> <span class="hljs-comment">#红色</span>tty_green=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_universal 32)</span>&quot;</span> <span class="hljs-comment">#绿色</span>tty_yellow=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_universal 33)</span>&quot;</span> <span class="hljs-comment">#黄色</span>tty_bold=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_universal 39)</span>&quot;</span> <span class="hljs-comment">#加黑</span>tty_cyan=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_universal 36)</span>&quot;</span> <span class="hljs-comment">#青色</span>tty_reset=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_escape 0)</span>&quot;</span> <span class="hljs-comment">#去除颜色</span><span class="hljs-comment">#用户输入极速安装speed，git克隆只取最近新版本</span><span class="hljs-comment">#但是update会出错，提示需要下载全部数据</span>GIT_SPEED=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$0</span> == <span class="hljs-string">&quot;speed&quot;</span> ]]; <span class="hljs-keyword">then</span>  GIT_SPEED=<span class="hljs-string">&quot;--depth=1&quot;</span><span class="hljs-keyword">else</span>  <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span>; <span class="hljs-keyword">do</span>      <span class="hljs-built_in">echo</span> <span class="hljs-variable">$dir</span>      <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$dir</span> == <span class="hljs-string">&quot;speed&quot;</span> ]]; <span class="hljs-keyword">then</span>          GIT_SPEED=<span class="hljs-string">&quot;--depth=1&quot;</span>      <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">done</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$GIT_SPEED</span> != <span class="hljs-string">&quot;&quot;</span> ]]; <span class="hljs-keyword">then</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span></span><span class="hljs-string">              检测到参数speed，只拉取最新数据，可以正常install使用！</span><span class="hljs-string">          但是以后brew update的时候会报错，运行报错提示的两句命令即可修复</span><span class="hljs-string">          <span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#获取前面两个.的数据</span><span class="hljs-function"><span class="hljs-title">major_minor</span></span>() &#123;  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%%.*&#125;</span>.<span class="hljs-subst">$(x=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span>; echo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;x%%.*&#125;</span>&quot;</span>)</span>&quot;</span>&#125;<span class="hljs-comment">#设置一些平台地址</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-comment">#Mac</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$UNAME_MACHINE</span>&quot;</span> == <span class="hljs-string">&quot;arm64&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-comment">#M1</span>    HOMEBREW_PREFIX=<span class="hljs-string">&quot;/opt/homebrew&quot;</span>    HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>    <span class="hljs-keyword">else</span>    <span class="hljs-comment">#Inter</span>    HOMEBREW_PREFIX=<span class="hljs-string">&quot;/usr/local&quot;</span>    HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew&quot;</span>    <span class="hljs-keyword">fi</span>    HOMEBREW_CACHE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/Library/Caches/Homebrew&quot;</span>    HOMEBREW_LOGS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/Library/Logs/Homebrew&quot;</span>    STAT=<span class="hljs-string">&quot;stat -f&quot;</span>    CHOWN=<span class="hljs-string">&quot;/usr/sbin/chown&quot;</span>    CHGRP=<span class="hljs-string">&quot;/usr/bin/chgrp&quot;</span>    GROUP=<span class="hljs-string">&quot;admin&quot;</span>    TOUCH=<span class="hljs-string">&quot;/usr/bin/touch&quot;</span>    <span class="hljs-comment">#获取Mac系统版本</span>    macos_version=<span class="hljs-string">&quot;<span class="hljs-subst">$(major_minor <span class="hljs-string">&quot;<span class="hljs-subst">$(/usr/bin/sw_vers -productVersion)</span>&quot;</span>)</span>&quot;</span><span class="hljs-keyword">else</span>  <span class="hljs-comment">#Linux</span>  UNAME_MACHINE=<span class="hljs-string">&quot;<span class="hljs-subst">$(uname -m)</span>&quot;</span>  HOMEBREW_PREFIX=<span class="hljs-string">&quot;/home/linuxbrew/.linuxbrew&quot;</span>  HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew&quot;</span>  HOMEBREW_CACHE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.cache/Homebrew&quot;</span>  HOMEBREW_LOGS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.logs/Homebrew&quot;</span>  STAT=<span class="hljs-string">&quot;stat --printf&quot;</span>  CHOWN=<span class="hljs-string">&quot;/bin/chown&quot;</span>  CHGRP=<span class="hljs-string">&quot;/bin/chgrp&quot;</span>  GROUP=<span class="hljs-string">&quot;<span class="hljs-subst">$(id -gn)</span>&quot;</span>  TOUCH=<span class="hljs-string">&quot;/bin/touch&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#获取系统时间</span>TIME=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)<span class="hljs-function"><span class="hljs-title">JudgeSuccess</span></span>()&#123;    <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>m此步骤失败 &#x27;<span class="hljs-variable">$1</span>&#x27;<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>        <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span> == <span class="hljs-string">&#x27;out&#x27;</span> ]]; <span class="hljs-keyword">then</span>          <span class="hljs-built_in">exit</span> 0        <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">else</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span>此步骤成功<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>&#125;<span class="hljs-comment"># 判断是否有系统权限</span><span class="hljs-function"><span class="hljs-title">have_sudo_access</span></span>() &#123;  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HAVE_SUDO_ACCESS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    /usr/bin/sudo -l <span class="hljs-built_in">mkdir</span> &amp;&gt;/dev/null    HAVE_SUDO_ACCESS=<span class="hljs-string">&quot;$?&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$HAVE_SUDO_ACCESS</span>&quot;</span> -ne 0 ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>开机密码输入错误，获取权限失败!<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HAVE_SUDO_ACCESS</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">abort</span></span>() &#123;  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-comment"># exit 1</span>&#125;<span class="hljs-function"><span class="hljs-title">shell_join</span></span>() &#123;  <span class="hljs-built_in">local</span> arg  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-built_in">shift</span>  <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot; &quot;</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arg// /\ &#125;</span>&quot;</span>  <span class="hljs-keyword">done</span>&#125;<span class="hljs-function"><span class="hljs-title">execute</span></span>() &#123;  <span class="hljs-keyword">if</span> ! <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(printf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>此命令运行失败:sudo %s<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)</span>&quot;</span>)</span>&quot;</span>  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">ohai</span></span>() &#123;  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_blue&#125;</span>运行代码 ==&gt;<span class="hljs-variable">$&#123;tty_bold&#125;</span> %s<span class="hljs-variable">$&#123;tty_reset&#125;</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)</span>&quot;</span>&#125;<span class="hljs-comment"># 管理员运行</span><span class="hljs-function"><span class="hljs-title">execute_sudo</span></span>() &#123;  <span class="hljs-built_in">local</span> -a args=(<span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)  <span class="hljs-keyword">if</span> have_sudo_access; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SUDO_ASKPASS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>      args=(<span class="hljs-string">&quot;-A&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>)    <span class="hljs-keyword">fi</span>    ohai <span class="hljs-string">&quot;/usr/bin/sudo&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>    execute <span class="hljs-string">&quot;/usr/bin/sudo&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">else</span>    ohai <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>    execute <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-comment">#添加文件夹权限</span><span class="hljs-function"><span class="hljs-title">AddPermission</span></span>()&#123;  execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;-R&quot;</span> <span class="hljs-string">&quot;a+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>&#125;<span class="hljs-comment">#创建文件夹</span><span class="hljs-function"><span class="hljs-title">CreateFolder</span></span>()&#123;    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;-&gt; 创建文件夹&#x27;</span> <span class="hljs-variable">$1</span>    execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>    JudgeSuccess    AddPermission <span class="hljs-variable">$1</span>&#125;<span class="hljs-function"><span class="hljs-title">RmAndCopy</span></span>()&#123;  <span class="hljs-keyword">if</span> [[ -d <span class="hljs-variable">$1</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;  ---备份要删除的<span class="hljs-variable">$1</span>到系统桌面....&quot;</span>    <span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-variable">$HOME</span>/Desktop/Old_Homebrew/<span class="hljs-variable">$TIME</span>/<span class="hljs-variable">$1</span> ]]; <span class="hljs-keyword">then</span>      sudo <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/Desktop/Old_Homebrew/<span class="hljs-variable">$TIME</span>/<span class="hljs-variable">$1</span>&quot;</span>    <span class="hljs-keyword">fi</span>    sudo <span class="hljs-built_in">cp</span> -rf <span class="hljs-variable">$1</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/Desktop/Old_Homebrew/<span class="hljs-variable">$TIME</span>/<span class="hljs-variable">$1</span>&quot;</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;   ---<span class="hljs-variable">$1</span> 备份完成&quot;</span>  <span class="hljs-keyword">fi</span>  sudo <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$1</span>&#125;<span class="hljs-function"><span class="hljs-title">RmCreate</span></span>()&#123;    RmAndCopy <span class="hljs-variable">$1</span>    CreateFolder <span class="hljs-variable">$1</span>&#125;<span class="hljs-comment">#判断文件夹存在但不可写</span><span class="hljs-function"><span class="hljs-title">exists_but_not_writable</span></span>() &#123;  [[ -e <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; ! [[ -r <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; -w <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; -x <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]]&#125;<span class="hljs-comment">#文件所有者</span><span class="hljs-function"><span class="hljs-title">get_owner</span></span>() &#123;  $(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$STAT</span> %u <span class="hljs-variable">$1</span>&quot;</span> )&#125;<span class="hljs-comment">#文件本人无权限</span><span class="hljs-function"><span class="hljs-title">file_not_owned</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(get_owner <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-subst">$(id -u)</span>&quot;</span> ]]&#125;<span class="hljs-comment">#获取所属的组</span><span class="hljs-function"><span class="hljs-title">get_group</span></span>() &#123;  $(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$STAT</span> %g <span class="hljs-variable">$1</span>&quot;</span> )&#125;<span class="hljs-comment">#不在所属组</span><span class="hljs-function"><span class="hljs-title">file_not_grpowned</span></span>() &#123;  [[ <span class="hljs-string">&quot; <span class="hljs-subst">$(id -G <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>)</span> &quot;</span> != *<span class="hljs-string">&quot; <span class="hljs-subst">$(get_group <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span> &quot;</span>*  ]]&#125;<span class="hljs-comment">#获得当前文件夹权限 例如777</span><span class="hljs-function"><span class="hljs-title">get_permission</span></span>() &#123;  $(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$STAT</span> %A <span class="hljs-variable">$1</span>&quot;</span> )&#125;<span class="hljs-comment">#授权当前用户权限</span><span class="hljs-function"><span class="hljs-title">user_only_chmod</span></span>() &#123;  [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(get_permission <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span> != <span class="hljs-string">&quot;755&quot;</span> ]]&#125;<span class="hljs-comment">#创建brew需要的目录 直接复制于国外版本，同步</span><span class="hljs-function"><span class="hljs-title">CreateBrewLinkFolder</span></span>()&#123;  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--创建Brew所需要的目录&quot;</span>  directories=(bin etc include lib sbin share opt var             Frameworks             etc/bash_completion.d lib/pkgconfig             share/aclocal share/doc share/info share/locale share/man             share/man/man1 share/man/man2 share/man/man3 share/man/man4             share/man/man5 share/man/man6 share/man/man7 share/man/man8             var/log var/homebrew var/homebrew/linked             bin/brew)  group_chmods=()  <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> exists_but_not_writable <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>      group_chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">done</span>  directories=(share/zsh share/zsh/site-functions)  zsh_dirs=()  <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    zsh_dirs+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)  <span class="hljs-keyword">done</span>  directories=(bin etc include lib sbin share var opt              share/zsh share/zsh/site-functions              var/homebrew var/homebrew/linked              Cellar Caskroom Frameworks)  mkdirs=()  <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>      mkdirs+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">done</span>  user_chmods=()  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#zsh_dirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;zsh_dirs[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>      <span class="hljs-keyword">if</span> user_only_chmod <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>        user_chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)      <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">done</span>  <span class="hljs-keyword">fi</span>  chmods=()  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span>)  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span>)  <span class="hljs-keyword">fi</span>  chowns=()  chgrps=()  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chmods[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>      <span class="hljs-keyword">if</span> file_not_owned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>        chowns+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)      <span class="hljs-keyword">fi</span>      <span class="hljs-keyword">if</span> file_not_grpowned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>        chgrps+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)      <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">done</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;u+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chmods[@]&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;755&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chowns[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chowns[@]&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chgrps[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chgrps[@]&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">else</span>    execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;root:wheel&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>    <span class="hljs-keyword">else</span>      execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>:<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#mkdirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;-R&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>:<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span>  <span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>      execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>    <span class="hljs-keyword">else</span>      execute <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> exists_but_not_writable <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> file_not_owned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;-R&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> file_not_grpowned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;-R&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    execute <span class="hljs-string">&quot;<span class="hljs-variable">$TOUCH</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>/.cleaned&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--依赖目录脚本运行完成&quot;</span>&#125;<span class="hljs-comment">#git提交</span><span class="hljs-function"><span class="hljs-title">git_commit</span></span>()&#123;    git add .    git commit -m <span class="hljs-string">&quot;your del&quot;</span>&#125;<span class="hljs-comment">#version_gt 判断$1是否大于$2</span><span class="hljs-function"><span class="hljs-title">version_gt</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]&#125;<span class="hljs-comment">#version_ge 判断$1是否大于等于$2</span><span class="hljs-function"><span class="hljs-title">version_ge</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]&#125;<span class="hljs-comment">#version_lt 判断$1是否小于$2</span><span class="hljs-function"><span class="hljs-title">version_lt</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]&#125;<span class="hljs-comment">#发现错误 关闭脚本 提示如何解决</span><span class="hljs-function"><span class="hljs-title">error_game_over</span></span>()&#123;    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">    <span class="hljs-variable">$&#123;tty_red&#125;</span>失败 去下面文章看一下第二部分的常见错误解决办法</span><span class="hljs-string">    https://zhuanlan.zhihu.com/p/111014448</span><span class="hljs-string">    如果没有解决，把运行脚本过程截图发到 cunkai.wang@foxmail.com <span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">    &quot;</span>    <span class="hljs-built_in">exit</span> 0&#125;<span class="hljs-comment">#一些警告判断</span><span class="hljs-function"><span class="hljs-title">warning_if</span></span>()&#123;  git_https_proxy=$(git config --global https.proxy)  git_http_proxy=$(git config --global http.proxy)  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$git_https_proxy</span>&quot;</span>  &amp;&amp;  -z <span class="hljs-string">&quot;<span class="hljs-variable">$git_http_proxy</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未发现Git代理（属于正常状态）&quot;</span>  <span class="hljs-keyword">else</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_yellow&#125;</span></span><span class="hljs-string">      提示：发现你电脑设置了Git代理，如果Git报错，请运行下面两句话：</span><span class="hljs-string"></span><span class="hljs-string">              git config --global --unset https.proxy</span><span class="hljs-string"></span><span class="hljs-string">              git config --global --unset http.proxy<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">  &quot;</span>  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">              <span class="hljs-variable">$&#123;tty_green&#125;</span> 开始执行Brew自动安装程序 <span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">             <span class="hljs-variable">$&#123;tty_cyan&#125;</span> [cunkai.wang@foxmail.com] <span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">           [&#x27;<span class="hljs-variable">$TIME</span>&#x27;][&#x27;<span class="hljs-variable">$macos_version</span>&#x27;]</span><span class="hljs-string">       <span class="hljs-variable">$&#123;tty_cyan&#125;</span> https://zhuanlan.zhihu.com/p/111014448 <span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">&quot;</span><span class="hljs-comment">#选择一个下载源</span><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span></span><span class="hljs-string">请选择一个下载镜像，例如中科大，输入1回车。</span><span class="hljs-string">源有时候不稳定，如果git克隆报错重新运行脚本选择源。cask非必须，有部分人需要。</span><span class="hljs-string">1、中科大下载源 2、清华大学下载源 3、北京外国语大学下载源 <span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><span class="hljs-comment">#mac才显示腾讯 阿里，他们对linux目前支持很差</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span> 4、腾讯下载源（不显示下载进度） 5、阿里巴巴下载源(缺少cask源) <span class="hljs-variable">$&#123;tty_reset&#125;</span> &quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;</span><span class="hljs-string"><span class="hljs-variable">$&#123;tty_blue&#125;</span>请输入序号: &quot;</span><span class="hljs-built_in">read</span> MY_DOWN_NUM<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">case</span> <span class="hljs-variable">$MY_DOWN_NUM</span> <span class="hljs-keyword">in</span><span class="hljs-string">&quot;2&quot;</span>)    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">    你选择了清华大学下载源</span><span class="hljs-string">    &quot;</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles    <span class="hljs-keyword">else</span>        USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/linuxbrew-bottles/    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#HomeBrew基础框架</span>    USER_BREW_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git    <span class="hljs-comment">#HomeBrew Core</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        USER_CORE_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git    <span class="hljs-keyword">else</span>        USER_CORE_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/linuxbrew-core.git    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#HomeBrew Cask</span>    USER_CASK_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git    USER_CASK_FONTS_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git    USER_CASK_DRIVERS_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git;;<span class="hljs-string">&quot;3&quot;</span>)    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">    北京外国语大学下载源</span><span class="hljs-string">    &quot;</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles    <span class="hljs-keyword">else</span>        USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/linuxbrew-bottles/    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#HomeBrew基础框架</span>    USER_BREW_GIT=https://mirrors.bfsu.edu.cn/git/homebrew/brew.git    <span class="hljs-comment">#HomeBrew Core</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        USER_CORE_GIT=https://mirrors.bfsu.edu.cn/git/homebrew/homebrew-core.git    <span class="hljs-keyword">else</span>        USER_CORE_GIT=https://mirrors.bfsu.edu.cn/git/homebrew/linuxbrew-core.git    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#HomeBrew Cask</span>    USER_CASK_GIT=https://mirrors.bfsu.edu.cn/git/homebrew/homebrew-cask.git    USER_CASK_FONTS_GIT=https://mirrors.bfsu.edu.cn/git/homebrew/homebrew-cask-fonts.git    USER_CASK_DRIVERS_GIT=https://mirrors.bfsu.edu.cn/git/homebrew/homebrew-cask-drivers.git;;<span class="hljs-string">&quot;4&quot;</span>)    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">    你选择了腾讯下载源</span><span class="hljs-string">    &quot;</span>    USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.cloud.tencent.com/homebrew-bottles    <span class="hljs-comment">#HomeBrew基础框架</span>    USER_BREW_GIT=https://mirrors.cloud.tencent.com/homebrew/brew.git     <span class="hljs-comment">#HomeBrew Core</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        USER_CORE_GIT=https://mirrors.cloud.tencent.com/homebrew/homebrew-core.git    <span class="hljs-keyword">else</span>        USER_CORE_GIT=https://mirrors.cloud.tencent.com/homebrew/linuxbrew-core.git    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#HomeBrew Cask</span>    USER_CASK_GIT=https://mirrors.cloud.tencent.com/homebrew/homebrew-cask.git;;<span class="hljs-string">&quot;5&quot;</span>)    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">    你选择了阿里巴巴下载源(无mac的cask源,无Linux版本)</span><span class="hljs-string">    &quot;</span>    USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles    <span class="hljs-comment">#HomeBrew基础框架</span>    USER_BREW_GIT=https://mirrors.aliyun.com/homebrew/brew.git     <span class="hljs-comment">#HomeBrew Core</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        USER_CORE_GIT=https://mirrors.aliyun.com/homebrew/homebrew-core.git    <span class="hljs-keyword">else</span>        USER_CORE_GIT=https://mirrors.ustc.edu.cn/linuxbrew-core.git        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;阿里巴巴无core，这里替换为了中国科学技术大学的linuxbrew-core&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#HomeBrew Cask</span>    USER_CASK_GIT=https://mirrors.aliyun.com/homebrew/homebrew-cask.git;;*)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">  你选择了中国科学技术大学下载源</span><span class="hljs-string">  &quot;</span>  <span class="hljs-comment">#HomeBrew 下载源 install</span>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles  <span class="hljs-keyword">else</span>    USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/linuxbrew-bottles/  <span class="hljs-keyword">fi</span>  <span class="hljs-comment">#HomeBrew基础框架</span>  USER_BREW_GIT=https://mirrors.ustc.edu.cn/brew.git  <span class="hljs-comment">#HomeBrew Core</span>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    USER_CORE_GIT=https://mirrors.ustc.edu.cn/homebrew-core.git  <span class="hljs-keyword">else</span>    USER_CORE_GIT=https://mirrors.ustc.edu.cn/linuxbrew-core.git  <span class="hljs-keyword">fi</span>  <span class="hljs-comment">#HomeBrew Cask</span>  USER_CASK_GIT=https://mirrors.ustc.edu.cn/homebrew-cask.git;;<span class="hljs-keyword">esac</span><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span>！！！此脚本将要删除之前的brew(包括它下载的软件)，请自行备份。</span><span class="hljs-string">-&gt;是否现在开始执行脚本（N/Y） &quot;</span><span class="hljs-built_in">read</span> MY_Del_Old<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">case</span> <span class="hljs-variable">$MY_Del_Old</span> <span class="hljs-keyword">in</span><span class="hljs-string">&quot;y&quot;</span>)<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--&gt; 脚本开始执行&quot;</span>;;<span class="hljs-string">&quot;Y&quot;</span>)<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--&gt; 脚本开始执行&quot;</span>;;*)<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入了 <span class="hljs-variable">$MY_Del_Old</span> ，自行备份老版brew和它下载的软件, 如果继续运行脚本应该输入Y或者y</span><span class="hljs-string">&quot;</span><span class="hljs-built_in">exit</span> 0;;<span class="hljs-keyword">esac</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><span class="hljs-comment">#MAC</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_yellow&#125;</span> Mac os设置开机密码方法：</span><span class="hljs-string">  (设置开机密码：在左上角苹果图标-&gt;系统偏好设置-&gt;&quot;</span>用户与群组<span class="hljs-string">&quot;-&gt;更改密码)</span><span class="hljs-string">  (如果提示This incident will be reported. 在&quot;</span>用户与群组<span class="hljs-string">&quot;中查看是否管理员) <span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; 通过命令删除之前的brew、创建一个新的Homebrew文件夹</span><span class="hljs-string"><span class="hljs-variable">$&#123;tty_cyan&#125;</span>请输入开机密码，输入过程不显示，输入完后回车<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;开始执行&#x27;</span><span class="hljs-comment">#删除以前的Homebrew</span>RmCreate <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>RmAndCopy <span class="hljs-variable">$HOMEBREW_CACHE</span>RmAndCopy <span class="hljs-variable">$HOMEBREW_LOGS</span><span class="hljs-comment"># 让环境暂时纯粹，脚本运行结束后恢复</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">export</span> PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin<span class="hljs-keyword">fi</span>git --version<span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>        sudo <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;/Library/Developer/CommandLineTools/&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_cyan&#125;</span>安装Git<span class="hljs-variable">$&#123;tty_reset&#125;</span>后再运行此脚本，<span class="hljs-variable">$&#123;tty_red&#125;</span>在系统弹窗中点击“安装”按钮</span><span class="hljs-string">        如果没有弹窗的老系统，需要自己下载安装：https://sourceforge.net/projects/git-osx-installer/ <span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>        xcode-select --install        <span class="hljs-built_in">exit</span> 0    <span class="hljs-keyword">else</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span> 发现缺少git，开始安装，请输入Y <span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>        sudo apt install git    <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string"><span class="hljs-variable">$&#123;tty_cyan&#125;</span>下载速度觉得慢可以ctrl+c或control+c重新运行脚本选择下载源<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">==&gt; 克隆Homebrew基本文件</span><span class="hljs-string">&quot;</span>warning_ifsudo git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$&#123;GIT_SPEED&#125;</span> <span class="hljs-variable">$USER_BREW_GIT</span> <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>JudgeSuccess 尝试再次运行自动脚本选择其他下载源或者切换网络 out<span class="hljs-comment">#依赖目录创建 授权等等</span>CreateBrewLinkFolder<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; 创建brew的替身&#x27;</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  find <span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin -name brew -<span class="hljs-built_in">exec</span> sudo <span class="hljs-built_in">rm</span> -f &#123;&#125; \;  execute <span class="hljs-string">&quot;ln&quot;</span> <span class="hljs-string">&quot;-sf&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; 克隆Homebrew Core</span><span class="hljs-string"><span class="hljs-variable">$&#123;tty_cyan&#125;</span>此处如果显示Password表示需要再次输入开机密码，输入完后回车<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>sudo <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-coresudo git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$&#123;GIT_SPEED&#125;</span> <span class="hljs-variable">$USER_CORE_GIT</span> <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-core/JudgeSuccess 尝试再次运行自动脚本选择其他下载源或者切换网络 out<span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><span class="hljs-comment">#MAC</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; 克隆Homebrew Cask 图形化软件</span><span class="hljs-string">  <span class="hljs-variable">$&#123;tty_cyan&#125;</span>此处如果显示Password表示需要再次输入开机密码，输入完后回车<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$MY_DOWN_NUM</span>&quot;</span> -eq <span class="hljs-string">&quot;5&quot;</span> ]];<span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_yellow&#125;</span> 阿里源没有Cask 跳过<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>  <span class="hljs-keyword">else</span>    sudo <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-cask    sudo git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$&#123;GIT_SPEED&#125;</span> <span class="hljs-variable">$USER_CASK_GIT</span> <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-cask/    <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>        sudo <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-cask        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>尝试切换下载源或者切换网络,不过Cask组件非必须模块。可以忽略<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>    <span class="hljs-keyword">else</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span>此步骤成功<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">else</span><span class="hljs-comment">#Linux</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_yellow&#125;</span> Linux 不支持Cask图形化软件下载 此步骤跳过<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; 配置国内镜像源HOMEBREW BOTTLE&#x27;</span><span class="hljs-comment">#判断下终端是Bash还是zsh</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SHELL</span>&quot;</span> <span class="hljs-keyword">in</span>  */bash*)    <span class="hljs-keyword">if</span> [[ -r <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.bash_profile&quot;</span> ]]; <span class="hljs-keyword">then</span>      shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.bash_profile&quot;</span>    <span class="hljs-keyword">else</span>      shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.profile&quot;</span>    <span class="hljs-keyword">fi</span>    ;;  */zsh*)    shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.zprofile&quot;</span>    ;;  *)    shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.profile&quot;</span>    ;;<span class="hljs-keyword">esac</span><span class="hljs-keyword">if</span> [[ -f <span class="hljs-variable">$&#123;shell_profile&#125;</span> ]]; <span class="hljs-keyword">then</span>  AddPermission <span class="hljs-variable">$&#123;shell_profile&#125;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#删除之前的环境变量</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-comment">#Mac</span>  sed -i <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;/ckbrew/d&quot;</span> <span class="hljs-variable">$&#123;shell_profile&#125;</span><span class="hljs-keyword">else</span>  <span class="hljs-comment">#Linux</span>  sed -i <span class="hljs-string">&quot;/ckbrew/d&quot;</span> <span class="hljs-variable">$&#123;shell_profile&#125;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#写入环境变量到文件</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;环境变量写入-&gt;<span class="hljs-variable">$&#123;shell_profile&#125;</span>&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">  export HOMEBREW_BOTTLE_DOMAIN=<span class="hljs-variable">$&#123;USER_HOMEBREW_BOTTLE_DOMAIN&#125;</span> #ckbrew</span><span class="hljs-string">  eval \$(<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew shellenv) #ckbrew</span><span class="hljs-string">&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;shell_profile&#125;</span> JudgeSuccess<span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;shell_profile&#125;</span>&quot;</span><span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>发现错误，<span class="hljs-variable">$&#123;shell_profile&#125;</span> 文件中有错误，建议根据上一句提示修改；</span><span class="hljs-string">                否则会导致提示 permission denied: brew<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment">#判断系统版本</span><span class="hljs-keyword">if</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.14&quot;</span>; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;电脑系统版本：<span class="hljs-variable">$macos_version</span>&quot;</span><span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>检测到你不是最新系统，会有一些报错，请稍等Ruby下载安装;<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">    &quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;</span><span class="hljs-string">==&gt; 安装完成，brew版本</span><span class="hljs-string">&#x27;</span>AddPermission <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span><span class="hljs-comment">#先暂时设置到清华大学源，中科大没有Ruby下载镜像</span>HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles<span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-comment">#检测linux curl是否有安装</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-检测curl是否安装&quot;</span>    curl -V    <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>        sudo apt-get install curl        <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>            sudo yum install curl            <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;失败 请自行安装curl 可以参考https://www.howtoing.com/install-curl-in-linux&#x27;</span>                error_game_over            <span class="hljs-keyword">fi</span>        <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span>brew -v<span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;发现错误，自动修复一次！&#x27;</span>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$HOMEBREW_CACHE</span>    <span class="hljs-built_in">export</span> PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin    brew update-reset    brew -v    <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span>      error_game_over    <span class="hljs-keyword">fi</span><span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span>Brew前期配置成功<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;</span><span class="hljs-string">==&gt; brew update</span><span class="hljs-string">&#x27;</span>HOMEBREW_BOTTLE_DOMAIN=<span class="hljs-variable">$&#123;USER_HOMEBREW_BOTTLE_DOMAIN&#125;</span><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$GIT_SPEED</span> == <span class="hljs-string">&quot;&quot;</span> ]];<span class="hljs-keyword">then</span>  brew update  <span class="hljs-keyword">if</span> [[ $? -ne 0 ]];<span class="hljs-keyword">then</span>      error_game_over      <span class="hljs-built_in">exit</span> 0  <span class="hljs-keyword">fi</span><span class="hljs-keyword">else</span>   <span class="hljs-comment">#极速模式提示Update修复方法</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span>  极速版本安装完成，<span class="hljs-variable">$&#123;tty_reset&#125;</span> install功能正常，如果需要update功能请自行运行下面两句命令</span><span class="hljs-string">git -C <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-core fetch --unshallow</span><span class="hljs-string">git -C <span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-cask fetch --unshallow</span><span class="hljs-string">  &quot;</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><span class="hljs-string">        <span class="hljs-variable">$&#123;tty_green&#125;</span>Brew自动安装程序运行完成<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">          <span class="hljs-variable">$&#123;tty_green&#125;</span>国内地址已经配置完成<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string"></span><span class="hljs-string">  桌面的Old_Homebrew文件夹，大致看看没有你需要的可以删除。</span><span class="hljs-string"></span><span class="hljs-string">              初步介绍几个brew命令</span><span class="hljs-string">本地软件库列表：brew ls</span><span class="hljs-string">查找软件：brew search google（其中google替换为要查找的关键字）</span><span class="hljs-string">查看brew版本：brew -v  更新brew版本：brew update</span><span class="hljs-string">安装cask软件：brew install --cask firefox 把firefox换成你要安装的</span><span class="hljs-string">        <span class="hljs-variable">$&#123;tty_green&#125;</span></span><span class="hljs-string">        欢迎右键点击下方地址-打开URL 来给点个赞<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">        <span class="hljs-variable">$&#123;tty_underline&#125;</span> https://zhuanlan.zhihu.com/p/111014448 <span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">&quot;</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-comment">#Mac</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span> 重启终端 或者 运行<span class="hljs-variable">$&#123;tty_bold&#125;</span> source <span class="hljs-variable">$&#123;shell_profile&#125;</span>  <span class="hljs-variable">$&#123;tty_reset&#125;</span>，否则可能无法使用</span><span class="hljs-string">  &quot;</span><span class="hljs-keyword">else</span>  <span class="hljs-comment">#Linux</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_green&#125;</span> Linux需要重启电脑 或者暂时运行<span class="hljs-variable">$&#123;tty_bold&#125;</span> source <span class="hljs-variable">$&#123;shell_profile&#125;</span> <span class="hljs-variable">$&#123;tty_reset&#125;</span>，否则可能无法使用</span><span class="hljs-string">  &quot;</span><span class="hljs-keyword">fi</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件存储、数据存储、混合存储</title>
    <link href="/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/"/>
    <url>/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="文件存储、数据存储、混合存储"><a href="#文件存储、数据存储、混合存储" class="headerlink" title="文件存储、数据存储、混合存储"></a>文件存储、数据存储、混合存储</h1><p><strong>源头:</strong> 数据管理的方案设计</p><h2 id="什么是数据存储？"><a href="#什么是数据存储？" class="headerlink" title="什么是数据存储？"></a>什么是数据存储？</h2><p>数据存储是信息技术对您每天所需的数据内容（从应用到网络协议，从文档到媒体，从地址簿到用户首选项）进行归档、整理和共享的过程。数据存储是大数据的核心环节。</p><p>试想一下，计算机就像大脑一样。两者都有短期记忆和长期记忆。大脑通过前额叶皮层来处理短期记忆，而计算机则利用随机存取存储器（RAM）来处理短期记忆。</p><p>大脑和 RAM 都要在清醒的状态下处理并记住事务，并且在工作一会儿后会感到疲倦。大脑在睡眠时会将工作记忆转换为长期记忆，而计算机则在睡眠时将活动记忆转换为存储卷。计算机还会按类型来分配数据，就像大脑按语义、空间、情感或规程来分配记忆一样。</p><p>自磁盘系统问世以来，数据存储已经走过了一段漫长的历程。诚然，磁盘系统仍然在广泛应用。但如今它们已接入网络并由软件来定义，因此您可以完全控制其格式。</p><img src="/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/2021-03-06-23-20-18.png" class=""><h2 id="什么是文件存储？"><a href="#什么是文件存储？" class="headerlink" title="什么是文件存储？"></a>什么是文件存储？</h2><img src="/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/2021-03-06-22-37-09.png" class=""><p><strong>文件存储</strong>也称为文件级存储或基于文件的存储，且正如您所想：数据会以单条信息的形式存储在文件夹中，正如您将几张纸放入一个文件夹中一样。当您需要访问该数据时，您的计算机需要知道相应的查找路径。</p><p>存储在文件中的数据会根据数量有限的元数据来进行整理和检索，这些元数据会告诉计算机文件所在的确切位置。它就像是数据文件的库卡目录。</p><p>请试想一下塞满文件柜的储藏室。每个文档都会按照某种类型的逻辑层次结构来排放 ——按文件柜、抽屉、文件夹，然后再是纸张。</p><img src="/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/2021-03-06-23-30-35.png" class=""><p>“分层存储”这个术语就是这么来的，而这就是文件存储。它是适用于直接和网络附加存储系统的最古老且运用最为广泛的一种数据存储系统；而且，这种系统您可能已经用了数十年。</p><p>只要您访问保存在个人计算机上的文件中的文档，您就是在使用文件存储。文件存储具有丰富多样的功能，几乎可以存储任何内容。它非常适合用来存储一系列复杂文件，并且有助于用户快速导航。</p><img src="/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/2021-03-06-23-13-56.png" class=""><p><code>缺点:</code> 问题是，就像文件柜一样，虚拟抽屉只能打开到一定的程度。基于文件的存储系统必须通过添置<strong>更多系统</strong>来进行横向扩展，而不是通过增添更多容量来进行纵向扩展。</p><h2 id="什么是混合存储"><a href="#什么是混合存储" class="headerlink" title="什么是混合存储?"></a>什么是混合存储?</h2><p><code>混合存储系统</code>就是将<code>基于闪存的固态磁盘</code>与<code>常规磁盘驱动器</code>(机械硬盘(HDD))结合使用。混合存储将闪存作为缓存区，用于自动将最活跃的数据移入基于内存的存储。</p><p><code>优点</code>: 混合存储充分利用不同类型的存储器件的特性组成高效的存储系统，既能支持存储系统容量的大幅扩展，又能保证系统低成本的前提下，显著提高存储系统的能力。它们是管理大中型数据中心的 IT 专业人员经济实惠的高性能存储选择。</p><p>目前市场上几乎所有的SSD硬盘都基于闪存技术。闪存设备性能表现的关键在于固态技术，因为其没有可移动组件。不依赖于读/写次磁头来访问数据，固态硬盘（SSD）使用更加类似于内存的方式从闪存存储中读取数据。闪存设备并不存在由旋转的磁道和移动的读/取磁头所导致的延迟时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="/2021/03/06/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E6%B7%B7%E5%90%88%E5%AD%98%E5%82%A8/2021-03-07-00-35-28.png" class=""><p><code>数据存储</code>：是指对数据内容进行归档、整理和共享的过程。是<code>目的。</code><br><code>文件存储</code>：文件级存储或基于文件的存储。是<code>手段。</code>它还可以是<code>块存储</code>、<code>对象存储</code>等。是<code>软件层面</code>的。<br><code>混合存储</code>: 指将<code>基于闪存的固态磁盘</code>与<code>常规磁盘驱动器</code>(机械硬盘(HDD))结合使用。是<code>存储介质</code>。是<code>硬件层面</code>的。</p><h2 id="扩展阅读-选读"><a href="#扩展阅读-选读" class="headerlink" title="扩展阅读(选读)"></a>扩展阅读(选读)</h2><h3 id="什么是闪存"><a href="#什么是闪存" class="headerlink" title="什么是闪存?"></a>什么是闪存?</h3><p><strong>闪存是一种基于硅芯片的存储介质，可以用电写入或擦除。</strong>存储介质的其他示例包括机械硬盘、磁带、CD光盘、DVD光盘、蓝光光盘，甚至是软盘和穿孔卡。</p><table><thead><tr><th>特点</th><th>描述</th></tr></thead><tbody><tr><td>速度</td><td>闪存具有一些独特的特性，使其特别适用于存储企业数据。首先，顾名思义，它比机械硬盘(HDD)的存取速度快得多。</td></tr><tr><td>没有活动部件</td><td>与机械硬盘或磁带不同，闪存可用于制造没有移动部件的硬盘驱动器。一般来说，这使得它不太可能中断或失败，特别是在存储设施被移动的情况下(尽管有些专家并不认同闪存这种特性的真实可靠性)。</td></tr><tr><td>非易失性</td><td>闪存是非易失性的，这意味着即使电源关闭，它也会保留存储的信息。这使它与内存(RAM)区别开来，后者的存取也非常快，但每次系统断电时都会被擦除。</td></tr><tr><td>易于重写</td><td>闪存很容易重写，因此它对于存储频繁更改的数据非常有用(例如，不像CD或DVD光盘)。</td></tr></tbody></table><p><code>缺点</code>: 目前的价格还相当昂贵。但是，随着技术的进步，成本会逐渐降低，使闪存在企业环境中更具成本效益。有些组织的数据中心甚至选择完全舍弃机械硬盘而所有都采用SSD硬盘。</p><h3 id="什么是SSD存储"><a href="#什么是SSD存储" class="headerlink" title="什么是SSD存储?"></a>什么是SSD存储?</h3><p>SSD硬盘是存储设备。目前市场上的大多数SSD硬盘都使用闪存作为其存储介质。闪存和SSD硬盘之间的关系类似于CD光盘和CD光盘驱动器之间的关系。CD光盘是介质，CD光盘驱动器是存储设备，因此，可以认为闪存是介质，而SSD硬盘是存储设备。</p><p>然而，SSD硬盘不一定必须使用闪存作为其存储介质。其名称为“固态驱动器”，因此任何不运动的存储类型都可以算作SSD硬盘。事实上，从历史上看，最早的SSD硬盘并没有使用闪存介质。未来的SSD硬盘也可能使用闪存以外的介质。</p><p>大多数SSD硬盘使用与HDD硬盘相同的外形。这使用户可以更轻松地从基于磁盘的存储迁移到固态存储。企业可以购买已安装HDD硬盘的单个驱动器或SSD硬盘阵列。混合阵列使用HDD硬盘和SSD硬盘的组合是另一种流行的选择。</p><h3 id="构建混合存储系统的三种方式"><a href="#构建混合存储系统的三种方式" class="headerlink" title="构建混合存储系统的三种方式"></a>构建混合存储系统的三种方式</h3><p><strong>第一种:</strong> 创建混合存储系统最为简单的方式就是在<em>存储系统中同时使用固态硬盘和普通磁盘</em>。</p><p>将闪存被封装在一个类似于磁盘的盒子当中，使用和磁盘同样的方式连接到存储系统上。</p><p>SSD使用和硬盘同样的协议，所以基本上它们是可以进行互换的。</p><p>使用SSD的优势在于和现有存储基础设施的兼容性以及易于安装的特点。</p><p>SSD可以提供比硬盘更快的读写性能表现，但是你可能会觉得这并不能发挥闪存设备的全部性能表现；</p><p>磁盘驱动协议并不是针对闪存存储技术而设计的，所以必须将它们映射为闪存设备操作。</p><p><strong>第二种:</strong> 是将其作为<em>服务器</em>和<em>基于磁盘存储系统</em>之间的<code>共享闪存设备</code>。</p><p>闪存设备作为一个持续性缓存来提升读写操作速度。</p><p>比如，像文字处理或者电子表格这样的VDI应用程序可以将数据块写入到闪存设备当中，相比于在磁盘上完成同样的操作，这样可以更快地收到确认信息。</p><p>当闪存设备将新收到的数据写入到磁盘存储系统的同时，应用程序可以继续完成其他操作。</p><p>这种方式可以提供多种优势。首先，因为闪存设备位于服务器和存储系统之间，多种服务器都可以利用闪存设备提供的优势。</p><p>同样，这样的闪存系统可以安装在<a href="https://zhuanlan.zhihu.com/p/26172972">PCI</a>总线上（PCIe），而不是磁盘驱动的盒子当中。PCIe可以提供更快的速度，避免产生和模拟磁盘驱动协议相关的系统开销。</p><p><strong>第三种:</strong> 需要直接在服务器上安装PCIe闪存设备。这种方式可以极大地提高存储性能，因为其减少了CPU和持续性存储间的网络延迟，同时避免了和磁盘驱动协议相关的系统开销，还有由盘片旋转和读/写磁头移动所产生的延迟。</p><blockquote><p>NOTE: 笔者这块不是特别熟悉。</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.redhat.com/zh/topics/data-storage">了解数据存储</a></li><li><a href="https://www.redhat.com/zh/topics/data-storage/file-block-object-storage">文件存储、块存储还是对象存储？</a></li><li><a href="https://www.sohu.com/a/242321733_281945">闪存vs.SSD硬盘：有什么区别? </a></li><li><a href="https://mp.weixin.qq.com/s?src=3&timestamp=1615044504&ver=1&signature=Wjidb64P1hfhTVjpGJ*ElfbP*olIDZF9kCYzvQWKYpzC-MXhVvlR9tEEM5JWBAbcLHMpJ1-xLVUl1fih6GEMCF9NPqJBq4QeeQw43qmxF0hWUFz1KC2dhSc2zdRln5VPcABHrdQRfDhZ3taueF4YxA==">构建混合存储系统的三种方式</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csapp-chapter3-3.7-Procedures</title>
    <link href="/2021/02/24/csapp-chapter3-3-7-Procedures/"/>
    <url>/2021/02/24/csapp-chapter3-3-7-Procedures/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CSAPP-Chapter3-3-7-Procedures"><a href="#CSAPP-Chapter3-3-7-Procedures" class="headerlink" title="CSAPP Chapter3 3.7 Procedures"></a>CSAPP Chapter3 3.7 Procedures</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>过程其实是软件中一种很重要的抽象。就像我们在写代码时，一个函数，传进去入参和一个可选的返回值定义了某个功能。不同的语言过程的形式多样，比如函数、方法、子例程、等等。</p><p>机器对过程的实现提供了下面几个支持，为了方便大家理解，例如：过程P调用过程Q，Q执行后返回到P，这些动作包含如下一个或多个机制：</p><ul><li><code>传递控制。</code>在进入Q时，PC要设置为Q代码的起始地址，然后在返回时，要设置为P调用Q后那条指令的地址；</li><li><code>传递数据。</code>P必须向Q提供一个或多个参数，Q必须向P提供一个返回值；</li><li><code>分配和释放内存。</code>Q在执行时需要为局部变量分配空间，当返回时，销毁这些空间；</li></ul><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><p><strong>main.c</strong></p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">multstore</span><span class="hljs-params">(<span class="hljs-type">long</span>, <span class="hljs-type">long</span>, <span class="hljs-type">long</span> *)</span></span>;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-type">long</span> d;<span class="hljs-built_in">multstore</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, &amp;d);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2 * 3 --&gt; $ld\n&quot;</span>, d);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125; <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">mult2</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b)</span> </span>&#123;<span class="hljs-type">long</span> s = a * b;<span class="hljs-keyword">return</span> s;&#125;</code></pre><p><strong>mstore.c</strong></p><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">mult2</span><span class="hljs-params">(<span class="hljs-type">long</span>, <span class="hljs-type">long</span>)</span></span>;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">multstore</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y, <span class="hljs-type">long</span> *dest)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">long</span> t = <span class="hljs-built_in">mult2</span>(x, y);    *dest = t;&#125;</code></pre><p>执行gcc命令, 生成可执行文件prog(windows平台该文件为prog.exe)</p><pre><code class="hljs llvm">gcc -Og -o prog main.<span class="hljs-keyword">c</span> mstore.<span class="hljs-keyword">c</span></code></pre><p>文件变成了131k，因为它不仅包含了两个过程的代码，还包含了用来启动和终止程序的代码，以及用来和操作系统交互的代码</p><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-15-37.png" class=""><p>现在我们反汇编prog(windows平台该文件为prog.exe)文件:<br><strong>linux平台</strong></p><pre><code class="hljs ebnf"><span class="hljs-attribute">objdump -d prog</span></code></pre><p><strong>windows平台</strong></p><pre><code class="hljs nginx"><span class="hljs-attribute">objdump</span> -d prog.exe</code></pre><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-27-33.png" class=""><blockquote><p>NOTE:<br>3.10 Options That Control Optimization<br><code>-Og</code><br> Optimize debugging experience. -Og enables optimizations that do not interfere with debugging. It should be the optimization level of choice for the standard edit-compile-debug cycle, offering a reasonable level of optimization while maintaining fast compilation and a good debugging experience.<br>If you use multiple -O options, with or without level numbers, the last such option is the one that is effective. </p></blockquote><blockquote><p>3.2 Options Controlling the Kind of Output<br><code>-o file</code><br>Place output in file file. This applies to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code.<br>If -o is not specified, the default is to put an executable file in a.out, the object file for source.suffix in source.o, its assembler file in source.s, a precompiled header file in source.suffix.gch, and all preprocessed C source on standard output.</p></blockquote><h2 id="返回地址"><a href="#返回地址" class="headerlink" title="返回地址"></a>返回地址</h2><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-28-41.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-30-17.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-30-56.png" class=""><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-33-25.png" class=""><p>如果一个函数的参数数量大于6， 超出部分就要通过栈来传递。</p><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-34-53.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-39-43.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-42-54.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-43-54.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-44-23.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-44-36.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-45-23.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-46-38.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-47-04.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-50-31.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-52-10.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-52-45.png" class=""><img src="/2021/02/24/csapp-chapter3-3-7-Procedures/2021-02-24-18-53-32.png" class=""><div id="refer-anchor"></div><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://gcc.gnu.org/onlinedocs/gcc-5.5.0/gcc/Optimize-Options.html#Optimize-Options">gcc options</a></li><li><a href="https://www.bilibili.com/video/BV19X4y1P7Pn?from=search&seid=3278023030334820872">【CSAPP-深入理解计算机系统】3-7. 过程（函数调用）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看C语言的汇编代码</title>
    <link href="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="查看C语言的汇编代码"><a href="#查看C语言的汇编代码" class="headerlink" title="查看C语言的汇编代码"></a>查看C语言的汇编代码</h1><h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><p><strong>GCC, the GNU Compiler Collection</strong><br>The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, Go, and D, as well as libraries for these languages (libstdc++,…). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user’s freedom.</p><h2 id="选择GCC"><a href="#选择GCC" class="headerlink" title="选择GCC"></a>选择GCC</h2><blockquote><p>MinGW: 编译目标仅兼容 32 位应用程序，最新的官方二进制版本为 GCC 9.2.0。<br>MinGW-w64: 衍生自 MinGW 的项目，编译目标兼容 32 位应用程序与64 位应用程序，最新的官方二进制版本为 GCC 8.1.0。(MingW-W64-builds)<br>TDM-GCC: 衍生自 MinGW 和 MinGW-w64 的项目，分为 32 位与 64 位两个版本，32 位版本的编译目标仅兼容 32 位应用程序，64位版本的编译目标兼容 32 位应用程序和 64 位应用程序，最新的官方二进制版本为 GCC 9.2.0。以上三个 GCC 编译器的 Windows 发行版均兼容 POSIX 线程标准 。(“pthread.h”)个人推荐优先选择 TDM-GCC 作为首选 C / C++ 编译器。</p></blockquote><blockquote><p>作者：砂漠的毒虫<br>链接：<a href="https://www.zhihu.com/question/39952667/answer/1133837727">https://www.zhihu.com/question/39952667/answer/1133837727</a><br>来源：知乎</p></blockquote><h2 id="安装TDM-GCC"><a href="#安装TDM-GCC" class="headerlink" title="安装TDM-GCC"></a>安装TDM-GCC</h2><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-25-21-15-16.png" class=""><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-25-21-18-11.png" class=""><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-25-21-14-36.png" class=""><h2 id="生成汇编"><a href="#生成汇编" class="headerlink" title="生成汇编"></a>生成汇编</h2><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-26-11-02-40.png" class=""><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-26-11-03-11.png" class=""><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-26-11-03-28.png" class=""><pre><code class="hljs css">gcc -og -S <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span></code></pre><p>这会使GCC运行编译器，产生一个汇编文件main.s,但是不做进一步的工作(通常情况下，它还会继续调用汇编器产生目标代码文件)。</p><h2 id="展示程序的字节表示"><a href="#展示程序的字节表示" class="headerlink" title="展示程序的字节表示"></a>展示程序的字节表示</h2><pre><code class="hljs llvm">gcc -og -<span class="hljs-keyword">c</span> main.<span class="hljs-keyword">c</span></code></pre><p>如果我们使用”-c”命令行选项，GCC会编译并汇编该代码,这样就会产生目标代码文件main.o，它是二进制格式的，所以无法直接查看。</p><p>要展示程序(main.c)的二进制目标代码，我们用<code>反汇编器</code>确定该过程的代码是14字节。然后，在文件main.o上运行GNU调试工具GDB。</p><p>要查看机器代码文件的内容，有一类称为<code>反汇编器(disassembler)</code>的程序非常有用。</p><pre><code class="hljs css">objdump -d <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span></code></pre><img src="/2021/01/25/%E6%9F%A5%E7%9C%8BC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/2021-01-26-14-08-13.png" class=""><pre><code class="hljs apache"><span class="hljs-attribute">F</span>:\demoCode\syspace\<span class="hljs-number">2</span>-ccpp\<span class="hljs-number">21</span>-basic\csapp-lab&gt;objdump -d main.o<span class="hljs-attribute">main</span>.o:     file format pe-i386<span class="hljs-attribute">Disassembly</span> of section .text:<span class="hljs-attribute">00000000</span> &lt;_main&gt;:   <span class="hljs-attribute">0</span>:   <span class="hljs-number">55</span>                      push   %ebp   <span class="hljs-attribute">1</span>:   <span class="hljs-number">89</span> e5                   mov    %esp,%ebp   <span class="hljs-attribute">3</span>:   <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>                sub    $<span class="hljs-number">0</span>x8,%esp   <span class="hljs-attribute">6</span>:   <span class="hljs-number">83</span> e4 f0                and    $<span class="hljs-number">0</span>xfffffff0,%esp   <span class="hljs-attribute">9</span>:   b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov    $<span class="hljs-number">0</span>x0,%eax   <span class="hljs-attribute">e</span>:   <span class="hljs-number">83</span> c0 <span class="hljs-number">0</span>f                add    $<span class="hljs-number">0</span>xf,%eax  <span class="hljs-attribute">11</span>:   <span class="hljs-number">83</span> c0 <span class="hljs-number">0</span>f                add    $<span class="hljs-number">0</span>xf,%eax  <span class="hljs-attribute">14</span>:   c1 e8 <span class="hljs-number">04</span>                shr    $<span class="hljs-number">0</span>x4,%eax  <span class="hljs-attribute">17</span>:   c1 e0 <span class="hljs-number">04</span>                shl    $<span class="hljs-number">0</span>x4,%eax  <span class="hljs-attribute">1a</span>:   <span class="hljs-number">89</span> <span class="hljs-number">45</span> fc                mov    %eax,-<span class="hljs-number">0</span>x4(%ebp)  <span class="hljs-attribute">1d</span>:   <span class="hljs-number">8</span>b <span class="hljs-number">45</span> fc                mov    -<span class="hljs-number">0</span>x4(%ebp),%eax  <span class="hljs-attribute">20</span>:   e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          call   <span class="hljs-number">25</span> &lt;_main+<span class="hljs-number">0</span>x25&gt;  <span class="hljs-attribute">25</span>:   e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          call   <span class="hljs-number">2</span>a &lt;_main+<span class="hljs-number">0</span>x2a&gt;  <span class="hljs-attribute">2a</span>:   c7 <span class="hljs-number">04</span> <span class="hljs-number">24</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    movl   $<span class="hljs-number">0</span>x0,(%esp)  <span class="hljs-attribute">31</span>:   e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          call   <span class="hljs-number">36</span> &lt;_main+<span class="hljs-number">0</span>x36&gt;  <span class="hljs-attribute">36</span>:   b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov    $<span class="hljs-number">0</span>x0,%eax  <span class="hljs-attribute">3b</span>:   c9                      leave  <span class="hljs-attribute">3c</span>:   c3                      ret<span class="hljs-attribute">0000003d</span> &lt;_exchange&gt;:  <span class="hljs-attribute">3d</span>:   <span class="hljs-number">55</span>                      push   %ebp  <span class="hljs-attribute">3e</span>:   <span class="hljs-number">89</span> e5                   mov    %esp,%ebp  <span class="hljs-attribute">40</span>:   <span class="hljs-number">83</span> ec <span class="hljs-number">04</span>                sub    $<span class="hljs-number">0</span>x4,%esp  <span class="hljs-attribute">43</span>:   <span class="hljs-number">8</span>b <span class="hljs-number">45</span> <span class="hljs-number">08</span>                mov    <span class="hljs-number">0</span>x8(%ebp),%eax  <span class="hljs-attribute">46</span>:   <span class="hljs-number">8</span>b <span class="hljs-number">00</span>                   mov    (%eax),%eax  <span class="hljs-attribute">48</span>:   <span class="hljs-number">89</span> <span class="hljs-number">45</span> fc                mov    %eax,-<span class="hljs-number">0</span>x4(%ebp)  <span class="hljs-attribute">4b</span>:   <span class="hljs-number">8</span>b <span class="hljs-number">55</span> <span class="hljs-number">08</span>                mov    <span class="hljs-number">0</span>x8(%ebp),%edx  <span class="hljs-attribute">4e</span>:   <span class="hljs-number">8</span>b <span class="hljs-number">45</span> <span class="hljs-number">0</span>c                mov    <span class="hljs-number">0</span>xc(%ebp),%eax  <span class="hljs-attribute">51</span>:   <span class="hljs-number">89</span> <span class="hljs-number">02</span>                   mov    %eax,(%edx)  <span class="hljs-attribute">53</span>:   <span class="hljs-number">8</span>b <span class="hljs-number">45</span> fc                mov    -<span class="hljs-number">0</span>x4(%ebp),%eax  <span class="hljs-attribute">56</span>:   c9                      leave  <span class="hljs-attribute">57</span>:   c3                      ret</code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://gcc.gnu.org/">GCC, the GNU Compiler Collection</a></li><li><a href="https://jmeubank.github.io/tdm-gcc/">TDM-GCC 9.2.0 release</a></li><li><a href="http://www.mingw-w64.org/doku.php">mingw-w64</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csapp-chapter3-Machine_level_Representation_of_Programs</title>
    <link href="/2021/01/24/csapp-chapter3-Machine-level-Representation-of-Programs/"/>
    <url>/2021/01/24/csapp-chapter3-Machine-level-Representation-of-Programs/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="csapp-chapter3-Machine-level-Representation-of-Programs"><a href="#csapp-chapter3-Machine-level-Representation-of-Programs" class="headerlink" title="csapp chapter3 Machine level Representation of Programs"></a>csapp chapter3 Machine level Representation of Programs</h1><blockquote><p>程序的机器级表示。<br>汇编代码是机器代码的文本表示。</p></blockquote><h2 id="程序编码"><a href="#程序编码" class="headerlink" title="程序编码"></a>程序编码</h2><h3 id="机器级代码"><a href="#机器级代码" class="headerlink" title="机器级代码"></a>机器级代码</h3><p>两个重要的抽象:<code>指令集架构(ISA)</code>和 <code>虚拟内存地址(VMA)</code></p><p><code>ISA</code> 是对处理器的抽象，让程序认为处理器是一条一条按顺序执行的。</p><p><code>VMA</code> 是对正在进行程序的存储器的抽象包括主存、磁盘I/O。</p>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Jenkins</title>
    <link href="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/"/>
    <url>/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Docker-安装-Jenkins"><a href="#Docker-安装-Jenkins" class="headerlink" title="Docker 安装 Jenkins"></a>Docker 安装 Jenkins</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>服务器安装了docker</li><li>docker启动时，需要开启tcp端口</li></ul><h2 id="Jenkins-安装"><a href="#Jenkins-安装" class="headerlink" title="Jenkins 安装"></a>Jenkins 安装</h2><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> -d  -v /home/jenkins-home-docker:/var/jenkins_home  jenkins/jenkins:lts</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> -d  -v D:/software/data/docker/jenkins2.<span class="hljs-number">60</span>.<span class="hljs-number">3</span>:/var/jenkins_home  jenkins:<span class="hljs-number">2</span>.<span class="hljs-number">60</span>.<span class="hljs-number">3</span></code></pre><h3 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h3><p>访问http://&lt;你的ip&gt;:8080访问Jenkins。如果无法访问请检查系统防火墙、云的安全组设置。</p><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-10-52-33.png" class=""><p>根据提示需要输入密码解锁Jenkins。</p><p><strong>查看初始化的密码:</strong></p><p>进入容器:</p><pre><code class="hljs awk">docker exec -it jenkins <span class="hljs-regexp">/bin/</span>bash</code></pre><p>查看密码:</p><pre><code class="hljs awk">cat <span class="hljs-regexp">/var/</span>jenkins_home<span class="hljs-regexp">/secrets/i</span>nitialAdminPassword</code></pre><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-10-57-36.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-10-59-02.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-10-59-15.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-10-59-36.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-11-03-49.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-11-20-41.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-11-24-08.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-13-45-30.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-13-50-35.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-13-53-26.png" class=""><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-13-53-52.png" class=""><h3 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h3><img src="/2021/01/21/Docker%E5%AE%89%E8%A3%85Jenkins/2021-01-21-15-16-20.png" class=""><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.jenkins.io/doc/book/getting-started/">User Handbook overview</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>互联网工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>互联网工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker中Redis挂载及密码设置</title>
    <link href="/2021/01/20/Docker%E4%B8%ADRedis%E6%8C%82%E8%BD%BD%E5%8F%8A%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE/"/>
    <url>/2021/01/20/Docker%E4%B8%ADRedis%E6%8C%82%E8%BD%BD%E5%8F%8A%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Docker中Redis挂载及密码设置"><a href="#Docker中Redis挂载及密码设置" class="headerlink" title="Docker中Redis挂载及密码设置"></a>Docker中Redis挂载及密码设置</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull redis</span></code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre><code class="hljs awk">docker run -d --name redis-server -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>redis<span class="hljs-regexp">/redis_conf:/</span>etc<span class="hljs-regexp">/redis/</span>redis.conf -v <span class="hljs-regexp">/Users/</span>admin<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/</span>redis<span class="hljs-regexp">/redis_data:/</span>data redis:latest <span class="hljs-regexp">/etc/</span>redis/redis.conf --appendonly yes --requirepass <span class="hljs-string">&quot;redis&quot;</span></code></pre><p>or</p><pre><code class="hljs awk">docker run -d --name redis-server -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> -v <span class="hljs-regexp">/usr/</span>redis<span class="hljs-regexp">/redis.conf:/</span>etc<span class="hljs-regexp">/redis/</span>redis.conf -v <span class="hljs-regexp">/usr/</span>redis<span class="hljs-regexp">/data/</span>:<span class="hljs-regexp">/data redis:latest /</span>etc<span class="hljs-regexp">/redis/</span>redis.conf --appendonly yes --requirepass <span class="hljs-string">&quot;redis123&quot;</span></code></pre><blockquote><p>NOTE:<br>在/usr/redis新建文件夹，拷贝redis.conf配置文件，建data文件夹保存redis持久化数据<br>-v 挂在目录，这里本别挂在了redis.conf文件和data文件夹，<br>/etc/redis/redis.conf 关键配置，让redis以指定的配置文件启动，而不是默认无配置启动<br>–appendonly yes redis启动后开启数据持久化</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>互联网工程</category>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>互联网工程</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>202101阅读笔记</title>
    <link href="/2021/01/16/202101%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/16/202101%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>2021年1月16日 15:44:29</strong></p><h1 id="202101阅读笔记"><a href="#202101阅读笔记" class="headerlink" title="202101阅读笔记"></a>202101阅读笔记</h1><h2 id="一、DevOps的“定义”"><a href="#一、DevOps的“定义”" class="headerlink" title="一、DevOps的“定义”"></a>一、DevOps的“定义”</h2><p><strong>维基百科:</strong></p><blockquote><p>DevOps（开发Development与运维Operations的组合词）是一种文化、一场运动或实践，强 调在自动化软件交付流程及基础设施变更过程中，软件开发人员与其他信息技术（IT）专业人 员彼此之间的协作与沟通。它<br>旨在建立一种文化与环境，使构建、测试、软件发布得以快速、频繁以及更加稳定地进行。</p></blockquote><ul><li>DevOps平台 ≠ 自动化运维平台 ≠ 或持续交付平台。</li><li>软件开发的第三次革命。</li><li>DevOps已经突破了单一领域，成为软件交付整体的方法论。</li></ul><h3 id="1、历史缘由"><a href="#1、历史缘由" class="headerlink" title="1、历史缘由"></a>1、历史缘由</h3><p>DevOps: 关注<code>开发</code>和<code>运维</code>两种角色。</p><p><strong>瀑布流开发模式:</strong></p><img src="/2021/01/16/202101%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2021-01-16-16-14-56.png" class=""><p><strong>缺点:</strong> 随着市场环境和用户需求变化的不断加速，这种按部就班的方式有一个严重的潜在问题。软件开发活动需要在项目一开始就确定项目目标、范围以及实现方式，而这个时间点往往是我们对用户和市场环境信息解最少的时候，这样做出来的决策往往带有很大的不确定性，很容易导致项目范围不断变更，计划不断延期，交付上线时间不断推后，最后的结果是，即便我们投入了大量资源，却难以达到预期的效果。</p><blockquote><p>NOTE:<br>早期了解少，贸然做决策，需求会变化，范围变化，计划延期。</p></blockquote><p><strong>敏捷式开发模式:</strong></p><img src="/2021/01/16/202101%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2021-01-16-16-20-46.png" class=""><p>将一个大的目标不断拆解，把它变成一个个可交付的小目标，然后通过不断迭代，以小步快跑的方式持续开发。</p><p>敏捷之所以更快，根本原因在于持续迭代和验证节省了大量不必要的浪费和返工 敏捷之所以更快，根本原因在于持续迭代和验证节省了大量不必要的浪费和返工。</p><p>敏捷源于开发实践，敏捷的应用使得<code>开发</code>和<code>测试</code>团队<strong>抱团取暖。</strong></p><p><strong>缺点:</strong> 无论开发了多少“天才”的功能，如果没有经过运维环节的部署上线，并最终发布给真实用户，那么这些功能其实并没有什么用。</p><blockquote><p>NOTE:<br>开发和测试团队发现，不管研发的速度变得多快，在软件交付的另一端，始终有一群人在冷冰冰地看 着他们，一句“现在没到发布窗口”让多少新开发的功能倒在了上线的门槛上。</p></blockquote><p><strong>DevOps模式:</strong></p><img src="/2021/01/16/202101%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2021-01-16-16-26-10.png" class=""><p>DevOps却反其道而行之，它试图通过体系化的<code>研发实践导入</code>、<code>软件架构的整体革新</code>、<code>组织管理理念的不断升级</code>和<code>企业文化</code>的影响塑造，来帮助企业改善整个<strong>软件交付过程</strong>，在实现高吞吐量的<br>同时保证服务的总体稳定性，从而真正实现又快又好的软件交付目标.</p><p><strong>初衷:</strong> DevOps最开始想要打破的就是开发和运维之间的<code>对立</code>和<code>隔阂</code>。</p><blockquote><p>NOTE: 以往的模式下开发只管开发完成多少需求，运维只管保证系统的稳定性、可用性和安全性。需求的变更，开发的新功能缺陷，容易导致生产事故，导致运维背锅。因此，会形成互相伤害。</p></blockquote><p><strong>发展:</strong></p><p> BizDevOps: 从一开始想要促进开发和运维的协作，团队慢慢发现，其实在整个软件交付过程中，不仅只有 其实在整个软件交付过程中，不仅只有开发和运维，业务也是重要的一环 开发和运维，业务也是重要的一环。</p><p> DevSecOps: 是介入到整个软件开发过程中，在每个过程中注入安全反馈机制，来帮助团队 在第一时间应对安全风险。</p><p> AIOps: 更多的还是Ops领域的一种探索，解决的还是Ops所面对的问题</p><p> 这样的例子比比皆是，包括职能部门、战略部门等，都纷纷加入其中，使得DevOps由最开始的 点，扩展为线，再到面，不断发展壮大。</p><h3 id="2、最终”定义”"><a href="#2、最终”定义”" class="headerlink" title="2、最终”定义”"></a>2、最终”定义”</h3><p> DevOps 是通过平台（Platform Platform）、流程（Process Process）和人（People People）的有机整合。<br> 以C （协作） A （自动化）L （精益）M （度量）S （共享）文化为指引。<br> 旨在建立一种可以快速交付价值并且具有持续改进能力的现代化 IT 组织。</p><h2 id="二、DevOps的必要性"><a href="#二、DevOps的必要性" class="headerlink" title="二、DevOps的必要性"></a>二、DevOps的必要性</h2><h3 id="1、企业数字化转型，软件日益重要"><a href="#1、企业数字化转型，软件日益重要" class="headerlink" title="1、企业数字化转型，软件日益重要"></a>1、企业数字化转型，软件日益重要</h3><p><strong>数字化转型-&gt;软件日益重要-&gt;软件质量和交付效率问题</strong></p><p>流传已久的名言: <strong>每一家公司都将成为软件公司 每一家公司都将成为软件公司。</strong></p><blockquote><p>批注: 也许这是大势所趋。到达一定的阶段自然会转型。</p></blockquote><p>软件慢慢从企业内部的支撑系统和成本中心，变成了企业服务的直接载体和利润中 软件慢慢从企业内部的支撑系统和成本中心，变成了企业服务的直接载体和利润中<br>心 心。企业通过软件降低运营成本，提升服务水平，而用户在获得便利的同时，也加强了同企业之<br>间的联系。</p><blockquote><p>批注: 某些公司的决策层依然有问题,依旧还是成本中心。</p></blockquote><p>我们所身处的是一个VUCA VUCA的时代，VUCA是指易变性 （Volatility）、不确定性（Uncertainty）、复杂性（Complexity）和模糊性（Ambiguity），它代 表了这个时代的典型特征。</p><p>国家智库的某位领导的话: “工业革命消灭了绝大多数的手工业群体，却催生了程序员这个现存 工业革命消灭了绝大多数的手工业群体，却催生了程序员这个现存 最大的手工业群体 最大的手工业群体”。</p><p><strong>结论:</strong> 软件交付的效率和质量成了当今企业的核心价值和核心竞争力软件交付的效率和质量成了当今企业的核心价值和核心竞争力。</p><p><strong>数字化转型-&gt;软件日益重要-&gt;软件质量和交付效率问题-&gt;DevOps</strong></p><blockquote><p>NOTE:<br>DevOps的价值: 高效的软件交付方式、激发团队的创造力(因为DevOps本身也包含了改善软件从业人员的生存状态，提升他们的幸福水平本身也包含了改善软件从业人员的生存状态，提升他们的幸福水平的理念。)<br>实施DevOps，一方面可以通过<code>种种流程优化</code>和<code>自动化能力</code>，改善软件开发团队的工作节奏，另一方面，也可以让大家关注同一个目标，彼此信任，高效协作，调动员工的积极性和创新能力，从而让整个团队进入一种积极创造价值的状态，而这所带来的影响远非建设一两个工具平台可比拟的。</p></blockquote><h2 id="三、DevOps文化Or工具"><a href="#三、DevOps文化Or工具" class="headerlink" title="三、DevOps文化Or工具"></a>三、DevOps文化Or工具</h2><h3 id="DevOps工具"><a href="#DevOps工具" class="headerlink" title="DevOps工具"></a>DevOps工具</h3><p>一切软件交付过程中的手动环节，都是未来可以尝试进行优化的方向 一切软件交付过程中的手动环节，都是未来可以尝试进行优化的方向。</p><h3 id="DevOps文化"><a href="#DevOps文化" class="headerlink" title="DevOps文化"></a>DevOps文化</h3><p>由此可见，在不同的文化制度下，相同的人发挥出来的生产力也会有天壤之别。</p><p>要先改变行为，再通过行为来改变文化。而改变行为最关键的，就是要建立一种有效的机制。就像我一直强调的那样，机制就是人们愿意做，而且做了有好处的事情。</p><p>要将规则内建于工具之中，并通过工具来指导 需要将规则内建于工具之中，并通过工具来指导践。—-&gt; 行为改变 —-&gt; DevOps文化生根发芽。</p><h3 id="DevOps的3个支柱"><a href="#DevOps的3个支柱" class="headerlink" title="DevOps的3个支柱"></a>DevOps的3个支柱</h3><img src="/2021/01/16/202101%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2021-01-16-17-34-11.png" class=""><ul><li>人+流程=文化</li><li>流程 + 平台 = 工具</li><li>平台 + 人 = 培训赋能</li></ul><blockquote><p>NOTE:<br>平台上固化的每一种流程，其实都是可以用来解决实际问题的工具。<br>平台的最大意义，就是承载企业内部的标准化流程 而平台的最大意义，就是承载企业内部的标准化流程。</p><p>平台的定义：<br>1.可扩展，纵向扩展或横向扩展（不一定必须要很自由）<br>2.横向扩展，聚合多个工具或服务，助力某一大类工作的所有工作诉求，解决一个更大问题域 的问题。<br>3.纵向扩展，从单体工具或服务，往多租户的工具或服务演变，提供配置化的定制能力</p></blockquote><p>DevOps 由人+流程+平台工具构成一个有机整体，其中最主要的还是人。推动需要一个说得上 话的人，推进需要一群志同道合的人，实现则是服务一帮人。把人搞定了，什么都好搞了。</p><h2 id="四、DevOps实施路线图"><a href="#四、DevOps实施路线图" class="headerlink" title="四、DevOps实施路线图"></a>四、DevOps实施路线图</h2><p><strong>2021年1月20日 10:24:21</strong></p><h3 id="安晓辉-《工作之余如何高效学习》-摘记"><a href="#安晓辉-《工作之余如何高效学习》-摘记" class="headerlink" title="安晓辉 《工作之余如何高效学习》 摘记"></a>安晓辉 《工作之余如何高效学习》 摘记</h3><p>有效学习的六个步骤:</p><ol><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>黑客与画家</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac如何安装和使用ctags</title>
    <link href="/2020/10/29/Mac%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8ctags/"/>
    <url>/2020/10/29/Mac%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8ctags/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Mac如何安装和使用ctags"><a href="#Mac如何安装和使用ctags" class="headerlink" title="Mac如何安装和使用ctags"></a>Mac如何安装和使用ctags</h1><p>安装：</p><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>ctags-exuberant</code></pre><p>打印安装信息：</p><pre><code class="hljs bash"><span class="hljs-built_in">which</span> -a ctags</code></pre><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>ctags<span class="hljs-regexp">/usr/</span>bin/ctag</code></pre>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctags</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven更换国内镜像源</title>
    <link href="/2020/10/29/Maven%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2020/10/29/Maven%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Maven更换国内镜像源"><a href="#Maven更换国内镜像源" class="headerlink" title="Maven更换国内镜像源"></a>Maven更换国内镜像源</h1><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><span class="hljs-comment"><span class="language-xml">Licensed to the Apache Software Foundation (ASF) under one</span></span><span class="hljs-comment"><span class="language-xml">or more contributor license agreements.  See the NOTICE file</span></span><span class="hljs-comment"><span class="language-xml">distributed with this work for additional information</span></span><span class="hljs-comment"><span class="language-xml">regarding copyright ownership.  The ASF licenses this file</span></span><span class="hljs-comment"><span class="language-xml">to you under the Apache License, Version 2.0 (the</span></span><span class="hljs-comment"><span class="language-xml">&quot;License&quot;); you may not use this file except in compliance</span></span><span class="hljs-comment"><span class="language-xml">with the License.  You may obtain a copy of the License at</span></span><span class="hljs-comment"><span class="language-xml"></span></span><span class="hljs-comment"><span class="language-xml">    http://www.apache.org/licenses/LICENSE-2.0</span></span><span class="hljs-comment"><span class="language-xml"></span></span><span class="hljs-comment"><span class="language-xml">Unless required by applicable law or agreed to in writing,</span></span><span class="hljs-comment"><span class="language-xml">software distributed under the License is distributed on an</span></span><span class="hljs-comment"><span class="language-xml">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><span class="hljs-comment"><span class="language-xml">KIND, either express or implied.  See the License for the</span></span><span class="hljs-comment"><span class="language-xml">specific language governing permissions and limitations</span></span><span class="hljs-comment"><span class="language-xml">under the License.</span></span><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><span class="hljs-comment"><span class="language-xml"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><span class="hljs-comment"><span class="language-xml"> |                 and is normally provided in $</span></span><span class="hljs-template-variable">&#123;user.home&#125;</span><span class="language-xml"><span class="hljs-comment">/.m2/settings.xml.</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |                 <span class="hljs-doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |                 -s /path/to/user/settings.xml</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><span class="hljs-comment"><span class="language-xml"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><span class="hljs-comment"><span class="language-xml"> |                 installation). It&#x27;s normally provided in</span></span><span class="hljs-comment"><span class="language-xml"> |                 $</span></span><span class="hljs-template-variable">&#123;maven.conf&#125;</span><span class="language-xml"><span class="hljs-comment">/settings.xml.</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |                 <span class="hljs-doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |                 -gs /path/to/global/settings.xml</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> | The sections in this sample file are intended to give you a running start at</span></span><span class="hljs-comment"><span class="language-xml"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><span class="hljs-comment"><span class="language-xml"> | values (values used when the setting is not specified) are provided.</span></span><span class="hljs-comment"><span class="language-xml"> |</span></span><span class="hljs-comment"><span class="language-xml"> |--&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- localRepository</span></span><span class="hljs-comment"><span class="language-xml">   | The path to the local repository maven will use to store artifacts.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | Default: $</span></span><span class="hljs-template-variable">&#123;user.home&#125;</span><span class="language-xml"><span class="hljs-comment">/.m2/repository</span></span><span class="hljs-comment"><span class="language-xml">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- interactiveMode</span></span><span class="hljs-comment"><span class="language-xml">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><span class="hljs-comment"><span class="language-xml">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><span class="hljs-comment"><span class="language-xml">   | the parameter in question.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | Default: true</span></span><span class="hljs-comment"><span class="language-xml">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- offline</span></span><span class="hljs-comment"><span class="language-xml">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><span class="hljs-comment"><span class="language-xml">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | Default: false</span></span><span class="hljs-comment"><span class="language-xml">  &lt;offline&gt;false&lt;/offline&gt;</span></span><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- pluginGroups</span></span><span class="hljs-comment"><span class="language-xml">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><span class="hljs-comment"><span class="language-xml">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span></span><span class="hljs-comment"><span class="language-xml">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span></span><span class="hljs-comment"><span class="language-xml">   |--&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span></span><span class="language-xml">    <span class="hljs-comment">&lt;!-- pluginGroup</span></span><span class="hljs-comment"><span class="language-xml">     | Specifies a further group identifier to use for plugin lookup.</span></span><span class="hljs-comment"><span class="language-xml">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- proxies</span></span><span class="hljs-comment"><span class="language-xml">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><span class="hljs-comment"><span class="language-xml">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><span class="hljs-comment"><span class="language-xml">   | specification in this list marked as active will be used.</span></span><span class="hljs-comment"><span class="language-xml">   |--&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span></span><span class="language-xml">    <span class="hljs-comment">&lt;!-- proxy</span></span><span class="hljs-comment"><span class="language-xml">     | Specification for one proxy, to be used in connecting to the network.</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">    &lt;proxy&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;id&gt;optional&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;active&gt;true&lt;/active&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;port&gt;80&lt;/port&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;/proxy&gt;</span></span><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- servers</span></span><span class="hljs-comment"><span class="language-xml">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><span class="hljs-comment"><span class="language-xml">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><span class="hljs-comment"><span class="language-xml">   |--&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span></span><span class="language-xml">    <span class="hljs-comment">&lt;!-- server</span></span><span class="hljs-comment"><span class="language-xml">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><span class="hljs-comment"><span class="language-xml">     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">     | <span class="hljs-doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><span class="hljs-comment"><span class="language-xml">     |       used together.</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">    &lt;server&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;username&gt;repouser&lt;/username&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;/server&gt;</span></span><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-comment">&lt;!-- Another sample, using keys to authenticate.</span></span><span class="hljs-comment"><span class="language-xml">    &lt;server&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;/server&gt;</span></span><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- mirrors</span></span><span class="hljs-comment"><span class="language-xml">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><span class="hljs-comment"><span class="language-xml">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><span class="hljs-comment"><span class="language-xml">   | it to several places.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><span class="hljs-comment"><span class="language-xml">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><span class="hljs-comment"><span class="language-xml">   | server for that repository.</span></span><span class="hljs-comment"><span class="language-xml">   |--&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span></span><span class="language-xml">    <span class="hljs-comment">&lt;!-- mirror</span></span><span class="hljs-comment"><span class="language-xml">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><span class="hljs-comment"><span class="language-xml">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><span class="hljs-comment"><span class="language-xml">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">    &lt;mirror&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;/mirror&gt;</span></span><span class="hljs-comment"><span class="language-xml">     --&gt;</span></span><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- profiles</span></span><span class="hljs-comment"><span class="language-xml">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><span class="hljs-comment"><span class="language-xml">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><span class="hljs-comment"><span class="language-xml">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><span class="hljs-comment"><span class="language-xml">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><span class="hljs-comment"><span class="language-xml">   | dereferenced during the build process to configure the cactus plugin.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><span class="hljs-comment"><span class="language-xml">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><span class="hljs-comment"><span class="language-xml">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><span class="hljs-comment"><span class="language-xml">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><span class="hljs-comment"><span class="language-xml">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><span class="hljs-comment"><span class="language-xml">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   | <span class="hljs-doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><span class="hljs-comment"><span class="language-xml">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><span class="hljs-comment"><span class="language-xml">   |       variables for plugins in the POM.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">   |--&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span></span><span class="language-xml">    <span class="hljs-comment">&lt;!-- profile</span></span><span class="hljs-comment"><span class="language-xml">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><span class="hljs-comment"><span class="language-xml">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><span class="hljs-comment"><span class="language-xml">     | or the command line, profiles have to have an ID that is unique.</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><span class="hljs-comment"><span class="language-xml">     | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc.</span></span><span class="hljs-comment"><span class="language-xml">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><span class="hljs-comment"><span class="language-xml">     | to accomplish, particularly when you only have a list of profile id&#x27;s for debug.</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><span class="hljs-comment"><span class="language-xml">    &lt;profile&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml"></span></span><span class="hljs-comment"><span class="language-xml">      &lt;activation&gt;</span></span><span class="hljs-comment"><span class="language-xml">        &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;/activation&gt;</span></span><span class="hljs-comment"><span class="language-xml"></span></span><span class="hljs-comment"><span class="language-xml">      &lt;repositories&gt;</span></span><span class="hljs-comment"><span class="language-xml">        &lt;repository&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;id&gt;jdk14&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;layout&gt;default&lt;/layout&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><span class="hljs-comment"><span class="language-xml">        &lt;/repository&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;/repositories&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;/profile&gt;</span></span><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><span class="hljs-comment"><span class="language-xml">     | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;,</span></span><span class="hljs-comment"><span class="language-xml">     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration</span></span><span class="hljs-comment"><span class="language-xml">     | might hypothetically look like:</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">     | ...</span></span><span class="hljs-comment"><span class="language-xml">     | &lt;plugin&gt;</span></span><span class="hljs-comment"><span class="language-xml">     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;</span></span><span class="hljs-comment"><span class="language-xml">     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">     |   &lt;configuration&gt;</span></span><span class="hljs-comment"><span class="language-xml">     |     &lt;tomcatLocation&gt;$</span></span><span class="hljs-template-variable">&#123;tomcatPath&#125;</span><span class="language-xml"><span class="hljs-comment">&lt;/tomcatLocation&gt;</span></span><span class="hljs-comment"><span class="language-xml">     |   &lt;/configuration&gt;</span></span><span class="hljs-comment"><span class="language-xml">     | &lt;/plugin&gt;</span></span><span class="hljs-comment"><span class="language-xml">     | ...</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">     | <span class="hljs-doctag">NOTE:</span> If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to</span></span><span class="hljs-comment"><span class="language-xml">     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.</span></span><span class="hljs-comment"><span class="language-xml">     |</span></span><span class="hljs-comment"><span class="language-xml">    &lt;profile&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;id&gt;env-dev&lt;/id&gt;</span></span><span class="hljs-comment"><span class="language-xml"></span></span><span class="hljs-comment"><span class="language-xml">      &lt;activation&gt;</span></span><span class="hljs-comment"><span class="language-xml">        &lt;property&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;name&gt;target-env&lt;/name&gt;</span></span><span class="hljs-comment"><span class="language-xml">          &lt;value&gt;dev&lt;/value&gt;</span></span><span class="hljs-comment"><span class="language-xml">        &lt;/property&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;/activation&gt;</span></span><span class="hljs-comment"><span class="language-xml"></span></span><span class="hljs-comment"><span class="language-xml">      &lt;properties&gt;</span></span><span class="hljs-comment"><span class="language-xml">        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;</span></span><span class="hljs-comment"><span class="language-xml">      &lt;/properties&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;/profile&gt;</span></span><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- activeProfiles</span></span><span class="hljs-comment"><span class="language-xml">   | List of profiles that are active for all builds.</span></span><span class="hljs-comment"><span class="language-xml">   |</span></span><span class="hljs-comment"><span class="language-xml">  &lt;activeProfiles&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><span class="hljs-comment"><span class="language-xml">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><span class="hljs-comment"><span class="language-xml">  &lt;/activeProfiles&gt;</span></span><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Homebrew更换国内镜像源</title>
    <link href="/2020/10/29/Homebrew%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2020/10/29/Homebrew%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Homebrew-更换国内镜像源"><a href="#Homebrew-更换国内镜像源" class="headerlink" title="Homebrew 更换国内镜像源"></a>Homebrew 更换国内镜像源</h1><p>替换brew.git:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span></code></pre><p>中科大:</p><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">ustc</span>.<span class="hljs-string">edu</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">brew</span>.<span class="hljs-string">git</span></code></pre><p>清华:</p><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">tuna</span>.<span class="hljs-string">tsinghua</span>.<span class="hljs-string">edu</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">git</span>/<span class="hljs-string">homebrew</span>/<span class="hljs-string">brew</span>.<span class="hljs-string">git</span></code></pre><p>替换homebrew-core.git:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></code></pre><p>中科大:</p><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">ustc</span>.<span class="hljs-string">edu</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">homebrew-core</span>.<span class="hljs-string">git</span></code></pre><p>清华:</p><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">tuna</span>.<span class="hljs-string">tsinghua</span>.<span class="hljs-string">edu</span>.<span class="hljs-string">cn</span>/<span class="hljs-string">git</span>/<span class="hljs-string">homebrew</span>/<span class="hljs-string">homebrew-core</span>.<span class="hljs-string">git</span></code></pre><p>替换homebrew-bottles:</p><p>中科大:</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</code></pre><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile</code></pre><p>清华:</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> ~/.bash_profile</span></code></pre><p>应用：</p><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>brew update</code></pre>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>homebrew</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac下配置vim</title>
    <link href="/2020/10/28/mac%E4%B8%8B%E9%85%8D%E7%BD%AEvim/"/>
    <url>/2020/10/28/mac%E4%B8%8B%E9%85%8D%E7%BD%AEvim/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="mac-下配置-vim"><a href="#mac-下配置-vim" class="headerlink" title="mac 下配置 vim"></a>mac 下配置 vim</h1><img src="/2020/10/28/mac%E4%B8%8B%E9%85%8D%E7%BD%AEvim/2020-10-29-04-23-07.png" class=""><h2 id="安装-mac-vim"><a href="#安装-mac-vim" class="headerlink" title="安装 mac vim"></a>安装 mac vim</h2><p>mac 预装了 vim，但官方的 vim 在 Mac 上只有一个很不完善的，长期没人维护的 Carbon 图形用户界面。macvim 主要是在此基础上添加了一个完整的 Cocoa 用户界面，其核心部分和 vim 同步。MacVim 采用了分离进程的方式，一个 MacVim 程序可以启动多个 vim 进程，每个显示在一个 MacVim 窗口中，这是官方的 vim 和其他平台下的 gvim 所不支持的。MacVim 还支持很多 Mac OS X 原生的界面特性，比如工具栏、滚动条、全屏显示、Mac 菜单快捷键的绑定等。</p><h2 id="安装-vim-plug"><a href="#安装-vim-plug" class="headerlink" title="安装 vim-plug"></a>安装 vim-plug</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre><code class="hljs awk">curl -fLo ~<span class="hljs-regexp">/.vim/</span>autoload/plug.vim --create-dirs \    https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/junegunn/</span>vim-plug<span class="hljs-regexp">/master/</span>plug.vim</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建一个目录用于存放下载的插件</p><pre><code class="hljs arcade">mkdir ~<span class="hljs-regexp">/.vim/</span>plugged</code></pre><h2 id="vim-plug-的基本使用"><a href="#vim-plug-的基本使用" class="headerlink" title="vim-plug 的基本使用"></a>vim-plug 的基本使用</h2><p>vim-plug 安装后，下面介绍下如何使用：</p><p>1、先编辑~/.vimrc 文件，键入如下内容:</p><pre><code class="hljs leaf">call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">begin</span><span class="hljs-params">(&#x27;~/.<span class="hljs-variable">vim</span>/<span class="hljs-variable">plugged</span>&#x27;)</span></span>Plug &#x27;scrooloose/nerdtree&#x27;call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">end</span><span class="hljs-params">()</span></span></code></pre><p>2、终端键入 vim,然后回车，进入 vim 编辑器，键入如下内容进入命令模式，然后回车:</p><pre><code class="hljs clojure"><span class="hljs-symbol">:PlugInstall</span></code></pre><p><strong>Issue:</strong></p><p>由于中文网络环境的某种原因，您可能会遇到vim-plug插件无法下载的问题: vim-plug它依赖github上的开源软件，而github常常无法被正常访问。</p><p>解决之法有二:</p><p>其一，给命令行挂代理。此法相对复杂，并非简单执行一行命令就完事。提供下思路: 先开启某科学上网的socks5代理或自己ssh -D上自己的机场，使用privoxy转为http代理，然后执行<code>export http_proxy=http://127.0.0.1:8118</code>。<br>其二，通过修改Plug.vim文件中的下载地址为国内的镜像站。</p><pre><code class="hljs vim"><span class="hljs-keyword">vi</span>  ~/.<span class="hljs-keyword">vim</span>/autoload/plug.<span class="hljs-keyword">vim</span></code></pre><p>在 plug.vim 中搜索 github, 修改两条语句，即可成功下载GitHub资源。 </p><p>第一部分:</p><p>  将<br>  <pre><code class="hljs bash"><span class="hljs-built_in">let</span> <span class="hljs-built_in">fmt</span> = get(g:, <span class="hljs-string">&#x27;plug_url_format&#x27;</span>, <span class="hljs-string">&#x27;https://git::@github.com/%s.git&#x27;</span>)</code></pre><br>  改为<br> <pre><code class="hljs bash"><span class="hljs-built_in">let</span> <span class="hljs-built_in">fmt</span> = get(g:, <span class="hljs-string">&#x27;plug_url_format&#x27;</span>, <span class="hljs-string">&#x27;https://git::@hub.fastgit.org/%s.git&#x27;</span>)</code></pre></p><p> 第二部分:</p><p>  将<br> <pre><code class="hljs livescript"><span class="hljs-string">\</span> <span class="hljs-string">&#x27;^https://git::@github\.com&#x27;</span>, <span class="hljs-string">&#x27;https://github.com&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)</code></pre><br> 改为</p><pre><code class="hljs livescript"><span class="hljs-string">\</span> <span class="hljs-string">&#x27;^https://git::@hub.fastgit\.org&#x27;</span>, <span class="hljs-string">&#x27;https://hub.fastgit.org&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)</code></pre><blockquote><p>参考: <a href="https://blog.csdn.net/htx1020/article/details/114364510">https://blog.csdn.net/htx1020/article/details/114364510</a></p></blockquote><p><strong>常用的命令:</strong></p><p>查看插件安装状态:</p><pre><code class="hljs clojure"><span class="hljs-symbol">:PlugStatus</span></code></pre><p>删除插件的方法:</p><ol><li>先注释~/.vimrc 文件中插件</li></ol><pre><code class="hljs 1c"><span class="hljs-string">&quot; Plug &#x27;scrooloose/nerdtreee&#x27;</span></code></pre><p>2)重启 vim 编辑器</p><p><del>或者</del></p><p><del>执行:</del></p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.vimrc</code></pre><blockquote><p>更新:<br>编辑完vimrc之后用</p><p>source /etc/vimrc报错</p><p>-bash: /etc/vimrc: line 15: syntax error near unexpected token <code>&quot;autocmd&quot;&#39; -bash: /etc/vimrc: line 15: </code>if has(“autocmd”)’</p><p>以为是语法问题</p><p>实际原因：vimrc是vim起动时解释的，而不是由shell来解释。用shell来source它肯定不行。</p></blockquote><p>最后执行:</p><pre><code class="hljs clojure"><span class="hljs-symbol">:PlugClean</span></code></pre><h2 id="安装-molokai-主题"><a href="#安装-molokai-主题" class="headerlink" title="安装 molokai 主题"></a>安装 molokai 主题</h2><pre><code class="hljs arcade">cd ~<span class="hljs-regexp">/.vim/</span></code></pre><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/tomasr/m</span>olokai.git</code></pre><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> molokai<span class="hljs-built_in">cp</span> -r colors ../</code></pre><h2 id="配置-Java-环境"><a href="#配置-Java-环境" class="headerlink" title="配置 Java 环境"></a>配置 Java 环境</h2><h3 id="代码自动补全"><a href="#代码自动补全" class="headerlink" title="代码自动补全"></a>代码自动补全</h3><p><strong>issue:</strong><br><code>怎么让Mac里的vim支持python3?</code><br>2019 年后 brewhome 安装的和升级 vim 都支持 python3，你可以先升级 brewhome</p><pre><code class="hljs ebnf"><span class="hljs-attribute">brew update</span></code></pre><p>在重新安装或者直接升级</p><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>vim</code></pre><p>或者</p><pre><code class="hljs ebnf"><span class="hljs-attribute">brew upgrade</span></code></pre><p>重新启动终端后就可以查看支持 python3</p><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> --<span class="hljs-keyword">version</span> ｜<span class="hljs-keyword">grep</span> <span class="hljs-keyword">python</span></code></pre><p>温馨提示：将鼠标放在语句上可以显示对应的英文。 或者 切换至中英文显示<br>在具有+python3 支持的 Mac OS 上安装 Vim 时，出现以下错误：</p><p>% brew install vim –with-python3<br>Usage: brew install [options] formula</p><p>…</p><p>Error: invalid option: –with-python3<br>macos vim homebrew<br>1 个回复<br>按投票数排序按时间排序<br>===============&gt;&gt;#1 票数：0<br>自 2019 年起，默认情况下已通过 Homebrew 在 Vim 上启用 +python3 。互联网上较旧的说明不准确（为了避免提高搜索排名，我不会链接到它们）。</p><p>只需通过 Homebrew 安装/升级：</p><p>% brew uninstall vim # optional, only if you previously installed it<br>% brew install vim<br>验证+python3 ：</p><p>% /usr/local/bin/vim –version<br>…<br>+cmdline_compl +lambda +profile +virtualedit<br>+cmdline_hist +langmap -python +visual<br>+cmdline_info +libcall +python3 +visualextra<br>+comments +linebreak +quickfix +viminfo<br>+conceal +lispindent +reltime +vreplace<br>…<br>注意，您仍然会安装系统默认的 Vim，并且可能在安装 Homebrew 版本之前的 PATH 中，因此，如果执行 vim –version ，它不会显示+python3 ：</p><p>尝试重新启动终端<br>尝试 alias vim=/usr/local/bin/vim<br>试调整 PATH 变量，将 Homebrew 的 Vim 放在首位。 “ 在 Mac 上编辑 PATH 变量 ”具有其他信息。</p><blockquote><p>如果系统是ubuntu,安装openjdk8命令如下:<br>sudo apt-get install openjdk-8-jdk</p></blockquote><h2 id="vim-配置文件"><a href="#vim-配置文件" class="headerlink" title="vim 配置文件"></a>vim 配置文件</h2><pre><code class="hljs vim"><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot; 基本设置</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot;默认文件夹</span><span class="hljs-keyword">cd</span>  /Users/admin/Documents/prj/develop<span class="hljs-comment">&quot; 编码</span><span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span><span class="hljs-comment">&quot; 不和 vi 兼容</span><span class="hljs-keyword">set</span> nocompatible<span class="hljs-comment">&quot; 备份和撤销文件</span><span class="hljs-keyword">set</span> nobackup<span class="hljs-keyword">set</span> noswapfile<span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;persistent_undo&#x27;</span>)  <span class="hljs-keyword">set</span> <span class="hljs-built_in">undofile</span>  <span class="hljs-keyword">set</span> undodir=~/.<span class="hljs-keyword">vim</span>/undodir  <span class="hljs-keyword">if</span> !isdirectory(&amp;undodir)    <span class="hljs-keyword">call</span> <span class="hljs-built_in">mkdir</span>(&amp;undodir, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">0700</span>)  <span class="hljs-keyword">endif</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 中文</span><span class="hljs-keyword">set</span> fileencodings=ucs-bom,utf-<span class="hljs-number">8</span>,gb18030,latin1,gbk,gb2312,cp936<span class="hljs-keyword">set</span> termencoding=utf-<span class="hljs-number">8</span><span class="hljs-comment">&quot; 鼠标支持</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;mouse&#x27;</span>)  <span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;gui_running&#x27;</span>) || (&amp;term =~ <span class="hljs-string">&#x27;xterm&#x27;</span> &amp;&amp; !has(<span class="hljs-string">&#x27;mac&#x27;</span>))    <span class="hljs-keyword">set</span> mouse=<span class="hljs-keyword">a</span>  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">set</span> mouse=nvi  <span class="hljs-keyword">endif</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 共享剪贴板</span><span class="hljs-keyword">set</span> clipboard=unnamed<span class="hljs-comment">&quot; 设置文本菜单</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;gui_running&#x27;</span>)  <span class="hljs-keyword">let</span> do_syntax_sel_menu = <span class="hljs-number">1</span>  <span class="hljs-keyword">let</span> do_no_lazyload_menus = <span class="hljs-number">1</span><span class="hljs-keyword">endif</span><span class="hljs-keyword">if</span> !has(<span class="hljs-string">&#x27;gui_running&#x27;</span>)  <span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;wildmenu&#x27;</span>)    <span class="hljs-keyword">set</span> wildmenu    <span class="hljs-keyword">set</span> cpoptions-=&lt;    <span class="hljs-keyword">set</span> wildcharm=<span class="hljs-symbol">&lt;C-Z&gt;</span>    <span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;F10&gt;</span>      :<span class="hljs-keyword">emenu</span> <span class="hljs-symbol">&lt;C-Z&gt;</span>    <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;F10&gt;</span> <span class="hljs-symbol">&lt;C-O&gt;</span>:<span class="hljs-keyword">emenu</span> <span class="hljs-symbol">&lt;C-Z&gt;</span>  <span class="hljs-keyword">endif</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 查找</span><span class="hljs-keyword">set</span> ignorecase<span class="hljs-keyword">set</span> smartcase<span class="hljs-keyword">set</span> hlsearch<span class="hljs-keyword">set</span> incsearch<span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;F2&gt;</span>      :<span class="hljs-keyword">nohlsearch</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;F2&gt;</span> <span class="hljs-symbol">&lt;C-O&gt;</span>:<span class="hljs-keyword">nohlsearch</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">set</span> scrolloff=<span class="hljs-number">1</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot;  显示设置</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot; 显示行号</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><span class="hljs-comment">&quot; 设置缩进</span><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">2</span><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">2</span><span class="hljs-comment">&quot; 突出显示当前行</span><span class="hljs-keyword">set</span> cursorline<span class="hljs-comment">&quot; 启动 vim 时关闭折叠代码</span><span class="hljs-keyword">set</span> nofoldenable<span class="hljs-comment">&quot; 主题</span><span class="hljs-keyword">syntax</span> enable<span class="hljs-keyword">colorscheme</span> molokai<span class="hljs-keyword">set</span> background=dark<span class="hljs-comment">&quot; 背景透明</span><span class="hljs-keyword">hi</span> Normal ctermfg=<span class="hljs-number">252</span> ctermbg=none<span class="hljs-comment">&quot; 将字体设置为Meslo LG S DZ Regular for Powerline 13号大小</span><span class="hljs-keyword">set</span> guifont=Meslo\ LG\ S\ DZ\ Regular\ <span class="hljs-keyword">for</span>\ Powerline:h13<span class="hljs-keyword">set</span> laststatus=<span class="hljs-number">2</span>                <span class="hljs-comment">&quot; 必须设置为2,否则状态栏不显示</span><span class="hljs-keyword">set</span> t_Co=<span class="hljs-number">256</span>                    <span class="hljs-comment">&quot; 开启256颜色之后，colorschema在vim里好看了许多</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot; vim-plug</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-keyword">call</span>     plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)<span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 代码自动补全</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot;  java https://github.com/artur-shaik/vim-javacomplete2</span>Plug <span class="hljs-string">&#x27;artur-shaik/vim-javacomplete2&#x27;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 美化</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 配色方案.</span>Plug <span class="hljs-string">&#x27;jakwings/vim-colors&#x27;</span>Plug <span class="hljs-string">&#x27;flazz/vim-colorschemes&#x27;</span><span class="hljs-comment">&quot; theme color</span>Plug <span class="hljs-string">&#x27;tomasr/molokai&#x27;</span> | Plug <span class="hljs-string">&#x27;altercation/solarized&#x27;</span><span class="hljs-comment">&quot; 彩虹括号</span>Plug <span class="hljs-string">&#x27;luochen1990/rainbow&#x27;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 树形目录</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span>                            <span class="hljs-comment">&quot; https://github.com/preservim/nerdtree</span>Plug <span class="hljs-string">&#x27;jistr/vim-nerdtree-tabs&#x27;</span>                        <span class="hljs-comment">&quot; https://github.com/jistr/vim-nerdtree-tabs</span>Plug <span class="hljs-string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span>                    <span class="hljs-comment">&quot; https://github.com/Xuyuanp/nerdtree-git-plugin</span>Plug <span class="hljs-string">&#x27;ryanoasis/vim-devicons&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/ryanoasis/vim-devicons</span>Plug <span class="hljs-string">&#x27;tiagofumo/vim-nerdtree-syntax-highlight&#x27;</span>        <span class="hljs-comment">&quot; https://github.com/tiagofumo/vim-nerdtree-syntax-highlight</span>Plug <span class="hljs-string">&#x27;tpope/vim-eunuch&#x27;</span>                               <span class="hljs-comment">&quot; https://github.com/tpope/vim-eunuch</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;C-n&gt;</span> :NERDTreeToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">let</span> NERDTreeMinimalUI = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> NERDTreeShowHidden = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:nerdtree_tabs_open_on_console_startup</span> = <span class="hljs-number">1</span><span class="hljs-comment">&quot; 开发的过程中，我们希望git信息直接在NERDTree中显示出来， 和Eclipse一样，修改的文件和增加的文件都给出相应的标注， 这时需要安装的插件就是 nerdtree-git-plugin,配置信息如下</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;    \ <span class="hljs-string">&quot;Modified&quot;</span>  : <span class="hljs-string">&quot;✹&quot;</span>,    \ <span class="hljs-string">&quot;Staged&quot;</span>    : <span class="hljs-string">&quot;✚&quot;</span>,    \ <span class="hljs-string">&quot;Untracked&quot;</span> : <span class="hljs-string">&quot;✭&quot;</span>,    \ <span class="hljs-string">&quot;Renamed&quot;</span>   : <span class="hljs-string">&quot;➜&quot;</span>,    \ <span class="hljs-string">&quot;Unmerged&quot;</span>  : <span class="hljs-string">&quot;═&quot;</span>,    \ <span class="hljs-string">&quot;Deleted&quot;</span>   : <span class="hljs-string">&quot;✖&quot;</span>,    \ <span class="hljs-string">&quot;Dirty&quot;</span>     : <span class="hljs-string">&quot;✗&quot;</span>,    \ <span class="hljs-string">&quot;Clean&quot;</span>     : <span class="hljs-string">&quot;✔︎&quot;</span>,    \ <span class="hljs-string">&quot;Unknown&quot;</span>   : <span class="hljs-string">&quot;?&quot;</span>    \ &#125;<span class="hljs-comment">&quot; i 在新的水平分割的窗口中打开</span><span class="hljs-comment">&quot; s 在新的竖直分割的窗口中打开</span><span class="hljs-comment">&quot; t 在标签页中打开</span><span class="hljs-comment">&quot; go 预览文件</span><span class="hljs-comment">&quot; r 刷新光标所在的目录</span><span class="hljs-comment">&quot; R 刷新当前根路径</span><span class="hljs-comment">&quot; I 显示隐藏文件</span><span class="hljs-comment">&quot; m 显示文件操作菜单</span><span class="hljs-comment">&quot; C 将根路径设置为光标所在的目录</span><span class="hljs-comment">&quot; u 设置上级目录为根路径</span><span class="hljs-comment">&quot; gT 前一个 tab</span><span class="hljs-comment">&quot; gt 后一个 tab</span><span class="hljs-comment">&quot; &lt;C-W&gt; 加方向键（h、j、k、l、&lt;Left&gt; 等）可以在窗口之间跳转</span><span class="hljs-comment">&quot; &lt;C-W&gt; + w 跳转到下一个窗口</span><span class="hljs-comment">&quot; &lt;C-W&gt; + s 和 :split 作用相同，把当前窗口横向一分为二</span><span class="hljs-comment">&quot; &lt;C-W&gt; + v 和 :vsplit 作用相同，把当前窗口纵向一分为二</span><span class="hljs-comment">&quot; &lt;C-W&gt; + o 或 :only 只保留当前窗口，关闭其他所有窗口</span><span class="hljs-comment">&quot; 组合快捷键：nnoremap是什么意思？——简单来说，nnoremap将一个组合快捷键映射为另一个快捷键。no部分，指的是在Vim的正常模式（Normal Mode）下，而不是可视模式下重新映射</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-J&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-J&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-j 切换到下方的分割窗口</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-K&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-K&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-k 切换到上方的分割窗口</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-L&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-L&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-l 切换到右侧的分割窗口</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-H&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-H&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-h 切换到左侧的分割窗口</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 标签</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;majutsushi/tagbar&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/majutsushi/tagbar</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;F9&gt;</span>      :TagbarToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;F9&gt;</span> <span class="hljs-symbol">&lt;C-O&gt;</span>:TagbarToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:tagbar_type_typescript</span> = &#123;  \ <span class="hljs-string">&#x27;ctagsbin&#x27;</span> : <span class="hljs-string">&#x27;tstags&#x27;</span>,  \ <span class="hljs-string">&#x27;ctagsargs&#x27;</span> : <span class="hljs-string">&#x27;-f-&#x27;</span>,  \ <span class="hljs-string">&#x27;kinds&#x27;</span>: [    \ <span class="hljs-string">&#x27;e:enums:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;f:function:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;t:typealias:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;M:Module:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;I:import:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;i:interface:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;C:class:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;m:method:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;p:property:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;v:variable:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;c:const:0:1&#x27;</span>,  \ ],  \ <span class="hljs-string">&#x27;sort&#x27;</span> : <span class="hljs-number">0</span>\ &#125;<span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 自动补全</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;Valloric/YouCompleteMe&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/ycm-core/YouCompleteMe</span>Plug <span class="hljs-string">&#x27;Raimondi/delimitMate&#x27;</span>                           <span class="hljs-comment">&quot; https://github.com/Raimondi/delimitMate</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span>fi :YcmCompleter FixIt<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span>gd :YcmCompleter GoToDefinition<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 语法高亮，检查</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;sheerun/vim-polyglot&#x27;</span>                           <span class="hljs-comment">&quot; https://github.com/sheerun/vim-polyglot</span>Plug <span class="hljs-string">&#x27;w0rp/ale&#x27;</span>                                       <span class="hljs-comment">&quot; https://github.com/w0rp/ale</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_fix_on_save</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_sign_column_always</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_sign_error</span> = <span class="hljs-string">&#x27;●&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_sign_warning</span> = <span class="hljs-string">&#x27;▶&#x27;</span><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-k&gt;</span> <span class="hljs-symbol">&lt;Plug&gt;</span>(ale_previous_wrap)<span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-j&gt;</span> <span class="hljs-symbol">&lt;Plug&gt;</span>(ale_next_wrap)<span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 全局搜索，快速打开文件</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: &#123; -&gt; fzf#install() &#125; &#125;   <span class="hljs-comment">&quot; https://github.com/junegunn/fzf</span>Plug <span class="hljs-string">&#x27;junegunn/fzf.vim&#x27;</span>                               <span class="hljs-comment">&quot; https://github.com/junegunn/fzf.vim</span>Plug <span class="hljs-string">&#x27;ctrlpvim/ctrlp.vim&#x27;</span>                             <span class="hljs-comment">&quot; https://github.com/ctrlpvim/ctrlp.vim</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctrlp_user_command</span> = [<span class="hljs-string">&#x27;.git&#x27;</span>, <span class="hljs-string">&#x27;cd %s &amp;&amp; git ls-files -co --exclude-standard&#x27;</span>]<span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctrlp_regexp</span> = <span class="hljs-number">1</span><span class="hljs-comment">&quot; &lt;c-r&gt;: 切换匹配模式</span><span class="hljs-comment">&quot; &lt;c-t&gt;：在新的 tab 中打开</span><span class="hljs-comment">&quot; :Rg</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 状态条</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span>                        <span class="hljs-comment">&quot; https://github.com/vim-airline/vim-airline</span>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline-themes&#x27;</span>                 <span class="hljs-comment">&quot; https://github.com/vim-airline/vim-airline-themes</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_theme</span>=<span class="hljs-string">&#x27;molokai&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_powerline_fonts</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#tabline#enabled = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#tabline#formatter = <span class="hljs-string">&#x27;unique_tail&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#ale#enabled = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#tabline#buffer_nr_show = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#nerdtree_statusline = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_section_c</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 注释</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;scrooloose/nerdcommenter&#x27;</span>                       <span class="hljs-comment">&quot; https://github.com/preservim/nerdcommenter</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDSpaceDelims</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDDefaultAlign</span> = <span class="hljs-string">&#x27;left&#x27;</span><span class="hljs-comment">&quot; &lt;leader&gt;c&lt;space&gt; 注释/取消注释</span><span class="hljs-comment">&quot; &lt;leader&gt;ca 切换　// 和 /* */</span><span class="hljs-comment">&quot; &lt;leader&gt;cs /* 块注释 */</span><span class="hljs-comment">&quot; &lt;leader&gt;cm 只用一组符号注释</span><span class="hljs-comment">&quot; &lt;leader&gt;cA 在行尾添加注释</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; git</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;airblade/vim-gitgutter&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/airblade/vim-gitgutter</span>Plug <span class="hljs-string">&#x27;tpope/vim-fugitive&#x27;</span>                             <span class="hljs-comment">&quot; https://github.com/tpope/vim-fugitive</span>Plug <span class="hljs-string">&#x27;tpope/vim-rhubarb&#x27;</span>                              <span class="hljs-comment">&quot; https://github.com/tpope/vim-rhubarb</span><span class="hljs-keyword">set</span> updatetime=<span class="hljs-number">100</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gitgutter_max_signs</span> = -<span class="hljs-number">1</span><span class="hljs-comment">&quot; jump to next hunk: ]c</span><span class="hljs-comment">&quot; jump to previous hunk: [c</span><span class="hljs-comment">&quot; stage the hunk: &lt;Leader&gt;hs</span><span class="hljs-comment">&quot; undo the hunk: &lt;Leader&gt;hu</span><span class="hljs-comment">&quot; preview the hunk: &lt;Leader&gt;hp</span><span class="hljs-comment">&quot; :G</span><span class="hljs-comment">&quot; :Gvdiffsplit</span><span class="hljs-comment">&quot; :GBrowse</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot; s: 加到暂存区中</span><span class="hljs-comment">&quot; u: 重置加入暂存区的修改</span><span class="hljs-comment">&quot; X: 丢弃修改</span><span class="hljs-comment">&quot; ca: 更改上一次提交</span><span class="hljs-comment">&quot; ce: 使用上一次提交</span><span class="hljs-comment">&quot; =: 切换 diff 显示</span><span class="hljs-comment">&quot; cc: 提交当前暂存区中的文件</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Markdown</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;iamcco/markdown-preview.nvim&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;cd app &amp;&amp; yarn install&#x27;</span>  &#125;      <span class="hljs-comment">&quot; https://github.com/iamcco/markdown-preview.nvim</span><span class="hljs-comment">&quot; :MarkdownPreview</span><span class="hljs-comment">&quot; :MarkdownPreviewStop</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Emmet</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;mattn/emmet-vim&#x27;</span>                                <span class="hljs-comment">&quot; https://github.com/mattn/emmet-vim</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:user_emmet_leader_key</span>=<span class="hljs-string">&#x27;&lt;C-Z&gt;&#x27;</span><span class="hljs-comment">&quot; &lt;C-Z&gt;,</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Prettier</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;prettier/vim-prettier&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;npm install&#x27;</span> &#125;     <span class="hljs-comment">&quot; https://github.com/prettier/vim-prettier</span><span class="hljs-keyword">autocmd</span> BufWritePre *.js,*.jsx,*.mjs,*.<span class="hljs-keyword">ts</span>,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync<span class="hljs-comment">&quot; :PrettierAsync</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Wakatime</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;wakatime/vim-wakatime&#x27;</span>                              <span class="hljs-comment">&quot; https://github.com/wakatime/vim-wakatime</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Whitespace</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;ntpeters/vim-better-whitespace&#x27;</span>                     <span class="hljs-comment">&quot; https://github.com/ntpeters/vim-better-whitespace</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:better_whitespace_enabled</span>=<span class="hljs-number">1</span><span class="hljs-comment">&quot; :StripWhitespace</span><span class="hljs-keyword">call</span> plug#end()<span class="hljs-comment">&quot; PlugInstall</span><span class="hljs-comment">&quot; PlugUpdate</span><span class="hljs-comment">&quot; PlugClean</span><span class="hljs-comment">&quot; PlugUpgrade</span><span class="hljs-comment">&quot; PlugStatus</span><span class="hljs-comment">&quot; PlugDiff</span><span class="hljs-comment">&quot; PlugSnapshot</span></code></pre><p><strong>更新: 2022-2-19 04:22:41 版</strong></p><pre><code class="hljs vim"><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot; 基本设置</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot;默认文件夹</span><span class="hljs-comment">&quot;cd  /Users/admin/Documents/prj/develop</span><span class="hljs-keyword">autocmd</span> FileType java <span class="hljs-keyword">setlocal</span> omnifunc=javacomplete#Complete<span class="hljs-comment">&quot; 编码</span><span class="hljs-keyword">set</span> enc=utf-<span class="hljs-number">8</span><span class="hljs-comment">&quot; 不和 vi 兼容</span><span class="hljs-keyword">set</span> nocompatible<span class="hljs-comment">&quot; 不要用空格代替制表符</span><span class="hljs-keyword">set</span> noexpandtab<span class="hljs-comment">&quot; 在行和段开始处使用制表符</span><span class="hljs-keyword">set</span> smarttab<span class="hljs-comment">&quot; Tab键的宽度</span><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">4</span><span class="hljs-comment">&quot; 统一缩进为4</span><span class="hljs-keyword">set</span> softtabstop=<span class="hljs-number">4</span><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">4</span><span class="hljs-comment">&quot; 自动缩进</span><span class="hljs-keyword">set</span> autoindent<span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span><span class="hljs-comment">&quot; 字符间插入的像素行数目</span><span class="hljs-keyword">set</span> linespace=<span class="hljs-number">0</span><span class="hljs-comment">&quot; 使回格键（backspace）正常处理indent, eol, start等</span><span class="hljs-keyword">set</span> backspace=<span class="hljs-number">2</span><span class="hljs-comment">&quot; 在被分割的窗口间显示空白，便于阅读</span><span class="hljs-keyword">set</span> fillchars=<span class="hljs-keyword">vert</span>:\ ,stl:\ ,stlnc:\<span class="hljs-comment">&quot; 备份和撤销文件</span><span class="hljs-keyword">set</span> nobackup<span class="hljs-keyword">set</span> noswapfile<span class="hljs-comment">&quot; 输入的命令显示出来，看的清楚些  </span><span class="hljs-comment">&quot;set showcmd </span><span class="hljs-comment">&quot; 允许折叠</span><span class="hljs-keyword">set</span> foldenable<span class="hljs-comment">&quot; 手动折叠</span><span class="hljs-keyword">set</span> foldmethod=manual<span class="hljs-comment">&quot; 显示中文帮助</span><span class="hljs-comment">&quot; wget https://sourceforge.net/projects/vimcdoc/files/vimcdoc/vimcdoc-2.1.0.tar.gz/download -O vimcdoc-2.1.0.tar.gz</span><span class="hljs-comment">&quot; tar -xzvf vimcdoc-2.1.0.tar.gz</span><span class="hljs-comment">&quot; mv vimcdoc-2.1.0/doc ~/.vim/</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">version</span> &gt;= <span class="hljs-number">603</span>    <span class="hljs-keyword">set</span> helplang=<span class="hljs-keyword">cn</span>    <span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span><span class="hljs-keyword">endif</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;persistent_undo&#x27;</span>)  <span class="hljs-keyword">set</span> <span class="hljs-built_in">undofile</span>  <span class="hljs-keyword">set</span> undodir=~/.<span class="hljs-keyword">vim</span>/undodir  <span class="hljs-keyword">if</span> !isdirectory(&amp;undodir)    <span class="hljs-keyword">call</span> <span class="hljs-built_in">mkdir</span>(&amp;undodir, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">0700</span>)  <span class="hljs-keyword">endif</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 中文</span><span class="hljs-keyword">set</span> fileencodings=ucs-bom,utf-<span class="hljs-number">8</span>,gb18030,latin1<span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span><span class="hljs-keyword">set</span> termencoding=utf-<span class="hljs-number">8</span><span class="hljs-comment">&quot; 鼠标支持</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;mouse&#x27;</span>)  <span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;gui_running&#x27;</span>) || (&amp;term =~ <span class="hljs-string">&#x27;xterm&#x27;</span> &amp;&amp; !has(<span class="hljs-string">&#x27;mac&#x27;</span>))    <span class="hljs-keyword">set</span> mouse=<span class="hljs-keyword">a</span>  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">set</span> mouse=nvi  <span class="hljs-keyword">endif</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 共享剪贴板</span><span class="hljs-keyword">set</span> clipboard=unnamed<span class="hljs-comment">&quot; 设置文本菜单</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;gui_running&#x27;</span>)  <span class="hljs-keyword">let</span> do_syntax_sel_menu = <span class="hljs-number">1</span>  <span class="hljs-keyword">let</span> do_no_lazyload_menus = <span class="hljs-number">1</span><span class="hljs-keyword">endif</span><span class="hljs-keyword">if</span> !has(<span class="hljs-string">&#x27;gui_running&#x27;</span>)  <span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;wildmenu&#x27;</span>)    <span class="hljs-keyword">set</span> wildmenu    <span class="hljs-keyword">set</span> cpoptions-=&lt;    <span class="hljs-keyword">set</span> wildcharm=<span class="hljs-symbol">&lt;C-Z&gt;</span>    <span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;F10&gt;</span>      :<span class="hljs-keyword">emenu</span> <span class="hljs-symbol">&lt;C-Z&gt;</span>    <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;F10&gt;</span> <span class="hljs-symbol">&lt;C-O&gt;</span>:<span class="hljs-keyword">emenu</span> <span class="hljs-symbol">&lt;C-Z&gt;</span>  <span class="hljs-keyword">endif</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot; 查找</span><span class="hljs-comment">&quot; 搜索忽略大小写</span><span class="hljs-keyword">set</span> ignorecase<span class="hljs-comment">&quot; </span><span class="hljs-keyword">set</span> smartcase<span class="hljs-comment">&quot; 搜索逐字符高亮</span><span class="hljs-keyword">set</span> hlsearch<span class="hljs-keyword">set</span> incsearch<span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;F2&gt;</span>      :<span class="hljs-keyword">nohlsearch</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;F2&gt;</span> <span class="hljs-symbol">&lt;C-O&gt;</span>:<span class="hljs-keyword">nohlsearch</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">set</span> scrolloff=<span class="hljs-number">1</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot;  显示设置</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot; 显示行号</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><span class="hljs-comment">&quot; 设置相对行号</span><span class="hljs-keyword">set</span> relativenumber<span class="hljs-comment">&quot; 设置缩进</span><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">2</span><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">2</span><span class="hljs-comment">&quot; 突出显示当前行</span><span class="hljs-keyword">set</span> cursorline<span class="hljs-comment">&quot; 启动 vim 时关闭折叠代码</span><span class="hljs-keyword">set</span> nofoldenable<span class="hljs-comment">&quot; 主题</span><span class="hljs-keyword">syntax</span> enable<span class="hljs-keyword">colorscheme</span> molokai<span class="hljs-keyword">set</span> background=dark<span class="hljs-comment">&quot; 背景透明</span><span class="hljs-keyword">hi</span> Normal ctermfg=<span class="hljs-number">252</span> ctermbg=none<span class="hljs-comment">&quot; 将字体设置为Meslo LG S DZ Regular for Powerline 13号大小</span><span class="hljs-keyword">set</span> guifont=Meslo\ LG\ S\ DZ\ Regular\ <span class="hljs-keyword">for</span>\ Powerline:h13<span class="hljs-keyword">set</span> laststatus=<span class="hljs-number">2</span>                <span class="hljs-comment">&quot; 必须设置为2,否则状态栏不显示</span><span class="hljs-keyword">set</span> t_Co=<span class="hljs-number">256</span>                    <span class="hljs-comment">&quot; 开启256颜色之后，colorschema在vim里好看了许多</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-comment">&quot; vim-plug</span><span class="hljs-comment">&quot;==========================================</span><span class="hljs-keyword">call</span>     plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)<span class="hljs-comment">&quot; Surround  </span>Plug <span class="hljs-string">&#x27;tpope/vim-surround&#x27;</span>  <span class="hljs-comment">&quot; python自动补全</span><span class="hljs-comment">&quot; Python autocompletion, go to definition.  </span>Plug <span class="hljs-string">&#x27;davidhalter/jedi-vim&#x27;</span>  <span class="hljs-comment">&quot; Better autocompletion</span>Plug <span class="hljs-string">&#x27;Shougo/neocomplcache.vim&#x27;</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;python&#x27;</span>)<span class="hljs-comment">&quot; YAPF formatter for Python</span>Plug <span class="hljs-string">&#x27;pignacio/vim-yapf-format&#x27;</span><span class="hljs-keyword">endif</span><span class="hljs-comment">&quot;  python 自动补全</span><span class="hljs-comment">&quot;  wget https://github.com/rkulla/pydiction/archive/master.zip</span><span class="hljs-comment">&quot;  unzip -q master</span><span class="hljs-comment">&quot;  mv pydiction-master pydiction</span><span class="hljs-comment">&quot;  mkdir -p ~/.vim/tools/pydiction</span><span class="hljs-comment">&quot;  cp -r pydiction/after ~/.vim</span><span class="hljs-comment">&quot;  cp pydiction/complete-dict ~/.vim/tools/pydiction</span><span class="hljs-comment">&quot;</span><span class="hljs-keyword">filetype</span> plugin <span class="hljs-keyword">on</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:pydiction_location</span> = <span class="hljs-string">&#x27;~/.vim/tools/pydiction/complete-dict&#x27;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 代码自动补全 </span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;Valloric/YouCompleteMe&#x27;</span><span class="hljs-comment">&quot; *********************************************</span><span class="hljs-comment">&quot; YCM插件相关</span><span class="hljs-comment">&quot; *********************************************</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_autoclose_preview_window_after_completion</span>=<span class="hljs-number">1</span><span class="hljs-comment">&quot; 跳转到定义处</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;leader&gt;</span>g :YcmCompleter GoToDefinitionElseDeclaration<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot; 默认tab、s-tab和自动补全冲突</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_key_list_select_completion</span> = [<span class="hljs-string">&#x27;&lt;TAB&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;c-n&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;Down&gt;&#x27;</span>]<span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_key_list_previous_completion</span> = [<span class="hljs-string">&#x27;&lt;S-TAB&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;c-p&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;Up&gt;&#x27;</span>]<span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_auto_trigger</span> = <span class="hljs-number">1</span><span class="hljs-comment">&quot;  java https://github.com/artur-shaik/vim-javacomplete2</span>Plug <span class="hljs-string">&#x27;artur-shaik/vim-javacomplete2&#x27;</span><span class="hljs-keyword">autocmd</span> FileType java <span class="hljs-keyword">setlocal</span> omnifunc=javacomplete#Complete<span class="hljs-keyword">let</span> <span class="hljs-variable">g:SuperTabDefaultCompletionType</span> = <span class="hljs-string">&#x27;&lt;C-x&gt;&lt;C-o&gt;&#x27;</span><span class="hljs-comment">&quot;inoremap &lt;buffer&gt; &lt;C-X&gt;&lt;C-U&gt; &lt;C-X&gt;&lt;C-U&gt;&lt;C-P&gt;</span><span class="hljs-comment">&quot;inoremap &lt;buffer&gt; &lt;C-S-Space&gt; &lt;C-X&gt;&lt;C-U&gt;&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> FileType java <span class="hljs-keyword">set</span> completefunc=javacomplete#CompleteParamsInfo<span class="hljs-keyword">autocmd</span> FileType java <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;expr&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span> <span class="hljs-built_in">pumvisible</span>()?<span class="hljs-string">&quot;\&lt;C-Y&gt;&quot;</span>:<span class="hljs-string">&quot;&lt;CR&gt;&quot;</span><span class="hljs-keyword">autocmd</span> FileType java <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span> . .<span class="hljs-symbol">&lt;C-X&gt;</span><span class="hljs-symbol">&lt;C-O&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  A  A<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  B  B<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  C  C<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  D  D<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  E  E<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  F  F<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  G  G<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  H  H<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  I  I<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  J  J<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  K  K<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  L  L<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  M  M<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  <span class="hljs-keyword">N</span>  <span class="hljs-keyword">N</span><span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  O  O<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  <span class="hljs-keyword">P</span>  <span class="hljs-keyword">P</span><span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  Q  Q<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  R  R<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  S  S<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  T  T<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  U  U<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  V  V<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  W  W<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  <span class="hljs-keyword">X</span>  <span class="hljs-keyword">X</span><span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  Y  Y<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-keyword">autocmd</span> Filetype java,javascript,css,html,xml <span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;buffer&gt;</span>  Z  Z<span class="hljs-symbol">&lt;C-N&gt;</span><span class="hljs-symbol">&lt;C-P&gt;</span><span class="hljs-comment">&quot; ==========================================</span><span class="hljs-comment">&quot; LSP 补全方式</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot; 需要额外安装language server, 如果不想要自己可以注释掉</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot;  参考: https://web.archive.org/web/20211021091123/https://www.kawabangga.com/posts/3745</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot;  memo: 没有生效，暂时弃坑!</span><span class="hljs-comment">&quot; </span><span class="hljs-comment">&quot; ===================================================== </span><span class="hljs-comment">&quot;Plug &#x27;prabirshrestha/async.vim&#x27;</span><span class="hljs-comment">&quot;Plug &#x27;prabirshrestha/asyncomplete.vim&#x27;</span><span class="hljs-comment">&quot;Plug &#x27;prabirshrestha/vim-lsp&#x27;</span><span class="hljs-comment">&quot;Plug &#x27;prabirshrestha/asyncomplete-lsp.vim&#x27;</span><span class="hljs-string">&quot;inoremap &lt;expr&gt; &lt;Tab&gt; pumvisible() ? &quot;</span>\<span class="hljs-symbol">&lt;C-n&gt;</span><span class="hljs-string">&quot; : &quot;</span>\<span class="hljs-symbol">&lt;Tab&gt;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot;inoremap &lt;expr&gt; &lt;S-Tab&gt; pumvisible() ? &quot;</span>\<span class="hljs-symbol">&lt;C-p&gt;</span><span class="hljs-string">&quot; : &quot;</span>\<span class="hljs-symbol">&lt;S-Tab&gt;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot;inoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? &quot;</span>\<span class="hljs-symbol">&lt;C-y&gt;</span>\<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-string">&quot; : &quot;</span>\<span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot; bash lsp(language server)</span><span class="hljs-comment">&quot; https://github.com/bash-lsp/bash-language-server</span><span class="hljs-comment">&quot; 先在终端执行: npm i -g bash-language-server</span><span class="hljs-comment">&quot; For Vim 8 or later install the plugin prabirshrestha/vim-lsp and add the following configuration to .vimrc:</span><span class="hljs-comment">&quot;if executable(&#x27;bash-language-server&#x27;)</span><span class="hljs-comment">&quot;  au User lsp_setup call lsp#register_server(&#123;</span><span class="hljs-comment">&quot;        \ &#x27;name&#x27;: &#x27;bash-language-server&#x27;,</span><span class="hljs-comment">&quot;        \ &#x27;cmd&#x27;: &#123;server_info-&gt;[&amp;shell, &amp;shellcmdflag, &#x27;bash-language-server start&#x27;]&#125;,</span><span class="hljs-comment">&quot;        \ &#x27;whitelist&#x27;: [&#x27;sh&#x27;],</span><span class="hljs-comment">&quot;        \ &#125;)</span><span class="hljs-comment">&quot;endif</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 美化</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 配色方案.</span>Plug <span class="hljs-string">&#x27;jakwings/vim-colors&#x27;</span>Plug <span class="hljs-string">&#x27;flazz/vim-colorschemes&#x27;</span><span class="hljs-comment">&quot; theme color</span>Plug <span class="hljs-string">&#x27;tomasr/molokai&#x27;</span> | Plug <span class="hljs-string">&#x27;altercation/solarized&#x27;</span><span class="hljs-comment">&quot; 彩虹括号</span>Plug <span class="hljs-string">&#x27;luochen1990/rainbow&#x27;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 树形目录</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span>                            <span class="hljs-comment">&quot; https://github.com/preservim/nerdtree</span>Plug <span class="hljs-string">&#x27;jistr/vim-nerdtree-tabs&#x27;</span>                        <span class="hljs-comment">&quot; https://github.com/jistr/vim-nerdtree-tabs</span>Plug <span class="hljs-string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span>                    <span class="hljs-comment">&quot; https://github.com/Xuyuanp/nerdtree-git-plugin</span>Plug <span class="hljs-string">&#x27;ryanoasis/vim-devicons&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/ryanoasis/vim-devicons</span>Plug <span class="hljs-string">&#x27;tiagofumo/vim-nerdtree-syntax-highlight&#x27;</span>        <span class="hljs-comment">&quot; https://github.com/tiagofumo/vim-nerdtree-syntax-highlight</span>Plug <span class="hljs-string">&#x27;tpope/vim-eunuch&#x27;</span>                               <span class="hljs-comment">&quot; https://github.com/tpope/vim-eunuch</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;C-n&gt;</span> :NERDTreeToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">let</span> NERDTreeMinimalUI = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> NERDTreeShowHidden = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:nerdtree_tabs_open_on_console_startup</span> = <span class="hljs-number">1</span><span class="hljs-comment">&quot; 开发的过程中，我们希望git信息直接在NERDTree中显示出来， 和Eclipse一样，修改的文件和增加的文件都给出相应的标注， 这时需要安装的插件就是 nerdtree-git-plugin,配置信息如下</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDTreeGitStatusIndicatorMapCustom</span> = &#123;    \ <span class="hljs-string">&quot;Modified&quot;</span>  : <span class="hljs-string">&quot;✹&quot;</span>,    \ <span class="hljs-string">&quot;Staged&quot;</span>    : <span class="hljs-string">&quot;✚&quot;</span>,    \ <span class="hljs-string">&quot;Untracked&quot;</span> : <span class="hljs-string">&quot;✭&quot;</span>,    \ <span class="hljs-string">&quot;Renamed&quot;</span>   : <span class="hljs-string">&quot;➜&quot;</span>,    \ <span class="hljs-string">&quot;Unmerged&quot;</span>  : <span class="hljs-string">&quot;═&quot;</span>,    \ <span class="hljs-string">&quot;Deleted&quot;</span>   : <span class="hljs-string">&quot;✖&quot;</span>,    \ <span class="hljs-string">&quot;Dirty&quot;</span>     : <span class="hljs-string">&quot;✗&quot;</span>,    \ <span class="hljs-string">&quot;Clean&quot;</span>     : <span class="hljs-string">&quot;✔︎&quot;</span>,    \ <span class="hljs-string">&quot;Unknown&quot;</span>   : <span class="hljs-string">&quot;?&quot;</span>    \ &#125;<span class="hljs-comment">&quot; open nerdtree with the current file selected</span><span class="hljs-keyword">nmap</span> ,t :NERDTreeFind<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot; i 在新的水平分割的窗口中打开</span><span class="hljs-comment">&quot; s 在新的竖直分割的窗口中打开</span><span class="hljs-comment">&quot; t 在标签页中打开</span><span class="hljs-comment">&quot; go 预览文件</span><span class="hljs-comment">&quot; r 刷新光标所在的目录</span><span class="hljs-comment">&quot; R 刷新当前根路径</span><span class="hljs-comment">&quot; I 显示隐藏文件</span><span class="hljs-comment">&quot; m 显示文件操作菜单</span><span class="hljs-comment">&quot; C 将根路径设置为光标所在的目录</span><span class="hljs-comment">&quot; u 设置上级目录为根路径</span><span class="hljs-comment">&quot; gT 前一个 tab</span><span class="hljs-comment">&quot; gt 后一个 tab</span><span class="hljs-comment">&quot; &lt;C-W&gt; 加方向键（h、j、k、l、&lt;Left&gt; 等）可以在窗口之间跳转</span><span class="hljs-comment">&quot; &lt;C-W&gt; + w 跳转到下一个窗口</span><span class="hljs-comment">&quot; &lt;C-W&gt; + s 和 :split 作用相同，把当前窗口横向一分为二</span><span class="hljs-comment">&quot; &lt;C-W&gt; + v 和 :vsplit 作用相同，把当前窗口纵向一分为二</span><span class="hljs-comment">&quot; &lt;C-W&gt; + o 或 :only 只保留当前窗口，关闭其他所有窗口</span><span class="hljs-comment">&quot; 组合快捷键：nnoremap是什么意思？——简单来说，nnoremap将一个组合快捷键映射为另一个快捷键。no部分，指的是在Vim的正常模式（Normal Mode）下，而不是可视模式下重新映射</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-J&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-J&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-j 切换到下方的分割窗口</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-K&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-K&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-k 切换到上方的分割窗口</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-L&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-L&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-l 切换到右侧的分割窗口</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-H&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-H&gt;</span>    <span class="hljs-comment">&quot; 组合快捷键：- Ctrl-h 切换到左侧的分割窗口</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 标签</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;majutsushi/tagbar&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/majutsushi/tagbar</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;F9&gt;</span>      :TagbarToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;F9&gt;</span> <span class="hljs-symbol">&lt;C-O&gt;</span>:TagbarToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:tagbar_type_typescript</span> = &#123;  \ <span class="hljs-string">&#x27;ctagsbin&#x27;</span> : <span class="hljs-string">&#x27;tstags&#x27;</span>,  \ <span class="hljs-string">&#x27;ctagsargs&#x27;</span> : <span class="hljs-string">&#x27;-f-&#x27;</span>,  \ <span class="hljs-string">&#x27;kinds&#x27;</span>: [    \ <span class="hljs-string">&#x27;e:enums:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;f:function:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;t:typealias:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;M:Module:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;I:import:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;i:interface:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;C:class:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;m:method:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;p:property:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;v:variable:0:1&#x27;</span>,    \ <span class="hljs-string">&#x27;c:const:0:1&#x27;</span>,  \ ],  \ <span class="hljs-string">&#x27;sort&#x27;</span> : <span class="hljs-number">0</span>\ &#125;<span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 自动补全</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;Valloric/YouCompleteMe&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/ycm-core/YouCompleteMe</span>Plug <span class="hljs-string">&#x27;Raimondi/delimitMate&#x27;</span>                           <span class="hljs-comment">&quot; https://github.com/Raimondi/delimitMate</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span>fi :YcmCompleter FixIt<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span>gd :YcmCompleter GoToDefinition<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 语法高亮，检查</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;sheerun/vim-polyglot&#x27;</span>                           <span class="hljs-comment">&quot; https://github.com/sheerun/vim-polyglot</span>Plug <span class="hljs-string">&#x27;w0rp/ale&#x27;</span>                                       <span class="hljs-comment">&quot; https://github.com/w0rp/ale</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_fix_on_save</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_sign_column_always</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_sign_error</span> = <span class="hljs-string">&#x27;●&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ale_sign_warning</span> = <span class="hljs-string">&#x27;▶&#x27;</span><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-k&gt;</span> <span class="hljs-symbol">&lt;Plug&gt;</span>(ale_previous_wrap)<span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-j&gt;</span> <span class="hljs-symbol">&lt;Plug&gt;</span>(ale_next_wrap)<span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 全局搜索，快速打开文件</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;junegunn/fzf&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: &#123; -&gt; fzf#install() &#125; &#125;   <span class="hljs-comment">&quot; https://github.com/junegunn/fzf</span>Plug <span class="hljs-string">&#x27;junegunn/fzf.vim&#x27;</span>                               <span class="hljs-comment">&quot; https://github.com/junegunn/fzf.vim</span>Plug <span class="hljs-string">&#x27;ctrlpvim/ctrlp.vim&#x27;</span>                             <span class="hljs-comment">&quot; https://github.com/ctrlpvim/ctrlp.vim</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctrlp_user_command</span> = [<span class="hljs-string">&#x27;.git&#x27;</span>, <span class="hljs-string">&#x27;cd %s &amp;&amp; git ls-files -co --exclude-standard&#x27;</span>]<span class="hljs-keyword">let</span> <span class="hljs-variable">g:ctrlp_regexp</span> = <span class="hljs-number">1</span><span class="hljs-comment">&quot; &lt;c-r&gt;: 切换匹配模式</span><span class="hljs-comment">&quot; &lt;c-t&gt;：在新的 tab 中打开</span><span class="hljs-comment">&quot; :Rg</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 状态条</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span>                        <span class="hljs-comment">&quot; https://github.com/vim-airline/vim-airline</span>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline-themes&#x27;</span>                 <span class="hljs-comment">&quot; https://github.com/vim-airline/vim-airline-themes</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_theme</span>=<span class="hljs-string">&#x27;molokai&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_powerline_fonts</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#tabline#enabled = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#tabline#formatter = <span class="hljs-string">&#x27;unique_tail&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#ale#enabled = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#tabline#buffer_nr_show = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline</span>#extensions#nerdtree_statusline = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_section_c</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 注释</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;scrooloose/nerdcommenter&#x27;</span>                       <span class="hljs-comment">&quot; https://github.com/preservim/nerdcommenter</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDSpaceDelims</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDDefaultAlign</span> = <span class="hljs-string">&#x27;left&#x27;</span><span class="hljs-comment">&quot; &lt;leader&gt;c&lt;space&gt; 注释/取消注释</span><span class="hljs-comment">&quot; &lt;leader&gt;ca 切换　// 和 /* */</span><span class="hljs-comment">&quot; &lt;leader&gt;cs /* 块注释 */</span><span class="hljs-comment">&quot; &lt;leader&gt;cm 只用一组符号注释</span><span class="hljs-comment">&quot; &lt;leader&gt;cA 在行尾添加注释</span><span class="hljs-comment">&quot; &lt;leader&gt; 默认为 \</span><span class="hljs-comment">&quot; 在vim的普通模式下使用“\cc”， 可以轻松注释掉光标所在的行；</span><span class="hljs-comment">&quot; 在visual模式下，使用这个组合键“\cc”， 可以轻松注释掉选择的代码块。</span><span class="hljs-comment">&quot;  &lt;Esc&gt; 是ESC的意思, 先到行首输入/*，然后ESC，到行尾输入*/, j向下移动一行</span><span class="hljs-comment">&quot; /* 注释该行 */</span><span class="hljs-keyword">map</span> =  I/*<span class="hljs-symbol">&lt;space&gt;</span><span class="hljs-symbol">&lt;Esc&gt;</span> A */<span class="hljs-symbol">&lt;Esc&gt;</span><span class="hljs-keyword">j</span><span class="hljs-keyword">map</span> == I#<span class="hljs-symbol">&lt;space&gt;</span><span class="hljs-symbol">&lt;Esc&gt;</span><span class="hljs-comment">&quot;数字 0 的意思是回到当前行的行首， 而 $ 是回到行尾 ， x 是删除一个字符， 所以 xxx 就是删除三个字符</span><span class="hljs-comment">&quot; /* 消除该行注释 */</span><span class="hljs-keyword">map</span> - <span class="hljs-number">0</span>xxx$xxxj<span class="hljs-keyword">map</span> -- I<span class="hljs-symbol">&lt;Esc&gt;</span>xx<span class="hljs-symbol">&lt;Esc&gt;</span> <span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; git</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;airblade/vim-gitgutter&#x27;</span>                         <span class="hljs-comment">&quot; https://github.com/airblade/vim-gitgutter</span>Plug <span class="hljs-string">&#x27;tpope/vim-fugitive&#x27;</span>                             <span class="hljs-comment">&quot; https://github.com/tpope/vim-fugitive</span>Plug <span class="hljs-string">&#x27;tpope/vim-rhubarb&#x27;</span>                              <span class="hljs-comment">&quot; https://github.com/tpope/vim-rhubarb</span><span class="hljs-keyword">set</span> updatetime=<span class="hljs-number">100</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:gitgutter_max_signs</span> = -<span class="hljs-number">1</span><span class="hljs-comment">&quot; jump to next hunk: ]c</span><span class="hljs-comment">&quot; jump to previous hunk: [c</span><span class="hljs-comment">&quot; stage the hunk: &lt;Leader&gt;hs</span><span class="hljs-comment">&quot; undo the hunk: &lt;Leader&gt;hu</span><span class="hljs-comment">&quot; preview the hunk: &lt;Leader&gt;hp</span><span class="hljs-comment">&quot; :G</span><span class="hljs-comment">&quot; :Gvdiffsplit</span><span class="hljs-comment">&quot; :GBrowse</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot; s: 加到暂存区中</span><span class="hljs-comment">&quot; u: 重置加入暂存区的修改</span><span class="hljs-comment">&quot; X: 丢弃修改</span><span class="hljs-comment">&quot; ca: 更改上一次提交</span><span class="hljs-comment">&quot; ce: 使用上一次提交</span><span class="hljs-comment">&quot; =: 切换 diff 显示</span><span class="hljs-comment">&quot; cc: 提交当前暂存区中的文件</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Markdown</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;iamcco/markdown-preview.nvim&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;cd app &amp;&amp; yarn install&#x27;</span>  &#125;      <span class="hljs-comment">&quot; https://github.com/iamcco/markdown-preview.nvim</span><span class="hljs-comment">&quot; :MarkdownPreview</span><span class="hljs-comment">&quot; :MarkdownPreviewStop</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Emmet</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;mattn/emmet-vim&#x27;</span>                                <span class="hljs-comment">&quot; https://github.com/mattn/emmet-vim</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:user_emmet_leader_key</span>=<span class="hljs-string">&#x27;&lt;C-Z&gt;&#x27;</span><span class="hljs-comment">&quot; &lt;C-Z&gt;,</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Prettier</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;prettier/vim-prettier&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;npm install&#x27;</span> &#125;     <span class="hljs-comment">&quot; https://github.com/prettier/vim-prettier</span><span class="hljs-keyword">autocmd</span> BufWritePre *.js,*.jsx,*.mjs,*.<span class="hljs-keyword">ts</span>,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync<span class="hljs-comment">&quot; :PrettierAsync</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Wakatime</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;wakatime/vim-wakatime&#x27;</span>                              <span class="hljs-comment">&quot; https://github.com/wakatime/vim-wakatime</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; Whitespace</span><span class="hljs-comment">&quot; -----------------------------------------------</span>Plug <span class="hljs-string">&#x27;ntpeters/vim-better-whitespace&#x27;</span>                     <span class="hljs-comment">&quot; https://github.com/ntpeters/vim-better-whitespace</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:better_whitespace_enabled</span>=<span class="hljs-number">1</span><span class="hljs-comment">&quot; :StripWhitespace</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 新文件标题</span><span class="hljs-comment">&quot; -----------------------------------------------</span><span class="hljs-comment">&quot; 侦查文件类型</span><span class="hljs-keyword">filetype</span> <span class="hljs-keyword">on</span><span class="hljs-comment">&quot; 载入文件类型插件</span><span class="hljs-keyword">filetype</span> plugin <span class="hljs-keyword">on</span><span class="hljs-comment">&quot; 为特定文件类型载入相关缩进文件</span><span class="hljs-keyword">filetype</span> <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span><span class="hljs-comment">&quot;新建.c,.h,.sh,.java文件，自动插入文件头 </span><span class="hljs-keyword">autocmd</span> BufNewFile *.cpp,*.[ch],*.<span class="hljs-keyword">sh</span>,*.java exec <span class="hljs-string">&quot;:call SetTitle()&quot;</span> <span class="hljs-string">&quot;&quot;</span>定义函数SetTitle，自动插入文件头 func SetTitle()     <span class="hljs-comment">&quot;如果文件类型为.sh文件 </span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%:e&quot;</span>)  == <span class="hljs-string">&#x27;sh&#x27;</span>         <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\#########################################################################&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: DANTE FUNG&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: fhlin0611@foxmail.com&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#########################################################################&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/bin/bash&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&quot;</span>)     <span class="hljs-keyword">else</span>         <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;/*************************************************************************&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;    &gt; File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;    &gt; Author: DANTE FUNG&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;    &gt; Mail:  fhlin0611@foxmail.com&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;    &gt; Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot; ************************************************************************/&quot;</span>)         <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">endif</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%:e&quot;</span>) == <span class="hljs-string">&#x27;cpp&#x27;</span>        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;#include&lt;iostream&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;using namespace std;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">endif</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%:e&quot;</span>) == <span class="hljs-string">&#x27;c&#x27;</span>        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;#include&lt;stdio.h&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">endif</span>    <span class="hljs-comment">&quot;新建文件后，自动定位到文件末尾</span>    <span class="hljs-keyword">autocmd</span> BufNewFile * <span class="hljs-keyword">normal</span> Gendfunc <span class="hljs-keyword">call</span> plug#end()<span class="hljs-comment">&quot; PlugInstall</span><span class="hljs-comment">&quot; PlugUpdate</span><span class="hljs-comment">&quot; PlugClean</span><span class="hljs-comment">&quot; PlugUpgrade</span><span class="hljs-comment">&quot; PlugStatus</span><span class="hljs-comment">&quot; PlugDiff</span><span class="hljs-comment">&quot; PlugSnapshot</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>利器</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DBeaver Enterprise 7.1企业版激活方法</title>
    <link href="/2020/10/21/DBeaverEnterprise7.1%E4%BC%81%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/"/>
    <url>/2020/10/21/DBeaverEnterprise7.1%E4%BC%81%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="DBeaver-Enterprise-7-1-企业版激活方法"><a href="#DBeaver-Enterprise-7-1-企业版激活方法" class="headerlink" title="DBeaver Enterprise 7.1 企业版激活方法"></a>DBeaver Enterprise 7.1 企业版激活方法</h1><p>参见: <a href="https://zhile.io/2019/05/08/dbeaver-license-crack.html">https://zhile.io/2019/05/08/dbeaver-license-crack.html</a></p>]]></content>
    
    
    <categories>
      
      <category>研发利器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>利器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring中访问MongoDB</title>
    <link href="/2020/10/20/Spring%E4%B8%AD%E8%AE%BF%E9%97%AEMongoDB/"/>
    <url>/2020/10/20/Spring%E4%B8%AD%E8%AE%BF%E9%97%AEMongoDB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring中访问MongoDB"><a href="#Spring中访问MongoDB" class="headerlink" title="Spring中访问MongoDB"></a>Spring中访问MongoDB</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="初始化MongoDB的库及权限"><a href="#初始化MongoDB的库及权限" class="headerlink" title="初始化MongoDB的库及权限"></a>初始化MongoDB的库及权限</h3><p><strong>创建库</strong></p><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> springbucks</code></pre><p><strong>创建用户</strong></p><pre><code class="hljs php">db.<span class="hljs-title function_ invoke__">createUser</span>(    &#123;        <span class="hljs-attr">user</span>:<span class="hljs-string">&quot;springbucks&quot;</span>,        <span class="hljs-attr">pwd</span>:<span class="hljs-string">&quot;springbucks&quot;</span>,        <span class="hljs-attr">roles</span>:[            &#123;<span class="hljs-attr">role</span>:<span class="hljs-string">&quot;readWrite&quot;</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">&quot;springbucks&quot;</span>&#125;        ]    &#125;)</code></pre><p>TODO:</p>]]></content>
    
    
    <categories>
      
      <category>分布式技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过Docker启动MongoDB</title>
    <link href="/2020/10/20/%E9%80%9A%E8%BF%87Docker%E5%90%AF%E5%8A%A8MongoDB/"/>
    <url>/2020/10/20/%E9%80%9A%E8%BF%87Docker%E5%90%AF%E5%8A%A8MongoDB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="通过Docker启动MongoDB"><a href="#通过Docker启动MongoDB" class="headerlink" title="通过Docker启动MongoDB"></a>通过Docker启动MongoDB</h1><h3 id="官方指引"><a href="#官方指引" class="headerlink" title="官方指引"></a>官方指引</h3><ul><li><a href="https://hub.docker.com/_/mongo">https://hub.docker.com/_/mongo</a></li></ul><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><ul><li>docker pull mongo</li></ul><h3 id="运行MongoDB镜像"><a href="#运行MongoDB镜像" class="headerlink" title="运行MongoDB镜像"></a>运行MongoDB镜像</h3><pre><code class="hljs awk">docker run --name mongo -p <span class="hljs-number">27017</span>:<span class="hljs-number">27017</span> -v ~<span class="hljs-regexp">/Documents/</span>software<span class="hljs-regexp">/docker_volume_mapping/m</span>ongo:<span class="hljs-regexp">/data/</span>db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -d mongo</code></pre><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> mongo</code></pre><h3 id="登录到MongoDB容器中"><a href="#登录到MongoDB容器中" class="headerlink" title="登录到MongoDB容器中"></a>登录到MongoDB容器中</h3><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> mongo bash</code></pre><h3 id="通过shell连接MongoDB"><a href="#通过shell连接MongoDB" class="headerlink" title="通过shell连接MongoDB"></a>通过shell连接MongoDB</h3><pre><code class="hljs nsis">mongo -u <span class="hljs-literal">admin</span> -p <span class="hljs-literal">admin</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>分布式技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
      <tag>分布式</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis深度历险</title>
    <link href="/2020/10/19/Redis%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9/"/>
    <url>/2020/10/19/Redis%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Redis深度历险"><a href="#Redis深度历险" class="headerlink" title="Redis深度历险"></a>Redis深度历险</h1><h2 id="Redis基础数据结构"><a href="#Redis基础数据结构" class="headerlink" title="Redis基础数据结构"></a>Redis基础数据结构</h2><p>Redis 有 5 种基础数据结构，分别为：<code>string (字符串)</code>、<code>list (列表)</code>、<code>set (集合)</code>、<code>hash (哈希)</code> 和 <code>zset (有序集合)</code>。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p><ul><li>键值对</li><li>批量键值对</li><li>过期和set命令扩展<p class="note note-primary">setex name 5 codehole  # 5s 后过期，等价于 set+expire<br>setnx name codehole  # 如果 name 不存在就执行 set 创建</p></li><li>计数<p class="note note-primary">如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。</p></li></ul><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。</p><p>当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。</p><div class="note note-danger">            <p>Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。</p>          </div><ul><li>右边进左边出：队列</li><li>右边进右边出：栈</li><li>慢操作<p class="note note-primary">lindex 相当于 Java 链表的get(int index)方法，它需要对链表进行遍历，性能随着参数index增大而变差。ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数start_index和end_index定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。index 可以为负数，index=-1表示倒数第一个元素，同样index=-2表示倒数第二个元素。</p></li><li>快速列表<img src="/2020/10/19/Redis%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9/2020-10-19-23-42-41.png" class=""><div class="note note-primary">            <p>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>          </div></li></ul><h3 id="hash-字典"><a href="#hash-字典" class="headerlink" title="hash(字典)"></a>hash(字典)</h3><p>Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。</p><img src="/2020/10/19/Redis%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9/2020-10-19-23-46-48.png" class=""><div class="note note-primary">            <p>1.Redis 的字典的值只能是字符串<br>2.Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。<br>3.Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。<br>渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。<br>4.hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。<br>5.同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是 hincrby，和 incr 使用基本一样。</p>          </div><h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set (集合)"></a>set (集合)</h3><img src="/2020/10/19/Redis%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9/16458e2da04f1a2d.gif" class=""><div class="note note-primary">            <p>1.Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值NULL。</p><p>2.当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。</p>          </div><h3 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset (有序集合)"></a>zset (有序集合)</h3><div class="note note-primary">            <p>1、zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。</p><p>2、zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。</p>          </div><p><strong>跳跃列表</strong></p>]]></content>
    
    
    <categories>
      
      <category>分布式技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>分布式缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中断及外部设备操作</title>
    <link href="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="中断及外部设备操作"><a href="#中断及外部设备操作" class="headerlink" title="中断及外部设备操作"></a>中断及外部设备操作</h1><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-14-45-21.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-14-46-02.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-14-49-09.png" class=""><h2 id="一、位移指令"><a href="#一、位移指令" class="headerlink" title="一、位移指令"></a>一、位移指令</h2><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-14-59-44.png" class=""><h2 id="二、操作显存数据"><a href="#二、操作显存数据" class="headerlink" title="二、操作显存数据"></a>二、操作显存数据</h2><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-15-02-30.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-15-06-26.png" class=""><h3 id="2-1、显示信息的一种“直接”方式"><a href="#2-1、显示信息的一种“直接”方式" class="headerlink" title="2.1、显示信息的一种“直接”方式"></a>2.1、显示信息的一种“直接”方式</h3><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-15-14-12.png" class=""><pre><code class="hljs x86asm"><span class="hljs-comment">;编程序，在屏幕的中间，白底蓝字，显示&#x27;welcome to masm!&#x27;</span><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg, <span class="hljs-built_in">ds</span>:datasgdatasg <span class="hljs-meta">segment</span><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;welcome to masm!&#x27;</span>datasg endscodesg <span class="hljs-meta">segment</span><span class="hljs-symbol">start:</span><span class="hljs-comment">;初始化寄存器</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,datasg<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0B800H</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">160</span>*<span class="hljs-number">12</span>+<span class="hljs-number">80</span>-<span class="hljs-number">16</span><span class="hljs-comment">;显示字符串</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">16</span><span class="hljs-symbol">w:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">si</span>]<span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71H</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><span class="hljs-keyword">loop</span> w <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">4c00h</span> <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span>codesg endsend start</code></pre><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-16-56-24.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-16-57-59.png" class=""><h2 id="三、描述内存单元的标号"><a href="#三、描述内存单元的标号" class="headerlink" title="三、描述内存单元的标号"></a>三、描述内存单元的标号</h2><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-01-31.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-04-56.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-24-03.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-36-46.png" class=""><h2 id="四、数据的直接定址表"><a href="#四、数据的直接定址表" class="headerlink" title="四、数据的直接定址表"></a>四、数据的直接定址表</h2><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-41-30.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-56-17.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-17-58-51.png" class=""><img src="/2020/10/19/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E6%96%AD%E5%8F%8A%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/2020-10-19-18-03-05.png" class=""><h2 id="五、代码的直接定址表"><a href="#五、代码的直接定址表" class="headerlink" title="五、代码的直接定址表"></a>五、代码的直接定址表</h2>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20201019~20201025阅读笔记</title>
    <link href="/2020/10/19/20201019%EF%BD%9E20201025%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/19/20201019%EF%BD%9E20201025%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="20201019-20201025阅读笔记"><a href="#20201019-20201025阅读笔记" class="headerlink" title="20201019~20201025阅读笔记"></a>20201019~20201025阅读笔记</h1><blockquote><p>人若无名，专心练剑。</p></blockquote><p>==摘自：《做更自信的自己》==</p><p>摘录时间：2020-10-19 </p><center><strong><font color="orange" size="5">每天</font></strong></center><ul><li>要重视并弄清楚某些事的情况，并把你新获得的讯息加入到你的谈话当中。</li><li>通过一些新的方式来挑战你自己。这些事不必是非常重大或者复杂的。（我们把复杂的事放到周末去做）但是每一天都应该尝试一件不同种类的事。</li><li>播种一些种子。只给你自己一次成功的机会并不是一个好主意。当你在唯一一个希望之中投入了你所有的情绪，这种希望的破灭就具有了压倒一切的破坏性。相反，要给你自己许多机会和希望，以此来创造一个积极的后果。从工作到网络交友，再到做推销或任何其他事，你都可以做这样的尝试，这样就能增加成功的机会。</li><li>==留出一些时间来冥想==，即使仅仅几分钟也比什么都没做更好，但是时长为半个小时的冥想将会更有价值。作为冥想技巧的一部分，你将不得不学会控制你的呼吸，这对于控制焦虑至关重要。</li><li>在每一天结束的时候，回顾你已经取得的进步。床可以是一个回顾的好地方。不要为难自己。你只要在睡觉前快速回顾一天的事件，纪录你做得好的事情和你做得不是很好的事情就可以了。做得好就给自己一个奖励，反思你已经取得的进步。作为休息，试着分析一下你下一次怎样能做得更好。要有建设性地去思考，而不是去挑剔自己。每个人每一天都会犯错。最重要的是从中得到学习。以这样的方式进行下去，即使你的错误也会变成某些积极的事。</li><li>当你进入梦乡的时候，给你的潜意识制造暗示，想象你对明天充满自信。</li></ul><p><strong>锻炼身体</strong></p><p>锻炼能使你的身体产生让你感觉豪爽，快乐和自信的化学物质。每隔一天都留出30分钟来锻炼–5分钟热身，20分钟锻炼，另外的5分钟用来放松。如果你已经能每隔一天坚持锻炼了，那么就增加多到一周五次锻炼。</p><center><strong><font color="orange" size="5">每周</font></strong></center><ul><li>花点时间独处。也许你已经有太多的独处时间了。但如果你是一个不断被家人、朋友，同事和熟人包围的人，那你每周就需要创造出一些空间，独自做一些事。重要的是，你要明白你有能力自给自足，并且你可以享受独自一个人的生活。</li><li>使用自我催眠来提高你的自信，并且在行为上做出其他的改变。</li><li>学习一项新的科目。</li><li>观看具有异性视角的电影或电视节目，读一本异性写的关于异性的书。</li></ul><center><strong><font color="orange" size="5">周末</font></strong></center><ul><li>利用周末来挑战那些你无法在工作日完成的太耗时的挑战。骑马或爬山是很好的选择，但是任何让你有一点小恐惧的活动都将是有益的。</li><li>在尝试新衣服和新外表上花些时间。重新装修一下你的家，做出更多的关于你是谁的声明。发挥你的创造力，用你自己的作品来装饰你的家，比如绘画、雕塑、挂毯、照片、“发现物品”或者任何其他的物件都可以。</li><li>尝试一些完全随机的东西。</li><li>至少做一次真正的、很长时间的运动。</li></ul><center><strong><font color="orange" size="5">在一个月里</font></strong></center><ul><li>至少举办一次某种聚会，并且介绍那些彼此不认识的人认识彼此。</li><li>花点时间思考你的工作，并且看看其他的可能性。如果你认为自己与这份工作格格不入，那就申请一份适合的，更能反映你的兴趣和个性的工作。</li><li>如果你有两性关系方面的问题，那就与对方重点讨论一下，==既不要拖延，也不要生气，或者采取防御姿态。==</li></ul>]]></content>
    
    
    <categories>
      
      <category>黑客与画家</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>示例文档</title>
    <link href="/2020/10/19/%E7%A4%BA%E4%BE%8B%E6%96%87%E6%A1%A3/"/>
    <url>/2020/10/19/%E7%A4%BA%E4%BE%8B%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="示例文档"><a href="#示例文档" class="headerlink" title="示例文档"></a>示例文档</h1><p><strong>此文档在更新时可能会被覆盖或删除</strong></p><blockquote><p>在使用Markdown之前，你可能需要先了解一下关于markdown的简单语法。</p></blockquote><h3 id="fluid主题的Tag插件"><a href="#fluid主题的Tag插件" class="headerlink" title="fluid主题的Tag插件"></a>fluid主题的Tag插件</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E8%84%9A%E6%B3%A8">Fluid文档地址</a> </p><p><a class="btn" href="https://hexo.fluid-dev.com/docs/guide/#%E8%84%9A%E6%B3%A8" title="title">Fluid文档地址</a></p><p><strong>代码方式:</strong></p><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><span class="language-xml">文字 或者 `markdown` 均可</span><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span></code></pre><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><p><strong>HTML形式:</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>HTML形式标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p class="note note-primary">HTML形式标签</p><p><strong>行内便签:</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>我是行内便签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><p><span class="label label-primary">我是行内便签</span><br>或</p><pre><code class="hljs mel">&#123;% label danger @行内便签<span class="hljs-keyword">text</span> %&#125;</code></pre><span class="label label-danger">行内便签text</span><h3 id="hexo自带的Tag功能"><a href="#hexo自带的Tag功能" class="headerlink" title="hexo自带的Tag功能"></a>hexo自带的Tag功能</h3><p><strong>引用书上的句子:</strong></p><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">blockquote</span> David Levithan, Wide Awake %&#125;</span><span class="language-xml"></span><span class="language-xml">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endblockquote</span> %&#125;</span></code></pre><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><ul><li>使用 <code>#</code> 表示标题，一级标题使用一个 <code>#</code> ，二级标题使用两个 <code>##</code> ，以此类推，共有六级标题。</li><li>使用 <code>=====</code> 表示高阶标题，使用 <code>---------</code> 表示次阶标题。</li></ul><ol><li><code>#</code> 和标题之间记得有个空格哦。</li><li><code>====</code> 和 <code>----</code> 表示标题时，大于等于2个都可以表示。</li></ol><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用"></a>2.引用</h3><p>使用 <code>&gt;</code> 表示引用， <code>&gt;&gt;</code> 表示引用里面再套一层引用，依次类推。</p><ol><li>如果 <code>&gt;</code> 和 <code>&gt;&gt;</code> 嵌套使用的话，从 <code>&gt;&gt;</code> 退到 <code>&gt;</code> 时，必须之间要加一个空格或者 <code>&gt;</code> 作为过渡，否则默认为下一行和上一行是同一级别的引用。如示例所示。</li><li>引用标记里可以使用其他标记，如：有序列表或无序列表标记，代码标记等。</li></ol><p>示例</p><blockquote><p>这是一级引用</p><blockquote><p>这是二级引用</p><blockquote><p>这是三级引用</p></blockquote></blockquote></blockquote><blockquote><p>这是一级引用</p></blockquote><h3 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3 代码块"></a>3 代码块</h3><p>使用3个连续的` 符号包围起来表示代码块。</p><ol><li>本文档所有使用讲解Markdown语法标记示例的地方都是使用代码块标记的。</li><li>代码块前后都得有换行哦</li></ol><p>示例</p><pre><code class="hljs reasonml"><span class="hljs-constructor">$(<span class="hljs-params">document</span>)</span>.ready(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;  <span class="hljs-constructor">$(&#x27;<span class="hljs-params">pre</span> <span class="hljs-params">code</span>&#x27;)</span>.each(<span class="hljs-keyword">function</span>(i, block) &#123;    hljs.highlight<span class="hljs-constructor">Block(<span class="hljs-params">block</span>)</span>;  &#125;);&#125;);</code></pre><h3 id="4-行内代码"><a href="#4-行内代码" class="headerlink" title="4 行内代码"></a>4 行内代码</h3><p>使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。</p><p>示例</p><p>这是 <code>javascript</code> 代码</p><h3 id="5-链接"><a href="#5-链接" class="headerlink" title="5 链接"></a>5 链接</h3><p>使用 <code>[](link)</code> 表示行内链接。其中：</p><ul><li><code>[]</code> 内的内容为要添加链接的文字。</li><li><code>link</code> 为链接地址。</li></ul><p>示例</p><p>我觉得<a href="https://apps.apple.com/app/id1472328263">Markdown</a>真是个棒棒哒的编辑器😊.</p><h3 id="6-数学公式"><a href="#6-数学公式" class="headerlink" title="6 数学公式"></a>6 数学公式</h3><p><code>$</code>包围的区块将会解析为数学公式，连续的<code>$$</code>将独占一行并居中显示</p><p>示例</p><p>当 $a \ne 0$, 此方程式有两个解 $ax^2 + bx + c = 0$，他们是 </p><p>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><h3 id="7-导入图片"><a href="#7-导入图片" class="headerlink" title="7 导入图片"></a>7 导入图片</h3><p>使用 <code>![Alt text](/path/to/img.jpg)</code> 导入图片。其中：</p><ul><li><code>Alt text</code> 为如果图片无法显示时显示的文字；</li><li><code>/path/to/img.jpg</code> 为图片所在路径；</li></ul><p>点击辅助键盘中的添加图片按钮可快捷添加图片</p><ol><li>==本地引用==是图片直接存储到本地通过相对路径引用，无需网络连接</li><li>==上传图片==将把图片上传至图床，这样在文档或图片移动时仍然可以访问图片</li></ol><p>示例</p><p><img src="https://i.loli.net/2020/03/14/I8wCZN4r9UltqTd.jpg" alt="Markdown"></p><h3 id="8-Todo-List"><a href="#8-Todo-List" class="headerlink" title="8 Todo List"></a>8 Todo List</h3><p>小写x表示已完成， 空格表示未完成</p><ul><li><input checked="" disabled="" type="checkbox"> 支持数学公式</li><li><input checked="" disabled="" type="checkbox"> 支持TodoList</li><li><input checked="" disabled="" type="checkbox"> 支持自定义样式</li><li><input disabled="" type="checkbox"> 支持自定义图床</li></ul><h3 id="9-粗体，斜体，高亮和删除线"><a href="#9-粗体，斜体，高亮和删除线" class="headerlink" title="9 粗体，斜体，高亮和删除线"></a>9 粗体，斜体，高亮和删除线</h3><ol><li>使用 <code>**</code> 或者 <code>__</code> 表示<strong>粗体</strong>。</li><li>使用 <code>*</code> 或者 <code>_</code> 表示<em>斜体</em>。</li><li>使用<code>==</code>表示==高亮==</li><li>使用<code>~~</code>表示<del>删除</del></li><li><code>*</code>，<code>=</code> 或 <code>_</code> 的后面<strong>不要跟空格哦</strong></li></ol><h3 id="10-列表"><a href="#10-列表" class="headerlink" title="10 列表"></a>10 列表</h3><p>使用 <code>1. 2. 3.</code> 表示有序列表，使用 <code>*</code> 或 <code>-</code> 或 <code>+</code> 表示无序列表。</p><ol><li>无序列表或有序列表标记和后面的文字之间要有一个空格隔开。</li><li>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例1所示。</li><li>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例2所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。</li></ol><h4 id="例1：有序列表"><a href="#例1：有序列表" class="headerlink" title="例1：有序列表"></a>例1：有序列表</h4><ol><li>第一点</li><li>第二点</li><li>第三点</li></ol><h4 id="例2：无序列表"><a href="#例2：无序列表" class="headerlink" title="例2：无序列表"></a>例2：无序列表</h4><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li></ul><ul><li>二级无序列表内容<ul><li>三级无序列表内容</li><li>三级无序列表内容</li></ul></li></ul></li><li>一级无序列表内容<ul><li>二级无序列表内容</li></ul></li></ul><h3 id="11-分割线"><a href="#11-分割线" class="headerlink" title="11 分割线"></a>11 分割线</h3><p>使用 <code>---</code> 或者 <code>***</code> 或者 <code>* * *</code> 表示水平分割线。</p><ol><li>只要 <code>*</code> 或者 <code>-</code> 大于等于三个就可组成一条平行线。</li><li>使用 <code>---</code> 作为水平分割线时，要在它的前后都空一行，防止 <code>---</code> 被当成标题标记的表示方式。</li></ol><p>示例</p><hr><hr><hr><h3 id="12表格"><a href="#12表格" class="headerlink" title="12表格"></a>12表格</h3><p>上面空一行下面空两行</p><table><thead><tr><th>Heading</th><th>Heading</th><th>Heading</th></tr></thead><tbody><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr></tbody></table><p>添加边框:</p><table><thead><tr><th>Heading</th><th>Heading</th><th>Heading</th></tr></thead><tbody><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr></tbody></table><p>对齐方式:</p><table><thead><tr><th align="left">Heading</th><th align="center">Heading</th><th align="right">Heading</th></tr></thead><tbody><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>测试文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章内存寻址方式</title>
    <link href="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第四章-内存寻址方式"><a href="#第四章-内存寻址方式" class="headerlink" title="第四章 内存寻址方式"></a>第四章 内存寻址方式</h1><h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-14-18-16-15.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-14-18-14-32.png" class=""><h2 id="处理字符问题"><a href="#处理字符问题" class="headerlink" title="处理字符问题"></a>处理字符问题</h2><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-14-18-23-11.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-14-18-28-18.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-14-18-33-16.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-14-18-34-52.png" class=""><h2 id="bx-idata-的含义"><a href="#bx-idata-的含义" class="headerlink" title="[bx+idata]的含义"></a>[bx+idata]的含义</h2><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-10-02-39.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-10-09-21.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-10-10-46.png" class=""><h2 id="SI和DI寄存器"><a href="#SI和DI寄存器" class="headerlink" title="SI和DI寄存器"></a>SI和DI寄存器</h2><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-10-56-43.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-10-59-22.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-11-21-44.png" class=""><img src="/2020/10/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/2020-10-15-14-22-00.png" class=""><p><strong>源程序</strong></p><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg, <span class="hljs-built_in">ds</span>:datasgdatasg <span class="hljs-meta">segment</span>  <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;welcome to masm!&#x27;</span>  <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;................&#x27;</span>datasg endscodesg <span class="hljs-meta">segment</span><span class="hljs-symbol">start:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,datasg       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span>              <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span>       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">16</span>       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><span class="hljs-symbol">     s:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">si</span>]        <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">di</span>],<span class="hljs-built_in">ax</span>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">2</span>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">2</span>        <span class="hljs-keyword">loop</span> s                <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span>codesg endsend start</code></pre><p>每次复制一个字(2个字节，共16位)，8次循环。</p><p><strong>人脑演算:</strong></p>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章汇编语言程序</title>
    <link href="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/"/>
    <url>/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第三章-汇编语言程序"><a href="#第三章-汇编语言程序" class="headerlink" title="第三章 汇编语言程序"></a>第三章 汇编语言程序</h1><h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-14-28-42.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-14-33-14.png" class=""><h2 id="1、用汇编语言编写程序的工作过程"><a href="#1、用汇编语言编写程序的工作过程" class="headerlink" title="1、用汇编语言编写程序的工作过程"></a>1、用汇编语言编写程序的工作过程</h2><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-14-38-42.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-14-49-23.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-14-52-58.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-14-54-39.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-15-02-04.png" class=""><h2 id="2、由源程序到源程序运行"><a href="#2、由源程序到源程序运行" class="headerlink" title="2、由源程序到源程序运行"></a>2、由源程序到源程序运行</h2><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-15-03-28.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-15-04-40.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-15-07-20.png" class=""><h3 id="2-1、实操"><a href="#2-1、实操" class="headerlink" title="2.1、实操"></a>2.1、实操</h3><p><strong><font color="green">1、 挂载 DosBox c 盘的位置</font></strong></p><pre><code class="hljs arcade">mount c d:<span class="hljs-regexp">/software/</span>develop/masm</code></pre><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-15-13-18.png" class=""><p><strong><font color="green">2、 编写源程序</font></strong></p><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-15-39-13.png" class=""><p><strong><font color="green">3、编译程序</font></strong></p><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-04-07.gif" class=""><p><strong>提示语法错误:</strong></p><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-23-30.png" class=""><h3 id="2-2、连接"><a href="#2-2、连接" class="headerlink" title="2.2、连接"></a>2.2、连接</h3><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-32-53.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-27-47.gif" class=""><h3 id="2-3、可执行程序"><a href="#2-3、可执行程序" class="headerlink" title="2.3、可执行程序"></a>2.3、可执行程序</h3><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-34-03.png" class=""><h2 id="3、用-Debug-跟踪程序的执行"><a href="#3、用-Debug-跟踪程序的执行" class="headerlink" title="3、用 Debug 跟踪程序的执行"></a>3、用 Debug 跟踪程序的执行</h2><h3 id="3-1、用-debug-装载可执行程序"><a href="#3-1、用-debug-装载可执行程序" class="headerlink" title="3.1、用 debug 装载可执行程序"></a>3.1、用 debug 装载可执行程序</h3><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-35-55.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-36-36.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-46-13.png" class=""><h3 id="3-2、用-Debug-单步执行程序"><a href="#3-2、用-Debug-单步执行程序" class="headerlink" title="3.2、用 Debug 单步执行程序"></a>3.2、用 Debug 单步执行程序</h3><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-56-53.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-16-59-12.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-00-51.png" class=""><h2 id="4、-…-和-…"><a href="#4、-…-和-…" class="headerlink" title="4、[…]和(…)"></a>4、[…]和(…)</h2><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-07-30.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-09-32.png" class=""><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-14-32.png" class=""><h2 id="5、Loop-指令"><a href="#5、Loop-指令" class="headerlink" title="5、Loop 指令"></a>5、Loop 指令</h2><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-20-32.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-33-18.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-30-40.gif" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-35-56.gif" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-40-51.png" class=""><h3 id="5-1、用-loop-指令编程实例"><a href="#5-1、用-loop-指令编程实例" class="headerlink" title="5.1、用 loop 指令编程实例"></a>5.1、用 loop 指令编程实例</h3><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-43-24.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-44-19.png" class=""><h2 id="将数据、代码、栈放入不同段"><a href="#将数据、代码、栈放入不同段" class="headerlink" title="将数据、代码、栈放入不同段"></a>将数据、代码、栈放入不同段</h2><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-17-47-29.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-18-04-34.png" class=""><img src="/2020/10/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/2020-10-14-18-06-26.png" class="">]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于段的总结</title>
    <link href="/2020/10/14/%E5%85%B3%E4%BA%8E%E6%AE%B5%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2020/10/14/%E5%85%B3%E4%BA%8E%E6%AE%B5%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关于段的总结"><a href="#关于段的总结" class="headerlink" title="关于段的总结"></a>关于段的总结</h1><img src="/2020/10/14/%E5%85%B3%E4%BA%8E%E6%AE%B5%E7%9A%84%E6%80%BB%E7%BB%93/2020-10-14-14-16-32.png" class=""><img src="/2020/10/14/%E5%85%B3%E4%BA%8E%E6%AE%B5%E7%9A%84%E6%80%BB%E7%BB%93/2020-10-14-14-20-25.png" class=""><img src="/2020/10/14/%E5%85%B3%E4%BA%8E%E6%AE%B5%E7%9A%84%E6%80%BB%E7%BB%93/2020-10-14-14-22-46.png" class=""><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ol><li>人脑逻辑运算一遍</li><li>debug 工具验证一遍</li></ol><h2 id="完成情况"><a href="#完成情况" class="headerlink" title="完成情况"></a>完成情况</h2><p>// TODO:</p>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20201012~20201018阅读笔记</title>
    <link href="/2020/10/14/20201012-20201018%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/14/20201012-20201018%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="20201012-20201018-阅读笔记"><a href="#20201012-20201018-阅读笔记" class="headerlink" title="20201012~20201018 阅读笔记"></a>20201012~20201018 阅读笔记</h1><blockquote><p>很多时候，纠结一件事什么时候做和怎么做，比做完这件事本身要累得多。</p></blockquote><h2 id="让生活更加专注"><a href="#让生活更加专注" class="headerlink" title="让生活更加专注"></a>让生活更加专注</h2><blockquote><p>关于「专注」巴菲特有一个非常经典的解释。在纸上按照重要程度写下对自己人生最重要的 25 件事，然后把后面的 20 件放进不要做清单，前面 5 件事才是值得你一生奋斗的目标。<br>我自己挺幸运的，我觉得自己已经找到了这五件事，投资、写作、健康、家庭和学习，而且我也找到了一个有效的方法，只要想办法让前面的 5 件事占据你全部的时间，自然就没有其他时间去考虑别的问题了，日更的效果亲测有效。<br>希望这个体会也能帮助到一些有意开展副业的朋友，坚持写作和副业在很多道理上确实是相互互通的。易在开始、难在坚持，大家共勉。</p></blockquote><blockquote><p>必须滴，我不担心钱的问题，以后肯定会有的。我最担心的就是以后有钱了活得不够久。</p></blockquote><p>自由的生活并不用拖到财务自由以后，之前一位朋友的总结挺在理的：</p><blockquote><p>努力获得心灵自由，如果已经巨有钱了再去开始研究心灵自由基本上已经晚了，所以要在还没钱的时候提前开始。</p></blockquote><hr><p>摘自: 《自由以后想做的事儿居然提前做完了大半》<br>我们生活中的大部分问题其实都有现成的解决方案：</p><ul><li>想要更多的时间精力来做有意义的事儿，学学任务管理和精力管理。</li><li>想要更强的抗风险能力、不焦虑未来的医疗开支，早早配置几份保险。</li><li>想要更多时间陪伴家人，一个电话或者休个假就能解决。</li><li>想要减少对财富和通胀的焦虑，开始计划、开始行动，不需要账户里有很多钱，只要看着钱在变多、增值，焦虑就能解决。</li></ul><p>这些问题真得等到有 XXX 元或者财务自由以后才能解决吗，那生活得多么辛苦？</p><p>我发现并不需要自由，也可以大批量读书，甚至工作日阅读效率比周末更高。本以为是有时间才能读书，结果没想到反而是书读得越多，闲暇时间更多。</p><hr><p>摘自： 《发现一个很使用的躺赚思路》</p><p><strong>书籍:</strong> 《人类网络》</p><p><strong>概念:</strong> 「特征向量中心度」<br>每个节点的数字就是特征向量中心度，可以粗略理解为这个节点在网络中的作用。</p><img src="/2020/10/14/20201012-20201018%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2020-10-14-10-48-47.png" class=""><p><strong>作者观点:</strong><br><strong>关注更少，收获更多:</strong><br>同时关注 N 个媒体，但精力分散、浅尝辄止，远不如关注一个消息灵通的大 V，读完他的每篇文章。</p><p><strong>操作更少，赚钱更多：</strong></p><blockquote><p><code>笔者思考</code>: 专业的人干专业的事。</p></blockquote><p>大部分读者都是主业工作，闲暇时间理财。 同时关注 N 只个股，但可能依旧不知道投资该做什么，那就不如认认真真地跟住一两个能力经过检验的跟投或者主动基金，100% 信任他。</p><p><strong>付出更少，产出更多:</strong><br>再比如学习某个新领域，效率最高办法的也不是读多少原著，而是关注一两个该领域关系最多、认知最广又乐于分享的大佬。<br>把领域里一个大牛的观点研究清楚，效率远胜于每家都学一点。</p><p>一句话总结，<strong>与其疲于奔命建立各种渠道、跟踪各种信息、了解各种产品，不如找到一个已有很多关系的节点，然后建立深层链接。</strong></p><p>现在有种普遍观点，大家都去关注网红主播、自媒体，读传统新闻和书籍的人少了，说明社会退步了。但是回头想想，实际上社会总是在向着效率更高的方向演变，对于我们这些普通人来说，这个变化会不会本身就是那个最高效、最靠谱的选择呢？<code>我们总说二八原则，保持专注，这个特征向量中心度，不就是一个超实用的、找到那 20% 的利器嘛。</code></p><blockquote><p><code>笔者点评:</code> 旧瓶换新酒。讲究效率。找到核心的 20%的东西。</p></blockquote><hr><p>摘自: 《砸烂财富自由的毒鸡汤》</p><p>那些赚了大钱的人，做事的驱动力,往往不是赚钱本身。</p><p>年轻人，在智力何体力最好的时间点，却把自己陷入财务自由的妄想中，无疑是一种悲哀。</p><p>实际上，真正束缚你的并不是金钱自由，而是对不可知未来的恐惧，你以为钱能解决而已。</p><p>还有人因为职场不如意，就寄希望靠股市改变命运。这样成功的案例确实也有，但太少了，更多的人是在股市里急功近利把自己搞垮了。</p><p>不管穷人还是富人，强烈的暴富愿望，于是心甘情愿的被镰刀收割。其实并不存在财务自由这种事情，你只能实现的是<code>财务平衡</code>。</p><p><strong>建议:</strong></p><p><strong>1、工作致富，虽然慢，但是稳。做好份内事，就能上一个台阶。</strong></p><p><strong>2、输不起的钱不要拿出来投资，不要碰自己不懂的东西。</strong></p><p>读书，增强技能，早点工作，涨薪积累财富，是一条大概率可行，但有点漫长的原始财富的积累之路。投资理财的前提也是先有 1，才有 0。</p><p>很多人，连职场里都 PK 不过同龄人，还敢跨界学人家搞投资？凭什么呢？连一份基本工作都干不明白，还能搞得懂财报、市盈率，战胜行业专家吗？</p><p><strong>暴富往往不可复制或很高门槛，但是暴穷往往都是相似的。</strong></p><p>一个经济周期下来，很多人原形必露。事实证明，没有财务规划和配置能力，特别是没有可持续收入能力的人，年轻时候给他几个亿，到了五六十岁还没要饭的，就算不错的了。</p><p><code>当你没有时间想着暴富的时候，才说明你的人生上了正轨</code>。说了这么多，到底要怎么做资产分配，兼顾风险和收益？</p><img src="/2020/10/14/20201012-20201018%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2020-10-14-11-29-39.png" class=""><hr><p>最理想的生活<br>干净的圈子<br>规律的生活<br>中意的人<br>我向往的不过<br>白天有说有笑<br>晚上还能睡个好觉</p><hr><p>五个好习惯: 早起、阅读、运动、写日记、分享</p>]]></content>
    
    
    <categories>
      
      <category>黑客与画家</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定位的重要性</title>
    <link href="/2020/10/13/%E5%AE%9A%E4%BD%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <url>/2020/10/13/%E5%AE%9A%E4%BD%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="定位的重要性"><a href="#定位的重要性" class="headerlink" title="定位的重要性"></a>定位的重要性</h1><h2 id="公众号的管理"><a href="#公众号的管理" class="headerlink" title="公众号的管理"></a>公众号的管理</h2><ol><li>找到并不断优化定位</li><li>数据分析找到内容优化的方向</li><li>确定用户画像</li><li>确定公众号的基本属性</li></ol><h2 id="文章生产"><a href="#文章生产" class="headerlink" title="文章生产"></a>文章生产</h2><ol><li>选题</li><li>信息搜集</li><li>标题</li></ol><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="企业新媒体发展的生命周期"><a href="#企业新媒体发展的生命周期" class="headerlink" title="企业新媒体发展的生命周期"></a>企业新媒体发展的生命周期</h3><p><strong>生命周期表格:</strong></p><table><thead><tr><th align="center">项目期</th><th align="center">核心关注点</th><th align="center">粉丝参考</th><th align="center">变现参考</th><th align="center">运营年限参考</th><th align="center">粉丝数量参考</th></tr></thead><tbody><tr><td align="center">启动期</td><td align="center">关注定位</td><td align="center">种子用户</td><td align="center">一一</td><td align="center">0~3个月</td><td align="center">0~1k</td></tr><tr><td align="center">成长期</td><td align="center">关注增长</td><td align="center">快速增长</td><td align="center">尝试变现</td><td align="center">3个月~1年</td><td align="center">1k~100w</td></tr><tr><td align="center">成熟期</td><td align="center">关注商业变现</td><td align="center">有稳定的渠道</td><td align="center">多种变现共存</td><td align="center">1~2年</td><td align="center">100w以上</td></tr><tr><td align="center">瓶颈期</td><td align="center">重新关注定位</td><td align="center">增长效率变低</td><td align="center">收入下降</td><td align="center">2年及以上</td><td align="center">数百万</td></tr></tbody></table><h2 id="导入期如何做定位"><a href="#导入期如何做定位" class="headerlink" title="导入期如何做定位?"></a>导入期如何做定位?</h2><img src="/2020/10/13/%E5%AE%9A%E4%BD%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/2020-10-13-23-21-39.png" class=""><h2 id="企业新媒体的3种类型"><a href="#企业新媒体的3种类型" class="headerlink" title="企业新媒体的3种类型"></a>企业新媒体的3种类型</h2><table><thead><tr><th align="left">产品服务: 以用户为中心</th><th align="left">商品售卖: 以客户为中心</th><th align="left">媒体品牌: 以读者为中心</th></tr></thead><tbody><tr><td align="left">核心提供产品。<br>核心指标:付费用户数;<br>用户矩阵: APP、微信、小程序；<br>盈利模式: 产品增值服务；<br>e.g.微路况、千聊、一块听听</td><td align="left">核心提供商品。<br>核心指标:GMV;<br>商城矩阵: 淘宝、有赞；<br>盈利模式: 商品售卖；<br>e.g. 乐纯酸奶、小罐茶<br></td><td align="left">核心提供内容。<br>核心指标: 传播量；<br>流量矩阵：各类媒体平台；<br>盈利模式: 广告为主；<br>e.g. 虎嗅、美丽说、杜蕾斯</td></tr></tbody></table><blockquote><p>NOTE:<br>gmv即baiGross Merchandise Volume，主要是指网站的成交金额，而这里的成交金额包括：付款金额和未付款。<br>gmv=销售额+取消订单金额+拒收订单金额+退货订单金额<br>gmv虽然不是实际的交易数据，但同样可以作为参考依据，因为只顾客点击了购买，无论有没有实际购买，都是统计在gmv里面的。可以用gmv来研究顾客的购买意向，顾客买了之后发生退单的比率，gmv与实际成交额的比率等等。</p></blockquote><h2 id="用户需求于新媒体类型的匹配"><a href="#用户需求于新媒体类型的匹配" class="headerlink" title="用户需求于新媒体类型的匹配"></a>用户需求于新媒体类型的匹配</h2><table><thead><tr><th>用户需求</th><th>企业提供</th></tr></thead><tbody><tr><td>有趣</td><td>媒体</td></tr><tr><td>有用</td><td>产品</td></tr><tr><td>有利</td><td>销售</td></tr></tbody></table><hr><section><center><font color="orange" size="5">偏媒体</font>: <font color="black" size="5">能成为人群的谈资</font><br><strong>宣扬态度，提供温度、深度，展示个性</strong></center><section><p><strong>案例：情感类</strong><br><code>大忘路</code>  有趣： 文艺青年<br><code>差评</code>  有态度: 敢于挑战权威</p><p><strong>案例: 兴趣类</strong><br><code>十点读书</code>  有温度: 关于书的故事<br><code>深夜发嗤</code>  有个性： 不装逼的时尚号</p><hr><section><center><font color="orange" size="5">偏产品</font>: <font color="black" size="5">能帮助人群解决问题</font><br><strong>差异化、个性化，自动(半自动)服务</strong></center><section><p><strong>案例：工具类</strong></p><p><code>印象笔记</code> 个性化： 提供微信同步功能<br><code>助理来也</code> 个性化： 提供语音类管家服务</p><p><strong>案例：兴趣类</strong><br><code>有书</code>  半自动服务: 社群共读<br><code>千聊live</code> 自动化服务: 让大家去听课 </p><hr><section><center><font color="orange" size="5">偏销售</font>: <font color="black" size="5">能帮助人买买买</font><br><strong>商品介绍、商品购买、订单服务</strong></center><section><p><strong>案例： 商城类</strong><br><code>小米手机</code> 订单服务提供小米手机相关服务<br><code>京东JD.COM</code> App订单服务(购买自动关注)</p>]]></content>
    
    
    <categories>
      
      <category>自媒体</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自媒体</tag>
      
      <tag>公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十二、栈及栈操作的实现</title>
    <link href="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="十二、栈及栈操作的实现"><a href="#十二、栈及栈操作的实现" class="headerlink" title="十二、栈及栈操作的实现"></a>十二、栈及栈操作的实现</h1><h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-13-10-25-16.png" class=""><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-13-10-28-04.png" class=""><p><strong>问题:</strong></p><p>1、CPU 如何知道一段内存空间被当作栈使用?<br>2、执行 push 和 pop 的时候，如何知道哪个单元是栈顶单元?</p><p><strong>回答:</strong></p><p>8086CPU 中，有两个与栈相关的寄存器:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>栈段寄存器 SS</td><td>存放栈顶的段地址</td></tr><tr><td>栈顶指针寄存器 SP</td><td>存放栈顶的偏移地址</td></tr></tbody></table><h2 id="栈操作"><a href="#栈操作" class="headerlink" title="栈操作"></a>栈操作</h2><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-13-10-48-40.png" class=""><p><strong>预设代码：</strong></p><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-13-11-12-18.png" class=""><p><strong>单步跟踪：</strong><br>T 命令作用：执行汇编程序，单步跟踪。<br>T 命令的使用方式是 T [=地址] [指令数]。如果忽略“地址”的话，T 命令从 CS:IP 处开始运行。“指令数”是要单步执行的指令的数量。</p><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-14-14-08-09.png" class=""><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-14-14-10-22.png" class=""><img src="/2020/10/13/%E6%A0%88%E5%8F%8A%E6%A0%88%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/2020-10-14-14-11-44.png" class="">]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十一、DS与数据段</title>
    <link href="/2020/10/13/DS%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%AE%B5/"/>
    <url>/2020/10/13/DS%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="十一、DS-与数据段"><a href="#十一、DS-与数据段" class="headerlink" title="十一、DS 与数据段"></a>十一、DS 与数据段</h1><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><img src="/2020/10/13/DS%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%AE%B5/2020-10-13-10-08-21.png" class=""><h2 id="大胆假设，小心求证的学习方法"><a href="#大胆假设，小心求证的学习方法" class="headerlink" title="大胆假设，小心求证的学习方法"></a>大胆假设，小心求证的学习方法</h2><img src="/2020/10/13/DS%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%AE%B5/2020-10-13-10-14-46.png" class=""><img src="/2020/10/13/DS%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%AE%B5/2020-10-13-10-15-32.png" class=""><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><img src="/2020/10/13/DS%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%AE%B5/2020-10-13-10-17-44.png" class="">]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>投资思考</title>
    <link href="/2020/10/10/%E6%8A%95%E8%B5%84%E6%80%9D%E8%80%83/"/>
    <url>/2020/10/10/%E6%8A%95%E8%B5%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="投资思考"><a href="#投资思考" class="headerlink" title="投资思考"></a>投资思考</h1><h2 id="投资观"><a href="#投资观" class="headerlink" title="投资观"></a>投资观</h2><h2 id="投资语录"><a href="#投资语录" class="headerlink" title="投资语录"></a>投资语录</h2><blockquote><p>投资是认知的变现.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>金融</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于赚钱的思考，你要做的一些事</title>
    <link href="/2020/10/10/%E5%85%B3%E4%BA%8E%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%8C%E4%BD%A0%E8%A6%81%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/"/>
    <url>/2020/10/10/%E5%85%B3%E4%BA%8E%E8%B5%9A%E9%92%B1%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%8C%E4%BD%A0%E8%A6%81%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关于赚钱的思考，你要做的一些事"><a href="#关于赚钱的思考，你要做的一些事" class="headerlink" title="关于赚钱的思考，你要做的一些事"></a>关于赚钱的思考，你要做的一些事</h1><p>假期里在办公室中研究一点策略，顺便也写写关于赚钱的一些想法。</p><p>我写写，你听听…</p><p><code>1 对于任何事物，记住你永远都要思考，它的底层逻辑。</code></p><p>很多赚钱的方法，你别看市面上好像有人给你贡献很多赚钱的点子，其实你认真归纳一下，永远都有一套行之有效的底层逻辑。</p><p>比如互联网赚钱，总是围绕，<strong>拉新，留存，促活，</strong>转化，****这套逻辑来展开。你仔细分析这个流程，简直可以套用在很多牛人的赚钱方法上。</p><p>万事万物，都要学会归纳总结。</p><p><code>2 永远要研究你的竞争对手</code></p><p>一件事你不会，你就要学习，不要整天想着与众不同，很多好的商业模式，从来都不是创造式的颠覆和发明，而是微创新，以及如何在用户体验上创新。</p><p>学习是最好的老师，你可以学习比你维度更好的人，这样可以快速的验证想法，快速的起量。</p><p>比如，你通过研究同行，你会发现你的同行：</p><ul><li><p>同行的产品是如何定位的？</p></li><li><p>公司赚钱的模式是怎么样的？</p></li><li><p>产品解决了什么需求？</p></li><li><p>Slogan 是怎么写的？</p></li><li><p>品牌是如何占据用户的心智？</p></li><li><p>产品如何定价的？</p></li><li><p>对外的文案是怎么写的？</p></li><li><p>对外的海报是怎么做的？</p></li><li><p>怎么样引流的？</p></li><li><p>怎么沉淀用户？</p></li><li><p>沉淀到哪里？</p></li><li><p>怎么做裂变的？</p></li><li><p>对外和哪些人合作？</p></li><li><p>合作的利益是怎么分配的？</p></li><li><p>和客户合作的话术是怎么样的？</p></li><li><p>有什么提高复购的办法？</p></li><li><p>……</p></li></ul><p><code>3 看到很多事，多问为什么</code></p><p>平常在遇到很多事的时候，要多问为什么，为什么这东西能赚钱？为什么要那样做，而不这样做？他们的引流方式如何？他满足了用户什么样的需求点？</p><p>比如你进超市：</p><p>你要想，为什么这东西要摆在第一排？有哪些东西是需要你蹲下去才能看到的？为什么他们要摆放在下面？他们的灯光是怎么打的？这有讲究吗？</p><p><code>4 多研究广告</code></p><p>要研究这个广告的文案是怎么写的？为什么这个广告打的时间特别的长？他们赚钱吗？能不能打听一下，对方投放的这个广告，在公众号上要花多少钱？</p><p>如果不赚钱为什么这样长时间打广告？他们在哪里投放？</p><p>你知道他们是如何起量的吗？靠广告？还是靠裂变？还是对活动再广告？</p><p>他们的广告着陆页是怎么样的？图片如何，call to action 如何？</p><p>你要多研究广告，很多人拼命的圈用户，圈粉丝，其实都比不上这些付费花钱投广告的人，你自己辛辛苦苦做流量，到头来人家花一点广告费，效果比你更好。</p><p>而广告可以快速起量，这里面一旦找到一个好的爆品，配上文案，加上广告和必要的 KOL 推荐，效益很可能是指数级的。</p><p><code>5 没有什么是零风险</code></p><p>你做项目，他说没钱，不做。你说开淘宝店，他觉得要押金，不做。你说知乎靠内容引流，他说写文章太漫长，不做。</p><p>总是想着一本万利，总是想着零风险，你这样想来想去的，时间很快就过去了，啥也不愿意付出，你能还能干点啥？</p><p><code>6 不要做无意义的事</code></p><p>不要刷剧，不要刷抖音，不要沉迷游戏与酒色中，总之不要做很多浪费时间的事，这些东西根本不能提高你的业务能力，并且会不断的在消耗你与其他人的竞争力，让你沉醉其中不自知。</p><p>你要花时间去锻炼，去培养自己的意志力，让自己的脑袋清醒一点，不要熬夜，早睡早起，多思考赚钱的方法，多去测试，多去执行。</p><p>没有成功之前的努力都不要瞎感动。</p><p>这些我不多讲了，能明白的你自然会明白。</p><p><code>7 不要参与很多的争端</code></p><p>向优秀的人学习，不要天天怀疑这骗人的，那瞎搞的，默默的看，默默的学习。别人能赚钱，一定有他的优势之处。</p><p>不要参与市面上的很多争端，和脑残的人争执，自己都会怀疑人生，也不值得。</p><p><code>8 专注，专注，再专注</code></p><p>你加入很多社群，每天看很多赚钱点子。可是有没有发现，怎么牛逼的都是他们，而不是你呢？</p><p>我想多数时候是你没有看清楚做一件事的真正内核。</p><p>在这个世界上，其实都不用怕那些练过一万种腿法的人，只怕把一种腿法练习一万次的人。</p><p>市面上赚钱的人有很多很多，他们赚钱的原因并不是因为知道各种赚钱的方法，而是因为专注。</p><p>你每天听太多东西了，而你自己又消化不了，每天看很多牛逼的点子，其实总是在被不断的转移注意力。</p><p><strong>你从来没有认真想过，你自己到底要如何把你现有的事做好，或者说，把你听到的这么多点子拿出一个来实践好？</strong></p><p>总是反复，总是改来改去，总是看到别人好的点子，于是又中断你手上在测试的项目。</p><p>这种有点像你在浏览网页的时候，被一个页面一个页面的吸引，到后面都不知道，当初自己到底要搜索什么，于是时间很快就过去了。</p><p>别人给你看的成功案例，当他发出来的时候，你不知道，他自己过去走了多少弯路？测试了多长的时间？失败了多上项目才能成功？</p><p>这里面对一个项目的测试，感觉，和解决问题的方法，岂是你看一个点子就能立马得到的？</p><p>很多项目，不用太多，坚持一个点子去做，不断的去测试，改进，复盘，再试，那么你就有成功的可能。</p><p>以上！</p><p><strong>———————–</strong></p><p><strong>公众号：</strong>小北的梦呓（ID：xiaobeishare）</p><p><strong>博客：</strong><a href="http://www.guxiaobei.com/">www.guxiaobei.com</a></p><p><strong>B 站：</strong>小北的梦呓</p><p><strong>微博：</strong>小北的梦呓</p>]]></content>
    
    
    <categories>
      
      <category>生财の道</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>顾小北</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精力管理</title>
    <link href="/2020/10/09/%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86/"/>
    <url>/2020/10/09/%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="精力管理"><a href="#精力管理" class="headerlink" title="精力管理"></a>精力管理</h1><p>时间管理的本质是精力管理，在拥有了一个<a href="https://www.yuque.com/jianxu/diary/qer6hi">好的睡眠</a>，以及一个<a href="https://www.yuque.com/jianxu/diary/cnrsz9">好的培养习惯的方法</a>之后需要确定精力的分配问题，为长期的成长做打算。很显然，目前的问题是我的兴趣极其广泛但均非常浅薄而不精通，没有足够的精力投入，不够 focus，也无法成为该领域的专家。这些兴趣我都很喜欢，但我需要找到我最感兴趣的，然后投入时间。分三个优先级，然后依次分配精力，记录到小打卡的微习惯目标当中，再分配精力，练习，提高。</p><h3 id="第一优先级"><a href="#第一优先级" class="headerlink" title="第一优先级"></a>第一优先级</h3><p>第一优先级的应该是<em>工作事业</em>相关的，只要还依赖这一技能混饭吃，那么它就应该是我花费最多时间的领域，持续精进，成为专家甚至大师，并获得足够的影响力。在这里，我很庆幸自己选择的是程序员这个职业，他是一个非常适合终身学习的行业，其领域不断地在延伸发展并深刻影响着我们的日常生活。</p><p>因此这个第一优先级的领域是:</p><ul><li><p>技术，程序员，这个充满创造力的领域。细分下去:</p></li><li><p><em>基础技术</em>:   金字塔的底部，需要足够厚，来支撑上层建筑，具体而言是数据结构，算法，编译原理，领域设计，体系结构，不用说是每个专业程序员都需要重点掌握的。</p></li><li><p><em>领域知识</em>:   目前是前端，离用户最近的职业，有足够的广度以供探索拓宽，从业者巨大，容易获得影响力。</p></li><li><p><em>相关知识</em> : 和领域相关的知识，如英语能力，阅读技巧，写作能力等。</p></li></ul><h3 id="第二优先级"><a href="#第二优先级" class="headerlink" title="第二优先级"></a>第二优先级</h3><p>第二优先级的是和自己的身体健康相关的，如跑步，健身，游泳，羽毛球，篮球等。在这个领域最好选择一项需要技巧的运动，以及一项有氧运动，运动能够促进大脑的生长，延缓衰老，预防疾病，减少压力，是一个非常值得投入精力的领域。在这个领域我最擅长的是：</p><ul><li>_[技巧]羽毛球_，弹跳跑爆，有足够的技巧和运动量，培养爆发力，需要思考技巧，做到专业。</li><li>_[有氧] 跑步 or 徒步_，《跑步圣经》，如村上春树。古希腊的人就知道要跑步了。跑步的好处有很多，不赘述，每周 3 ~ 4 小时的跑步时间需要确保一下，做到跑者级别。</li><li><em>[力量] 健身</em> ，健身目前以简单的每天 100 个仰卧起坐和 30 个左右的俯卧撑持续积攒数量，没有到一定要塑形的需求。</li></ul><h3 id="第三优先级"><a href="#第三优先级" class="headerlink" title="第三优先级"></a>第三优先级</h3><p>纯属个人兴趣的，培养思维能力，抽象能力的，或者其他技巧，如桌球，麻将，纸牌，绘画，书法，棋，乐器等都是第三优先级，选择其中一样持续性投入，但同一段时间只需要刻意练习一个即可，目前比较感兴趣的:</p><ul><li>_书法_，楷体，行书，练到 20%水平即可，没有特别想要成为书法十级这样的期望，不过写出来的字要让人觉得我是一个靠谱的人，而丑字常常会给人这样的想法，俗话说字如其人，不过好在这个可以通过练习改变。</li><li>_台球_，运筹帷幄，心态调整，习惯不停思考，不停审阅自己，不停提升自己。系统地练球，专注力、分析能力、大局观、局部肌肉协调能力、抗压能力、情绪控制。</li><li>_绘画_，一直觉得会绘画的人很棒，画一幅画通常需要相当长的时间和耐心，会让人觉得心思细腻，而一旦画完也很有成就感，至今尝试过很多次无果，无法培养起信心，没有方法，没有联系，没有反馈，没有提高。肯定是学习方法的问题，在学习一项领域的时候一定要有方法，而且也许很需要老师的指导。</li><li>_唱歌_，目的当然是为了在 KTV 出人头地啦，了解之后第一次意识到原来唱歌是有很多技巧，需要大量练习的，一直觉得那些唱歌好的肯定天生就唱的好，其实都是错误的观念，排除先天因素，大部分人所缺乏的实际是一套科学的方法与持续的练习。</li><li>_日语_，五十音也学了好几遍了，初衷大概是想结识日本妹子？后来了解了更多的日本历史和文化，对日本就更加感兴趣了，也许以后可以去实际在日本居住几年。不过优先级不高，维持能读出五十音的状态，然后等优先级高的项目完成。</li></ul><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>因此目前梳理下来，几个重要的分配精力的事情，除工作日常 8 小时外，需要在其他 8 个小时中挤出时间做精力管理，实际每人每天能够自由利用的时间大概在 3 ~ 4 小时，对这段时间的利用决定了你的成长曲线。</p><ul><li>重学前端 &amp;   计算机基础 =》 每天两个小时，4 个番茄时钟保证，需要细分学习内容，做好计划。</li><li>跑步[3~4 小时] &amp; 羽毛球[2 小时] &amp; 微量健身[每天 10 分钟] =&gt; 大概每天一小时的量，持续做和练习即可。</li><li>书法: 大概练习完 10 册字帖[每天半小时]。</li></ul>]]></content>
    
    
    <categories>
      
      <category>黑客与画家</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻微失眠的治疗方法</title>
    <link href="/2020/10/09/%E8%BD%BB%E5%BE%AE%E5%A4%B1%E7%9C%A0%E7%9A%84%E6%B2%BB%E7%96%97%E6%96%B9%E6%B3%95/"/>
    <url>/2020/10/09/%E8%BD%BB%E5%BE%AE%E5%A4%B1%E7%9C%A0%E7%9A%84%E6%B2%BB%E7%96%97%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="轻微失眠的治疗方法"><a href="#轻微失眠的治疗方法" class="headerlink" title="轻微失眠的治疗方法"></a>轻微失眠的治疗方法</h1><p>一直有一些轻微的失眠，在床上总想刷手机或者看 Pad，或者躺在床上胡思乱想，对个人的生活造成了相当程度的困扰，不过好在目前建立了正确的睡眠观，推荐大家去看一下《睡眠革命》。下面讲一下我的方法，可能对少部分人没有效果，不过可以试试看。</p><h3 id="睡眠常识"><a href="#睡眠常识" class="headerlink" title="睡眠常识"></a>睡眠常识</h3><ul><li>1.5 小时为一个睡眠周期，每周保证 28 ~ 35 小时的睡眠周期即可，也就是每天只要睡 4 ~5 个睡眠周期即可，如果某一天晚睡早起，没有关系，可以之后的天数补回来，不建议少于 28 个周期。</li><li>褪黑素是你睡眠的重要物质，屋子里的蓝光会阻碍褪黑素的产生，如各种屏幕，因此睡前要远离蓝光。</li><li>古代人类，日出而作，日落而息，是符合人类正常作息习惯的行为，因此不要过晚睡觉，推荐早起。</li><li>大脑在睡觉时会排除脑内的毒素，巩固重要的记忆，因此如果睡眠不足会导致头痛，头晕等各种症状，让你变”笨”，多睡觉可以加强机器，所以睡眠真的很重要</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="一-睡前-1-2-小时"><a href="#一-睡前-1-2-小时" class="headerlink" title="一. 睡前 1 ~ 2 小时"></a>一. 睡前 1 ~ 2 小时</h4><ul><li>关闭手机，pad，电脑等电子设备，避免蓝光</li><li>可以喝杯热牛奶等，但不宜喝过多，否则半夜起床容易打断睡眠周期。</li><li>可以泡脚促进血液循环，让身体暖起来。</li><li>关闭大灯，打开有”温暖光线”的小灯，模拟温和的日光。</li><li>在这段时间内你可以做一些不需要电子设备的事情，比如洗澡，比如练字，比如看书，听书，稍微锻炼一下都可以。</li></ul><h4 id="二-准备睡觉前"><a href="#二-准备睡觉前" class="headerlink" title="二. 准备睡觉前"></a>二. 准备睡觉前</h4><p>避免胡思乱想的方法是让自己的意识被一些其他不刺激的东西吸引住，我的方法是听书。</p><ul><li>无线蓝牙耳机，小一些，我用的 airpods，不听了拿下来就会自动断开，有线的话不方便移动。</li><li>声音调整至 4 格以下，在四周安静的情况下勉强让自己能够听见的情况，这样即使你睡着了也不会被听书惊醒，而且低声音能够让你稍微集中意识去听，又不至于让你精神亢奋。</li><li>读物选择像水一样平淡的小说或文集，避免越听越刺激然后睡不着，推荐村上的小说，真尼玛催眠，比如《1Q84》，《刺杀骑士团长》，一般一章节 20 多分钟之后就啥都不记得了，早上起来发现已经好多章没有听到。</li><li>读书的声音尽量没有任何情感，避免读书的人想通过各种方式占有你的注意力，如果始终在一个调子上面最好，推荐机器读书最为合适，我用的”微信读书”，温柔男生，非常催眠。</li></ul><h4 id="三-早起"><a href="#三-早起" class="headerlink" title="三. 早起"></a>三. 早起</h4><p>固定一个起床时间，如 7.30，这样倒推自己的睡眠时间，早起的好处是你有足够长的时间可以吃早餐，学习，享受无干扰的学习或思考时间。有时候逼自己早起几次自然到了晚上就困得不行，配合上面的方法想不睡着都很难</p>]]></content>
    
    
    <categories>
      
      <category>黑客与画家</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效践行ARTS</title>
    <link href="/2020/10/09/%E6%9C%89%E6%95%88%E8%B7%B5%E8%A1%8CARTS/"/>
    <url>/2020/10/09/%E6%9C%89%E6%95%88%E8%B7%B5%E8%A1%8CARTS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="有效践行-ARTS"><a href="#有效践行-ARTS" class="headerlink" title="有效践行 ARTS"></a>有效践行 ARTS</h1><h2 id="ARTS-是什么"><a href="#ARTS-是什么" class="headerlink" title="ARTS 是什么?"></a>ARTS 是什么?</h2><p>Every week you shoud the below.<br><strong>1.solve a leetcode’s algorithm problem.</strong><br><code>Algorithm</code>：至少做一个 LeetCode 的算法题。主要为了编程训练和学习。</p><p><strong>2.Read and and comment on English techinacal article at least one.</strong><br><code>Review</code>：阅读并点评至少一篇英文技术文章。主要为了学习英文，如果你英文不行，很难成为技术高手。</p><p><strong>3.Learn at least one technical tip.</strong><br><code>Tip</code>：学习至少一个技术技巧。主要是为了总结和归纳你日常工作中所遇到的知识点。</p><p><strong>4.Share a technical and thinking article that has opinions.</strong><br><code>Share</code>：分享一篇有观点和思考的技术文章。主要为了输出你的影响力，能够输出你的价值观。</p><p>ARTS 高效学习是一个按周去做的项目，需要持续地坚持下去，这个项目可以让我们不断去反思、总结、归纳，以便让自己高效地学习。</p><blockquote><p>只有你开始自己思考，开始自己总结和归纳，开始找人交流讨论，开始践行，并开始对外输出，你才会掌握到真正的学习能力<br>所以，学习不是努力读更多的书，盲目追求阅读的速度和数量，这会让人产生低层次的勤奋和成长的感觉，这只是在使蛮力。要思辨，要践行，要总结和归纳，否则，你只是在机械地重复某件事（记忆知识），而不会有质的成长的。</p></blockquote><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>ARTS 是由左耳朵耗子陈皓在极客时间专栏《左耳听风》中发起的一个每周学习打卡计划。</p><blockquote><p><code>Algorithm：</code>至少做一个 LeetCode 的算法题。主要为了编程训练和学习。<br> <code>Review：</code>阅读并点评至少一篇英文技术文章。主要为了学习英文，如果你英文不行，很难成为技术高手。<br><code>Tip：</code>学习至少一个技术技巧。主要是为了总结和归纳你日常工作中所遇到的知识点。<br><code>Share：</code>分享一篇有观点和思考的技术文章。主要为了输出你的影响力，能够输出你的价值观。</p></blockquote><h3 id="1-Algorithm-算法"><a href="#1-Algorithm-算法" class="headerlink" title="1. Algorithm(算法)"></a>1. Algorithm(算法)</h3><h3 id="2-Review-点评"><a href="#2-Review-点评" class="headerlink" title="2. Review(点评)"></a>2. Review(点评)</h3><h3 id="3-Tip-技巧"><a href="#3-Tip-技巧" class="headerlink" title="3. Tip(技巧)"></a>3. Tip(技巧)</h3><h3 id="4-Share-分享"><a href="#4-Share-分享" class="headerlink" title="4. Share(分享)"></a>4. Share(分享)</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://coolshell.cn/articles/12052.html">LEETCODE 编程训练</a><br><a href="https://github.com/haoel/leetcode">leetcode github</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ARTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存的分段表示法</title>
    <link href="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    <url>/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="内存分段表示法"><a href="#内存分段表示法" class="headerlink" title="内存分段表示法"></a>内存分段表示法</h1><h2 id="1-什么是内存"><a href="#1-什么是内存" class="headerlink" title="1.什么是内存?"></a>1.什么是内存?</h2><p>内存(Memeory)是计算机中最重要的部件之一，它是程序与 CPU 进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存对计算机的影响非常大，内存又被称为主存，其作用是存放 CPU 中的运算数据，以及与硬盘等外部存储设备交换的数据。只要计算机在运行中，CPU 就会把需要运算的数据调到主存中进行运算，当运算完成后 CPU 再将结果传送出来，主存的运行也决定了计算机的稳定运行。</p><h2 id="2-内存的物理结构"><a href="#2-内存的物理结构" class="headerlink" title="2.内存的物理结构"></a>2.内存的物理结构</h2><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-15-45-08.png" class=""><p>内存的内部是由各种 IC 电路组成的，它的种类很庞大，但是其主要分为三种存储器:</p><p><code>随机存储器（RAM）</code>：内存中最重要的一种，表示既可以从中读取数据，也可以写入数据。当机器关闭时，内存中的信息会 丢失。<br><code>只读存储器（ROM）：</code>ROM 一般只能用于数据的读取，不能写入数据，但是当机器停电时，这些数据不会丢失。<br><code>高速缓存（Cache）：</code>Cache 也是我们经常见到的，它分为一级缓存（L1 Cache）、二级缓存（L2 Cache）、三级缓存（L3 Cache）这些数据，它位于内存和 CPU 之间，是一个读写速度比内存更快的存储器。当 CPU 向内存写入数据时，这些数据也会被写入高速缓存中。当 CPU 需要读取数据时，会直接从高速缓存中直接读取，当然，如需要的数据在 Cache 中没有，CPU 会再去读取内存中的数据。</p><p>内存 IC 是一个完整的结构，它内部也有电源、地址信号、数据信号、控制信号和用于寻址的 IC 引脚来进行数据的读写。下面是一个虚拟的 IC 引脚示意图:</p><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-15-48-25.png" class=""><blockquote><p>note:<br>图中 VCC 和 GND 表示电源，<code>A0 - A9</code> 是<code>地址信号</code>的引脚，<code>D0 - D7</code> 表示的是<code>数据信号</code>、<code>RD</code> 和 <code>WR</code> 都是<code>控制信号</code>，我用不同的颜色进行了区分，将电源连接到 VCC 和 GND 后，就可以对其他引脚传递 0 和 1 的信号，大多数情况下，<code>+5V</code> 表示 <strong>1</strong>，<code>0V</code> 表示 <strong>0</strong>。</p><p>我们都知道内存是用来存储数据，那么这个内存 IC 中能存储多少数据呢？D0 - D7 表示的是数据信号，也就是说，一次可以输入输出 8 bit = 1 byte 的数据。A0 - A9 是地址信号共十个，表示可以指定 00000 00000 - 11111 11111 共 2 的 10 次方 = 1024 个地址。每个地址都会存放 1 byte 的数据，因此我们可以得出内存 IC 的容量就是 1 KB。</p><p>如果我们使用的是 512 MB 的内存，这就相当于是 512000（512 * 1000） 个内存 IC。当然，一台计算机不太可能有这么多个内存 IC ，然而，通常情况下，一个内存 IC 会有更多的引脚，也就能存储更多数据。</p></blockquote><h2 id="4-确定物理地址的方法"><a href="#4-确定物理地址的方法" class="headerlink" title="4. 确定物理地址的方法"></a>4. 确定物理地址的方法</h2><ol><li>CPU 访问内存单元时要给出内存单元的地址。</li><li>所有内存单元构成的存储空间是一个一维的线性空间。</li><li>每一个内存单元在这个空间中有唯一的地址，这个唯一的地址称为<code>物理地址</code>。</li></ol><blockquote><p>物理地址对应的是 5 位的 16 进制数，相当于 20 位的二进制数</p></blockquote><p><strong>4. 事实</strong></p><p>4.1 8086 有 20 位地址总线，可传送 20 位地址，<code>寻址能力为1M</code>。</p><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-16-54-03.png" class=""><p>4.2 8086 是 16 位结构 CPU<br>4.2.1 运算器一次最多可以处理 16 位的数据，寄存器的最大宽度为 16 位。<br>4.2.2 在 8086 内存处理的、传输、暂存的地址也是 16 位，<code>寻址能力也只有64kb</code></p><p>问题: 8086 如何处理在寻址空间上的这个矛盾？！</p><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-16-33-06.png" class=""><h2 id="5-用分段的方式管理内存"><a href="#5-用分段的方式管理内存" class="headerlink" title="5.用分段的方式管理内存"></a>5.用分段的方式管理内存</h2><p>8086CPU 用”(段地址 x16)+偏移地址=物理地址”的方式给出内存单元的物理地址.</p><blockquote><p>Note:<br>段地址 x16：相当于左移 4 位 <code>2*2*2*2</code></p></blockquote><p>将内存分成若干个段，<code>内存并没有分段，段的划分来自于CPU</code>!!!<br>内存是一块连续的区域，先对内存进行分段，然后具体到哪个物理地址，通过结合偏移地址来计算。</p><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-16-01-31.png" class=""><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-16-04-46.png" class=""><h2 id="6-用不同的段地址和偏移地址形成同一个物理地址"><a href="#6-用不同的段地址和偏移地址形成同一个物理地址" class="headerlink" title="6. 用不同的段地址和偏移地址形成同一个物理地址"></a>6. 用不同的段地址和偏移地址形成同一个物理地址</h2><img src="/2020/10/08/%E5%86%85%E5%AD%98%E7%9A%84%E5%88%86%E6%AE%B5%E8%A1%A8%E7%A4%BA%E6%B3%95/2020-10-09-16-11-42.png" class=""><hr><table><thead><tr><th>物理地址</th><th>段地址</th><th>偏移地址</th></tr></thead><tbody><tr><td>21F60H</td><td>2000H</td><td><strong>1F60H</strong></td></tr></tbody></table><blockquote><p>Note:</p><p><code>21F60</code><strong>H</strong></p><p>H 为 hex 的缩写. 表示十六进制<br>21F60H 表示为十六进制地址。</p></blockquote><h4 id="计算示例"><a href="#计算示例" class="headerlink" title="计算示例"></a>计算示例</h4><pre><code class="hljs tap">物理地址 = 段地址 *<span class="hljs-number"> 16 </span>(左移<span class="hljs-number"> 4 </span>位) + 偏移地址</code></pre><pre><code class="hljs powershell"><span class="hljs-number">21</span>F60<span class="hljs-built_in">H</span> - <span class="hljs-number">20000</span><span class="hljs-built_in">H</span> = <span class="hljs-number">1</span>F60<span class="hljs-built_in">H</span></code></pre><blockquote><p>2000<code>0</code>H 为左移 4 位，原理百度二进制与十六进制的转换.</p></blockquote><p>我们把 8086 丰富的取址方式用活了，也就是把汇编语言学会了.</p>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编环境安装</title>
    <link href="/2020/10/08/%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/2020/10/08/%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="汇编环境安装"><a href="#汇编环境安装" class="headerlink" title="汇编环境安装"></a>汇编环境安装</h1><h2 id="Required-Environment"><a href="#Required-Environment" class="headerlink" title="Required Environment"></a>Required Environment</h2><ul><li><a href="https://www.dosbox.com/download.php?main=1">DOSBOX</a> </li><li><a href="https://github.com/dantefung/MASM.git">MASM</a></li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li>笔者的环境为Mac OS环境，下载DOSBox-0.74-3-3.dmg后，双击打开后，直接将软件拖拽入应用程序的目录即可.</li><li>在你打算存放masm的目录下，执行<blockquote><p><code>git clone https://github.com/dantefung/MASM.git</code></p></blockquote></li></ol><h2 id="Mount-your-c-driver"><a href="#Mount-your-c-driver" class="headerlink" title="Mount your c driver"></a>Mount your c driver</h2><p>运行dosbox，然后输入你要挂载的目录(因人而异):</p><blockquote><p><code>mount /Users/admin/Documents/software/MASM/masm</code></p></blockquote><h2 id="Try-it-now"><a href="#Try-it-now" class="headerlink" title="Try it now"></a>Try it now</h2><blockquote><p>c:<br>debug<br>d</p></blockquote><img src="/2020/10/08/%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/2020-10-08-13-24-28.png" class=""><center>-- EOF -- </center>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>MASM</tag>
      
      <tag>dosbox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能指标</title>
    <link href="/2020/09/30/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <url>/2020/09/30/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="性能调优专栏"><a href="#性能调优专栏" class="headerlink" title="性能调优专栏"></a>性能调优专栏</h2>]]></content>
    
    
    <categories>
      
      <category>性能调优专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优化MySQL引起的CPU消耗过大</title>
    <link href="/2020/09/30/%E4%BC%98%E5%8C%96MySQL%E5%BC%95%E8%B5%B7%E7%9A%84CPU%E6%B6%88%E8%80%97%E8%BF%87%E5%A4%A7/"/>
    <url>/2020/09/30/%E4%BC%98%E5%8C%96MySQL%E5%BC%95%E8%B5%B7%E7%9A%84CPU%E6%B6%88%E8%80%97%E8%BF%87%E5%A4%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作者：jiaxin_12</p><p>来源：rrd.me/gtrAA</p><p>–</p><h2 id="谁在消耗-cpu"><a href="#谁在消耗-cpu" class="headerlink" title="谁在消耗 cpu?"></a>谁在消耗 cpu?</h2><p>用户+系统+IO 等待+软硬中断+空闲</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82ZnVUM2VtV0k1S2pZbmhFaWFkMVRpYURTeUJJQXA1S1N1Zkx2RDY3eFFpYmljaWJROW9kRllnYXI1VURLWDNqNTNvTkY5S1h5ZmRyZTg3Z2NsZ0hBdmliOXQ3QS82NDA?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82ZnVUM2VtV0k1S2pZbmhFaWFkMVRpYURTeUJJQXA1S1N1bUJHU0tHc283S0tGN3BERWtUQWtFdlJVQ1hxcEhIdzBWbTRpYWpMZUk0aGc1Y0k2ck1LaFR6QS82NDA?x-oss-process=image/format,png"></p><p>–</p><h2 id="祸首是谁？"><a href="#祸首是谁？" class="headerlink" title="祸首是谁？"></a>祸首是谁？</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户空间 CPU 消耗，各种逻辑运算</p><blockquote><p>正在进行大量 tps</p><p>函数/排序/类型转化/逻辑 IO 访问…</p></blockquote><p>用户空间消耗大量 cpu，产生的系统调用是什么？那些函数使用了 cpu 周期？</p><h3 id="IO-等待"><a href="#IO-等待" class="headerlink" title="IO 等待"></a>IO 等待</h3><p>等待 IO 请求的完成</p><blockquote><p>此时 CPU 实际上空闲</p></blockquote><p>如 vmstat 中的 wa 很高。但 IO 等待增加，wa 也不一定会上升（请求 I/O 后等待响应，但进程从核上移开了）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X3BuZy9IVjR5VEk2UGpiS3YyQmFtV0lPTmpUSVpWc214aWF5M2FKdG1RWDhXTXlyVmdGSXhEbEU0Ynh0aWFmcm9kTGlhVzljNk5zTTNFckdRelg5OHp4Qm5rejF6dy82NDA?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X3BuZy9IVjR5VEk2UGpiS3YyQmFtV0lPTmpUSVpWc214aWF5M2F3OTZ0UnJ3MnRPNGRNZ1dHTGxORXJnNk5XSUVPS3A1WHoxUjJPbm9TOTd5WmU1ZFNKeGt2cUEvNjQw?x-oss-process=image/format,png"></p><h3 id="产生影响"><a href="#产生影响" class="headerlink" title="产生影响"></a>产生影响</h3><p>用户和 IO 等待消耗了大部分 cpu</p><ul><li><p>吞吐量下降（tps）</p></li><li><p>查询响应时间增加</p></li><li><p>慢查询数增加</p></li><li><p>对 mysql 的并发陡增，也会产生上诉影响</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82ZnVUM2VtV0k1S2pZbmhFaWFkMVRpYURTeUJJQXA1S1N1bEZOcmNVSVVOZFA1TUhzWTFWS3UyVGJZckJWZkVhM0FrTmx3R0pQWDdlNW9ubFhHb09lTXVBLzY0MA?x-oss-process=image/format,png"></p><p>–</p><h2 id="如何减少-CPU-消耗？"><a href="#如何减少-CPU-消耗？" class="headerlink" title="如何减少 CPU 消耗？"></a>如何减少 CPU 消耗？</h2><h3 id="减少等待"><a href="#减少等待" class="headerlink" title="减少等待"></a>减少等待</h3><p>减少 IO 量</p><p>SQL/index，使用合适的索引减少扫描的行数（需平衡索引的正收益和维护开销，空间换时间）</p><p>提升 IO 处理能力</p><p>加 cache/加磁盘/SSD</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82ZnVUM2VtV0k1S2pZbmhFaWFkMVRpYURTeUJJQXA1S1N1b1lwRXpuMXVjS2lhTXdlUlBnVEVhVmNQd3lOOWY4eU5SVEtvcjBEbGFmcUxEa01LNFRSdWdkdy82NDA?x-oss-process=image/format,png"></p><h3 id="减少计算"><a href="#减少计算" class="headerlink" title="减少计算"></a>减少计算</h3><p>减少逻辑运算量</p><ul><li><p>避免使用函数，将运算转移至易扩展的应用服务器中 如 substr 等字符运算，dateadd/datesub 等日期运算，abs 等数学函数</p></li><li><p>减少排序，利用索引取得有序数据或避免不必要排序 如 union all 代替 union，order by 索引字段等</p></li><li><p>禁止类型转换，使用合适类型并保证传入参数类型与数据库字段类型绝对一致 如数字用 tiny/int/bigint 等，必需转换的在传入数据库之前在应用中转好</p></li><li><p>简单类型，尽量避免复杂类型，降低由于复杂类型带来的附加运算。更小的数据类型占用更少的磁盘、内存、cpu 缓存和 cpu 周期</p></li><li><p>….</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X3BuZy9IVjR5VEk2UGpiS3YyQmFtV0lPTmpUSVpWc214aWF5M2E0dVVuUVhZdEV1VXRzM0VveDdRd3prZjlQd0Zra1RteUtoVDM5bGJjaWM5SXdTVEo5cklRVmt3LzY0MA?x-oss-process=image/format,png"></p><p>减少逻辑 IO 量</p><ul><li><p>index，优化索引，减少不必要的表扫描 如增加索引，调整组合索引字段顺序，去除选择性很差的索引字段等等</p></li><li><p>table，合理拆分，适度冗余 如将很少使用的大字段拆分到独立表，非常频繁的小字段冗余到”引用表”</p></li><li><p>SQL，调整 SQL 写法，充分利用现有索引，避免不必要的扫描，排序及其他操作 如减少复杂 join，减少 order by，尽量 union all，避免子查询等</p></li><li><p>数据类型，够用就好，减少不必要使用大字段 如 tinyint 够用就别总是 int，int 够用也别老 bigint，date 够用也别总是 timestamp</p></li><li><p>….</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82ZnVUM2VtV0k1S2pZbmhFaWFkMVRpYURTeUJJQXA1S1N1cjFzdnRIS0toS1k1V0lrbTFReGxyY0VaNlhNekJpY1RyaWNoS2ljSzFXZ1M3UVVzc0c5MTRxdVN3LzY0MA?x-oss-process=image/format,png"></p><p>减少 query 请求量（非数据库本身）</p><ul><li><p>适当缓存，降低缓存数据粒度，对静态并被频繁请求的数据进行适当的缓存 如用户信息，商品信息等</p></li><li><p>优化实现，尽量去除不必要的重复请求 如禁止同一页面多次重复请求相同数据的问题，通过跨页面参数传递减少访问等</p></li><li><p>合理需求，评估需求产出比，对产出比极端底下的需求合理去除</p></li><li><p>….</p></li></ul><p>升级 cpu 若经过减少计算和减少等待后还不能满足需求，cpu 利用率还高 T_T 是时候拿出最后的杀手锏了，升级 cpu，是选择更快的 cpu 还是更多的 cpu 了？</p><ul><li><p>低延迟（快速响应），需要更快的 cpu（每个查询只能使用一个 cpu）</p></li><li><p>高吞吐，同时运行很多查询语句，能从多个 cpu 处理查询中收益</p></li></ul><p>–</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p>《高性能 MySQL》</p></li><li><p>《图解性能优化》</p></li><li><p>大部分整理自《MySQL Tuning For CPU Bottleneck》</p></li></ul><p>有道无术，术可成；有术无道，止于术</p>]]></content>
    
    
    <categories>
      
      <category>性能调优专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>转载</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码-人类认知世界的方式</title>
    <link href="/2020/09/28/%E7%BC%96%E7%A0%81-%E4%BA%BA%E7%B1%BB%E8%AE%A4%E7%9F%A5%E4%B8%96%E7%95%8C%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/09/28/%E7%BC%96%E7%A0%81-%E4%BA%BA%E7%B1%BB%E8%AE%A4%E7%9F%A5%E4%B8%96%E7%95%8C%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="人类认知世界的方式-一"><a href="#人类认知世界的方式-一" class="headerlink" title="人类认知世界的方式(一)"></a>人类认知世界的方式(一)</h2><h2 id="人类认知世界的方式-二"><a href="#人类认知世界的方式-二" class="headerlink" title="人类认知世界的方式(二)"></a>人类认知世界的方式(二)</h2><h3 id="人类对空间的认知"><a href="#人类对空间的认知" class="headerlink" title="人类对空间的认知"></a>人类对空间的认知</h3><h3 id="人类对时间的认知"><a href="#人类对时间的认知" class="headerlink" title="人类对时间的认知"></a>人类对时间的认知</h3><h3 id="为什么我们能够交流"><a href="#为什么我们能够交流" class="headerlink" title="为什么我们能够交流?"></a>为什么我们能够交流?</h3><p>因为我们使用了同一套编码系统。</p><h2 id="人类认知世界的方式-三"><a href="#人类认知世界的方式-三" class="headerlink" title="人类认知世界的方式(三)"></a>人类认知世界的方式(三)</h2><p>中国: 讲究<code>哲学</code>;<br>欧美(西方): 科学研究;</p><p>信源(信息的来源) –&gt; 编码(对世界的认知)</p><p>中西结合: 数理化这些数学公式是对<code>道</code>的描述，也就是对客观世界的描述。</p><p><code>道</code>: 是客观的，是不会变的。<br><code>理</code>: 是人主观的，是会变化的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言IDE</title>
    <link href="/2020/09/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80IDE/"/>
    <url>/2020/09/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80IDE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="汇编语言-IDE-介绍"><a href="#汇编语言-IDE-介绍" class="headerlink" title="汇编语言 IDE 介绍"></a>汇编语言 IDE 介绍</h1><h2 id="一、工具介绍"><a href="#一、工具介绍" class="headerlink" title="一、工具介绍"></a>一、工具介绍</h2><h3 id="RedASM"><a href="#RedASM" class="headerlink" title="RedASM"></a>RedASM</h3><p>软件下载地址: <a href="http://masm32.com/board/index.php?topic=6855.0">RadASM v2.2.2.3</a></p><img src="/2020/09/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80IDE/2020-09-28-10-58-52.png" class=""><h3 id="MASMPlus-1-2"><a href="#MASMPlus-1-2" class="headerlink" title="MASMPlus 1.2"></a>MASMPlus 1.2</h3><p>软件下载地址: <a href="http://www.aogosoft.com/masmplus/idesetup.exe">MASMPlus 1.2 ZIP</a></p><img src="/2020/09/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80IDE/2020-09-28-10-58-39.png" class=""><h3 id="DOSBox"><a href="#DOSBox" class="headerlink" title="DOSBox"></a>DOSBox</h3><p><a href="https://www.dosbox.com/">DOSBox</a>,an x86 emulator with DOS.<br>它采用的是 SDL 库，便于移植到其他的平台。目前，DOSBox 已经支持在 Windows、Linux、Mac OS X、BeOS、palmOS、Android、webOS、os/2 等系统中运行。</p><h3 id="调试工具-debug-exe"><a href="#调试工具-debug-exe" class="headerlink" title="调试工具 debug.exe"></a>调试工具 debug.exe</h3><p>Debug 是 DOS、Windows 都提供的实模式（8086 方式）程序的调试工具。使用它，可以查看 CPU 各种寄存器中的内容、内存的情况和在机器码级跟踪程序的运行。</p><h3 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h3><ol><li>64 位操作系统安装</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="http://www.asmedu.net/bbs/forum.jsp">汇编论坛</a></p>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>CS基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 常用快捷键 cheatsheet</title>
    <link href="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/"/>
    <url>/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/2020-09-24-14-50-06.png" class=""><h1 id="vim-常用快捷键-cheetsheet"><a href="#vim-常用快捷键-cheetsheet" class="headerlink" title="vim 常用快捷键 cheetsheet"></a>vim 常用快捷键 cheetsheet</h1><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=528272281&auto=1&height=66"></iframe></center><p>听完这首歌，我觉得我的快乐又回来了!</p><h2 id="语义化Vim"><a href="#语义化Vim" class="headerlink" title="语义化Vim"></a>语义化Vim</h2><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/syntax_vim.png" class=""><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>闲来无事，希望能触及 vim 编辑器的精髓，特意从网上摘录这份备忘录。感受一下远古神器。</p><p>本文锚点快捷导航:</p><ul><li><a href="#9.2-%E5%A4%9A%E6%A0%87%E7%AD%BE%E7%BC%96%E8%BE%91">9.2 多标签编辑</a></li><li><a href="10-%E5%88%86%E5%B1%8F">10. 分屏</a></li><li><a href="#16-%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7">16. 实用技巧</a></li><li><a href="#16.2-%E5%9C%A8vi%E6%88%96vim%E4%B8%8A%E6%9F%A5%E6%89%BE%E5%AD%97%E7%AC%A6%E4%B8%B2">16.2 在 vi 或 vim 上查找字符串</a></li><li><a href="#16.3-%E5%BF%AB%E9%80%9F%E5%A4%8D%E5%88%B6%E5%A4%9A%E8%A1%8C">16.3 快速复制多行</a></li><li><a href="#16.4-%E5%85%A8%E9%80%89%E5%B9%B6%E5%A4%8D%E5%88%B6">16.4 全选并复制</a></li><li><a href="#">16.5-vim 如何移动当前行向上或向下 vim 移动整行的方法</a></li><li><a href="#16.9-%E8%87%AA%E5%8A%A8%E8%BE%93%E5%85%A5%E6%8C%87%E5%AE%9A%E4%B8%AA%E6%95%B0%E7%9A%84%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6">16.9 自动输入指定个数的重复字符</a></li><li><a href="#16.4-vim%E4%B8%AD%E7%9A%84%E6%9B%BF%E6%8D%A2%E6%A8%A1%E5%BC%8F">16.14 vim 中的替换模式</a></li><li><a href="#16.15-%E5%85%B1%E4%BA%AB%E5%89%AA%E5%88%87%E6%9D%BF">16.15 共享剪切板</a></li><li><a href="#16.16-vim%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E5%89%AA%E5%88%87%E6%9D%BF%E5%A4%8D%E5%88%B6">16.16 vim 实现系统剪切板复制</a></li></ul><p>我阅读过一些好看的文章:         </p><ul><li><a href="https://github.com/wsdjeg/Learn-Vim_zh_cn">用聪明的方式学 Vim</a></li><li><a href="https://blog.csdn.net/dc_726/article/details/78981756?spm=1001.2014.3001.5501">Vim 终极指南：所思即所得_西代零零发 - CSDN 博客</a></li><li><a href="https://github.com/wsdjeg/vim-galore-zh_cn%60">Vim 从入门到精通</a></li><li><a href="https://vim.wxnacy.com/">Vim 练级手册</a></li><li><a href="https://github.com/LintaoAmons/VimEverywhere">Vim Everywhere</a></li><li><a href="https://learnku.com/docs/practical-vim-2nd-edition">Practical Vim</a></li><li><a href="https://vimawesome.com/?spm=a2c6h.12873639.0.0.248314adpINpOM">Awesome Vim plugins</a></li><li><a href="https://www.typingclub.com/">typingclub</a></li><li><a href="https://vim.nauxscript.com/index.html">Just Vim It</a></li><li><a href="https://github.com/dantefung/full-keyboard">full-keyboard</a></li><li><a href="https://www.mwum.com/books/">《明无梦的 Vim 使用记录》</a></li></ul><p>我看过的一些视频:</p><ul><li><a href="https://space.bilibili.com/394425489">林饕的blibli主页</a></li></ul><p>插件的快捷键:</p><ul><li><a href="#NERDTree%E5%BF%AB%E6%8D%B7%E9%94%AE">NERDTree 快捷键</a></li></ul><h2 id="1-关于-Vim"><a href="#1-关于-Vim" class="headerlink" title="1. 关于 Vim"></a>1. 关于 Vim</h2><p>vim 是我最喜欢的编辑器，也是 Linux 下第二强大的编辑器。 虽然 emacs 是公认的世界第一，我认为使用 emacs 并没有使用 vi 进行编辑来得高效。 如果是初学 vi，运行一下 vimtutor 是个聪明的决定。 （如果你的系统环境不是中文，而你想使用中文的 vimtutor，就运行 vimtutor zh）</p><h3 id="1-1-Vim-的几种模式"><a href="#1-1-Vim-的几种模式" class="headerlink" title="1.1 Vim 的几种模式"></a>1.1 Vim 的几种模式</h3><p><strong>正常模式：</strong>可以使用快捷键命令，或按:输入命令行。<br><strong>插入模式：</strong>可以输入文本，在正常模式下，按 i、a、o 等都可以进入插入模式。<br><strong>可视模式：</strong>正常模式下按 v 可以进入可视模式， 在可视模式下，移动光标可以选择文本。按 V 进入可视行模式， 总是整行整行的选中。ctrl+v 进入可视块模式。</p><table border="1" cellspacing="0"><tbody><tr><td valign="center"><p>v</p></td><td valign="center"><p>进入字符可视化模式 &nbsp; （移动一次选择一个字符）</p></td></tr><tr><td valign="center"><p>V</p></td><td valign="center"><p>进入行可视化模式</p></td></tr><tr><td valign="center"><p>ctrl-V</p></td><td valign="center"><p>进入块可视化模式</p></td></tr><tr><td valign="center"><p>ctrl-Q</p></td><td valign="center"></td></tr><tr><td valign="center"><p>gv</p></td><td valign="center"><p>选中前一次可视化模式时选择的文本</p></td></tr><tr><td valign="center"><p>o</p></td><td valign="center"><p>光标移动到选中文本的另一结尾</p></td></tr><tr><td valign="center"><p>O</p></td><td valign="center"><p>光标移动到选中文本的另一角落</p></td></tr></tbody></table><p><strong>替换模式：</strong> 正常模式下，按 R 进入。</p><h2 id="2-启动-Vim"><a href="#2-启动-Vim" class="headerlink" title="2. 启动 Vim"></a>2. 启动 Vim</h2><p>vim -c cmd file: 在打开文件前，先执行指定的命令；<br>vim -r file: 恢复上次异常退出的文件；<br>vim -R file: 以只读的方式打开文件，但可以强制保存；<br>vim -M file: 以只读的方式打开文件，不可以强制保存；<br>vim -y num file: 将编辑窗口的大小设为 num 行；<br>vim + file: 从文件的末尾开始；<br>vim +num file: 从第 num 行开始；<br>vim +/string file: 打开 file，并将光标停留在第一个找到的 string 上。<br>vim –remote file: 用已有的 vim 进程打开指定的文件。 如果你不想启用多个 vim 会话，这个很有用。但要注意， 如果你用 vim，会寻找名叫 VIM 的服务器；如果你已经有一个 gvim 在运行了， 你可以用 gvim –remote file 在已有的 gvim 中打开文件。</p><h2 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a>3. 文档操作</h2><p>:e file –关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi 会警告。<br>:e! file –放弃对当前文件的修改，编辑新的文件。<br>:e+file – 开始新的文件，并从文件尾开始编辑。<br>:e+n file – 开始新的文件，并从第 n 行开始编辑。<br>:enew –编译一个未命名的新文档。(CTRL-W n)<br>:e – 重新加载当前文档。<br>:e! – 重新加载当前文档，并丢弃已做的改动。<br>:e#或 ctrl+^ – 回到刚才编辑的文件，很实用。<br>:f 或 ctrl+g – 显示文档名，是否修改，和光标位置。<br>:f filename – 改变编辑的文件名，这时再保存相当于另存为。<br>gf – 打开以光标所在字符串为文件名的文件。<br>:w – 保存修改。<br>:n1,n2w filename – 选择性保存从某 n1 行到另 n2 行的内容。<br>:wq – 保存并退出。<br>ZZ – 保存并退出。<br>:x – 保存并退出。<br>:q[uit] ——退出当前窗口。(CTRL-W q 或 CTRL-W CTRL-Q)<br>:saveas newfilename – 另存为<br>:browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开 netrw 的文件浏览窗口； 如果是 gvim，则会打开一个图形界面的浏览窗口。 实际上:browse 后可以跟任何编辑文档的命令，如 sp 等。 用 browse 打开的起始目录可以由 browsedir 来设置：<br>:set browsedir=last – 用上次访问过的目录（默认）；<br>:set browsedir=buffer – 用当前文件所在目录；<br>:set browsedir=current – 用当前工作目录；<br>:Sex – 水平分割一个窗口，浏览文件系统；<br>:Vex – 垂直分割一个窗口，浏览文件系统；</p><h2 id="4-光标的移动"><a href="#4-光标的移动" class="headerlink" title="4. 光标的移动"></a>4. 光标的移动</h2><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/%E7%A7%BB%E5%8A%A8%E5%AE%9A%E4%BD%8D.png" class=""><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/%E7%A7%BB%E5%8A%A8%E5%AE%9A%E4%BD%8D%E5%8A%A9%E8%AE%B0.png" class=""><h3 id="4-1-基本移动"><a href="#4-1-基本移动" class="headerlink" title="4.1 基本移动"></a>4.1 基本移动</h3><p>以下移动都是在 normal 模式下。</p><p>h 或退格: 左移一个字符；<br>l 或空格: 右移一个字符；<br>j: 下移一行；<br>k: 上移一行；<br>gj: 移动到一段内的下一行；<br>gk: 移动到一段内的上一行； +或 Enter: 把光标移至下一行第一个非空白字符。<br>-: 把光标移至上一行第一个非空白字符。<br>w: 前移一个单词，光标停在下一个单词开头；<br>W: 移动下一个单词开头，但忽略一些标点；<br>e: 前移一个单词，光标停在下一个单词末尾；<br>E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；<br>b: 后移一个单词，光标停在上一个单词开头；<br>B: 移动到上一个单词开头，忽略一些标点；<br>ge: 后移一个单词，光标停在上一个单词末尾；<br>gE: 同 ge ，不过‘单词’包含单词相邻的标点。<br>(: 前移 1 句。<br>): 后移 1 句。<br>{: 前移 1 段。<br>}: 后移 1 段。<br>fc: 把光标移到同一行的下一个 c 字符处<br>Fc: 把光标移到同一行的上一个 c 字符处<br>tc: 把光标移到同一行的下一个 c 字符前<br>Tc: 把光标移到同一行的上一个 c 字符后<br>;: 配合 f &amp; t 使用，重复一次<br>,: 配合 f &amp; t 使用，反向重复一次<br>上面的操作都可以配合 n 使用，比如在正常模式(下面会讲到)下输入 3h， 则光标向左移动 3 个字符。</p><p>0: 移动到行首。<br>g0: 移到光标所在屏幕行行首。<br>^: 移动到本行第一个非空白字符。<br>g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。<br>$: 移动到行尾。<br>g$: 移动光标所在屏幕行行尾。<br>n|: 把光标移到递 n 列上。<br><code>nG</code>: 到文件第 n 行。<br>:n<cr> 移动到第 n 行。<br>:$<cr> 移动到最后一行。<br>H: 把光标移到屏幕最顶端一行。<br>M: 把光标移到屏幕中间一行。<br>L: 把光标移到屏幕最底端一行。<br>gg: 到文件头部。<br>G: 到文件尾部。</p><h3 id="4-2-翻屏"><a href="#4-2-翻屏" class="headerlink" title="4.2 翻屏"></a>4.2 翻屏</h3><p>ctrl+f: 下翻一屏。<br>ctrl+b: 上翻一屏。<br>ctrl+d: 下翻半屏。<br>ctrl+u: 上翻半屏。<br>ctrl+e: 向下滚动一行。<br>ctrl+y: 向上滚动一行。<br>n%: 到文件 n%的位置。<br>zz: 将当前行移动到屏幕中央。<br>zt: 将当前行移动到屏幕顶端。<br>zb: 将当前行移动到屏幕底端。</p><h3 id="4-3-标记"><a href="#4-3-标记" class="headerlink" title="4.3 标记"></a>4.3 标记</h3><p>使用标记可以快速移动。到达标记后，可以用 Ctrl+o 返回原来的位置。 Ctrl+o 和 Ctrl+i 很像浏览器上的 后退 和 前进 。</p><p>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。<br>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出 Vim， 重新启动，标记仍然有效。<br><code>&#123;a-z&#125;: 移动到标记位置。 &#39;&#123;a-z&#125;: 移动到标记行的行首。 </code>{0-9}：回到上[2-10]次关闭 vim 时最后离开的位置。<br><code>: 移动到上次编辑的位置。&#39;&#39;也可以，不过</code>精确到列，而’’精确到行 。如果想跳转到更老的位置，可以按 C-o，跳转到更新的位置用 C-i。<br><code>&quot;: 移动到上次离开的地方。 </code>.: 移动到最后改动的地方。<br>:marks 显示所有标记。<br>:delmarks a b – 删除标记 a 和 b。<br>:delmarks a-c – 删除标记 a、b 和 c。<br>:delmarks a c-f – 删除标记 a、c、d、e、f。<br>:delmarks! – 删除当前缓冲区的所有标记。<br>:help mark-motions 查看更多关于 mark 的知识。</p><h2 id="5-插入文本"><a href="#5-插入文本" class="headerlink" title="5. 插入文本"></a>5. 插入文本</h2><h3 id="5-1-基本插入"><a href="#5-1-基本插入" class="headerlink" title="5.1 基本插入"></a>5.1 基本插入</h3><p>i: 在光标前插入；一个小技巧：按 8，再按 i，进入插入模式，输入=， 按 esc 进入命令模式，就会出现 8 个=。 这在插入分割线时非常有用，如 30i+<esc>就插入了 36 个+组成的分割线。<br>I: 在当前行第一个非空字符前插入；<br>gI: 在当前行第一列插入；<br>a: 在光标后插入；<br>A: 在当前行最后插入；<br>o: 在下面新建一行插入；<br>O: 在上面新建一行插入；<br>:r filename 在当前位置插入另一个文件的内容。<br>:[n]r filename 在第 n 行插入另一个文件的内容。<br>:r !date 在光标处插入当前日期与时间。同理，:r !command 可以将其它 shell 命令的输出插入当前文档。</p><h3 id="5-2-改写插入"><a href="#5-2-改写插入" class="headerlink" title="5.2 改写插入"></a>5.2 改写插入</h3><p>c[n]w: 改写光标后 1(n)个词。<br>c[n]l: 改写光标后 n 个字母。<br>c[n]h: 改写光标前 n 个字母。<br>[n]cc: 修改当前[n]行。<br>[n]s: 以输入的文本替代光标之后 1(n)个字符，相当于 c[n]l。<br>[n]S: 删除指定数目的行，并以所输入文本代替之。<br>注意，类似 cnw,dnw,ynw 的形式同样可以写为 ncw,ndw,nyw。</p><h2 id="6-剪切复制和寄存器"><a href="#6-剪切复制和寄存器" class="headerlink" title="6. 剪切复制和寄存器"></a>6. 剪切复制和寄存器</h2><h3 id="6-1-剪切和复制、粘贴"><a href="#6-1-剪切和复制、粘贴" class="headerlink" title="6.1 剪切和复制、粘贴"></a>6.1 剪切和复制、粘贴</h3><pre><code class="hljs nestedtext"><span class="hljs-attribute">x 删除当前光标下的字符。</span><span class="hljs-attribute">[n]x</span><span class="hljs-punctuation">:</span> <span class="hljs-string">剪切光标右边 n 个字符，相当于 d[n]l。</span><span class="hljs-attribute">[n]X</span><span class="hljs-punctuation">:</span> <span class="hljs-string">剪切光标左边 n 个字符，相当于 d[n]h。</span><span class="hljs-attribute">y</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制在可视模式下选中的文本。</span><span class="hljs-attribute">yy or Y</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制整行文本。</span><span class="hljs-attribute">y[n]w</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制一(n)个词。</span><span class="hljs-attribute">y[n]l</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制光标右边 1(n)个字符。</span><span class="hljs-attribute">y[n]h</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制光标左边 1(n)个字符。</span><span class="hljs-attribute">y$</span><span class="hljs-punctuation">:</span> <span class="hljs-string">从光标当前位置复制到行尾。</span><span class="hljs-attribute">y0</span><span class="hljs-punctuation">:</span> <span class="hljs-string">从光标当前位置复制到行首。</span>:m,ny&lt;cr&gt; 复制m行到n行的内容。<span class="hljs-attribute">y1G或ygg</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制光标以上的所有行。</span><span class="hljs-attribute">yG</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制光标以下的所有行。</span><span class="hljs-attribute">yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。</span><span class="hljs-attribute">d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）在可视模式下选中的文本。</span><span class="hljs-attribute">d$ or D</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）当前位置到行尾的内容。</span><span class="hljs-attribute">d[n]w</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）1(n)个单词</span><span class="hljs-attribute">d[n]l</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）光标右边 1(n)个字符。</span><span class="hljs-attribute">d[n]h</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）光标左边 1(n)个字符。</span><span class="hljs-attribute">d0</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）当前位置到行首的内容</span><span class="hljs-attribute">[n] dd</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除（剪切）1(n)行。</span>:m,nd&lt;cr&gt; 剪切 m 行到 n 行的内容。<span class="hljs-attribute">d1G 或 dgg</span><span class="hljs-punctuation">:</span> <span class="hljs-string">剪切光标以上的所有行。</span><span class="hljs-attribute">dG</span><span class="hljs-punctuation">:</span> <span class="hljs-string">剪切光标以下的所有行。</span><span class="hljs-attribute">daw 和 das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</span><span class="hljs-attribute">d/f&lt;cr&gt;：这是一个比较高级的组合命令，它将删除当前位置 到下一个 f 之间的内容。</span><span class="hljs-attribute">p</span><span class="hljs-punctuation">:</span> <span class="hljs-string">在光标之后粘贴。</span><span class="hljs-attribute">P</span><span class="hljs-punctuation">:</span> <span class="hljs-string">在光标之前粘贴。</span>c 功能和 d 相同，区别在于完成删除操作后进入 INSERT MODEcc 也是删除当前行，然后进入 INSERT MODE</code></pre><h3 id="6-2-文本对象"><a href="#6-2-文本对象" class="headerlink" title="6.2 文本对象"></a>6.2 文本对象</h3><pre><code class="hljs stata">aw：一个词<span class="hljs-keyword">as</span>：一句。<span class="hljs-keyword">ap</span>：一段。ab：一块（包含在圆括号中的）。y, <span class="hljs-keyword">d</span>, c, v 都可以跟文本对象。</code></pre><h3 id="6-3-寄存器"><a href="#6-3-寄存器" class="headerlink" title="6.3 寄存器"></a>6.3 寄存器</h3><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>-z：都可以用作寄存器名。&quot;ayy 把当前行的内容放入 <span class="hljs-selector-tag">a</span> 寄存器。<span class="hljs-selector-tag">A</span>-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如&quot;Ayy 把当前行的内容追加到 <span class="hljs-selector-tag">a</span> 寄存器中。:reg 显示所有寄存器的内容。<span class="hljs-string">&quot;&quot;</span>：不加寄存器索引时，默认使用的寄存器。<span class="hljs-string">&quot;*：当前选择缓冲区，&quot;</span>*yy 把当前行的内容放入当前选择缓冲区。<span class="hljs-string">&quot;+：系统剪贴板。&quot;</span>+yy 把当前行的内容放入系统剪贴板。</code></pre><h2 id="7-查找与替换"><a href="#7-查找与替换" class="headerlink" title="7. 查找与替换"></a>7. 查找与替换</h2><h3 id="7-1-查找"><a href="#7-1-查找" class="headerlink" title="7.1 查找"></a>7.1 查找</h3><pre><code class="hljs vim">/something: 在后面的文本中查找 something。?something: 在前面的文本中查找 something。/pattern/+<span class="hljs-keyword">number</span>: 将光标停在包含 pattern 的行后面第 <span class="hljs-keyword">number</span> 行上。/pattern/-<span class="hljs-keyword">number</span>: 将光标停在包含 pattern 的行前面第 <span class="hljs-keyword">number</span> 行上。n: 向后查找下一个。<span class="hljs-keyword">N</span>: 向前查找下一个。可以用 <span class="hljs-keyword">grep</span> 或 <span class="hljs-keyword">vimgrep</span> 查找一个模式都在哪些地方出现过，其中:<span class="hljs-keyword">grep</span> 是调用外部的 <span class="hljs-keyword">grep</span> 程序，而:<span class="hljs-keyword">vimgrep</span> 是 <span class="hljs-keyword">vim</span> 自己的查找算法。用法为： :<span class="hljs-keyword">vim</span>[<span class="hljs-keyword">grep</span>]/pattern/[g] [<span class="hljs-keyword">j</span>] <span class="hljs-keyword">files</span>g 的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。<span class="hljs-keyword">j</span> 的含义是 <span class="hljs-keyword">grep</span> 结束后，结果停在第 <span class="hljs-keyword">j</span> 项，默认是停在第一项。<span class="hljs-keyword">vimgrep</span> 前面可以加数字限定搜索结果的上限，如:<span class="hljs-number">1</span><span class="hljs-keyword">vim</span>/pattern/ % 只查找那个模式在本文件中的第一个出现。其实 <span class="hljs-keyword">vimgrep</span> 在读纯文本电子书时特别有用，可以生成导航的目录。比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：:<span class="hljs-keyword">vim</span>/^d&#123;<span class="hljs-number">1</span>,&#125;./ %然后用:<span class="hljs-keyword">cw</span> 或:<span class="hljs-keyword">copen</span> 查看结果，可以用 C-<span class="hljs-keyword">w</span> H 把 quickfix 窗口移到左侧，就更像个目录了。</code></pre><h3 id="7-2-替换"><a href="#7-2-替换" class="headerlink" title="7.2 替换"></a>7.2 替换</h3><pre><code class="hljs elixir"><span class="hljs-symbol">:s/old/new</span> - 用 new 替换当前行第一个 old。<span class="hljs-symbol">:s/old/new/g</span> - 用 new 替换当前行所有的 old。<span class="hljs-symbol">:n1</span>,n2s/old/new/g - 用 new 替换文件 n1 行到 n2 行所有的 old。<span class="hljs-symbol">:%s/old/new/g</span> - 用 new 替换文件中所有的 old。<span class="hljs-symbol">:%s/^/xxx/g</span> - 在每一行的行首插入 xxx，^表示行首。<span class="hljs-symbol">:%s/</span><span class="hljs-variable">$/</span>xxx/g - 在每一行的行尾插入xxx，<span class="hljs-variable">$表</span>示行尾。所有替换命令末尾加上 c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上 i 则忽略大小写(ignore)。还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，语法为 <span class="hljs-symbol">:</span>[range]g/pattern/command例如 <span class="hljs-symbol">:%g/^</span> xyz/normal dd。表示对于以一个空格和 xyz 开头的行执行 normal 模式下的 dd 命令。关于 range 的规定为：如果不指定 range，则表示当前行。m,<span class="hljs-symbol">n:</span> 从 m 行到 n 行。<span class="hljs-number">0</span>: 最开始一行（可能是这样）。\<span class="hljs-variable">$:</span> 最后一行.: 当前行%: 所有行</code></pre><p><strong>vim 查找与替换带有特殊字符:</strong></p><pre><code class="hljs elixir"><span class="hljs-symbol">:s/aa/bb</span> <span class="hljs-comment"># 将光标所在行第一个 aa 替换为 bb</span><span class="hljs-symbol">:s/aa/bb/g</span> <span class="hljs-comment"># 将光标所在行所有 aa 替换为 bb</span><span class="hljs-symbol">:%s/aa/bb/g</span> <span class="hljs-comment"># 全文执行替换 aa 替换为 bb</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span>,<span class="hljs-number">10</span>s/aa/bb/g <span class="hljs-comment"># 将第 3 行到第 10 行 aa 替换为 bb</span><span class="hljs-symbol">:%s/</span>\\/\//g <span class="hljs-comment"># 全文\替换为/ （特殊字符：^、$、\*、/、\和.都需要转义，前面加上\）</span><span class="hljs-symbol">:%s</span>,\\,/,g <span class="hljs-comment"># 或用逗号分割（/可以不用转义）</span><span class="hljs-symbol">:%s</span>,aa,bb,gic <span class="hljs-comment"># 全文 aa（忽略大小写） 替换为 bb，每次替换提示是否替换</span>常用标记，gic 可自由组合使用：% 所有行   g 单行内所有匹配项(默认只匹配单行第一个)i 忽略大小写   c 确认是否替换以下命令将文中所有的字符串 idiots 替换成 managers：<span class="hljs-symbol">:</span><span class="hljs-number">1</span>,<span class="hljs-variable">$s</span>/idiots/manages/g通常我们会在命令中使用%指代整个文件做为替换范围：<span class="hljs-symbol">:%s/search/replace/g</span>以下命令指定只在第 <span class="hljs-number">5</span> 至第 <span class="hljs-number">15</span> 行间进行替换:<span class="hljs-symbol">:</span><span class="hljs-number">5</span>,<span class="hljs-number">15</span>s/dog/cat/g以下命令指定只在当前行至文件结尾间进行替换:<span class="hljs-symbol">:</span>.,<span class="hljs-variable">$s</span>/dog/cat/g以下命令指定只在后续 <span class="hljs-number">9</span> 行内进行替换:<span class="hljs-symbol">:</span>.,.+<span class="hljs-number">8</span>s/dog/cat/g你还可以将特定字符做为替换范围。比如，将 <span class="hljs-title class_">SQL</span> 语句从 <span class="hljs-title class_">FROM</span> 至分号部分中的所有等号（=）替换为不等号（&lt;&gt;）：<span class="hljs-symbol">:/FROM/</span>,/;/s/=/&lt;&gt;/g在可视化模式下，首先选择替换范围, 然后输入<span class="hljs-symbol">:</span>进入命令模式，就可以利用 s 命令在选中的范围内进行文本替换。<span class="hljs-comment">### 7.3 正则表达式</span>高级的查找替换就要用到正则表达式。\<span class="hljs-symbol">d:</span> 表示十进制数（我猜的）\<span class="hljs-symbol">s:</span> 表示空格\<span class="hljs-symbol">S:</span> 非空字符\<span class="hljs-symbol">a:</span> 英文字母\|: 表示 或\.: 表示.&#123;m,n&#125;: 表示 m 到 n 个字符。这要和 \s 与\a 等连用，如 \a\&#123;m,n&#125; 表示 m 到 n 个英文字母。&#123;m,&#125;: 表示 m 到无限多个字符。\*\*: 当前目录下的所有子目录。<span class="hljs-symbol">:help</span> pattern 得到更多帮助。</code></pre><h2 id="8-排版"><a href="#8-排版" class="headerlink" title="8. 排版"></a>8. 排版</h2><h3 id="8-1-基本排版"><a href="#8-1-基本排版" class="headerlink" title="8.1 基本排版"></a>8.1 基本排版</h3><p><code>&lt;&lt;</code> 向左缩进一个 shiftwidth</p><p><code>&gt; &gt;</code> 向右缩进一个 shiftwidth<br><code>&gt; &gt;</code> :ce(nter) 本行文字居中<br><code>&gt; &gt;</code> :le(ft) 本行文字靠左<br><code>&gt; &gt;</code> :ri(ght) 本行文字靠右<br><code>&gt; &gt;</code> gq 对选中的文字重排，即对过长的文字进行断行<br><code>&gt; &gt;</code> gqq 重排当前行<br><code>&gt; &gt;</code> gqnq 重排 n 行<br><code>&gt; &gt;</code> gqap 重排当前段<br><code>&gt; &gt;</code> gqnap 重排 n 段<br><code>&gt; &gt;</code> gqnj 重排当前行和下面 n 行<br><code>&gt; &gt;</code> gqQ 重排当前段对文章末尾<br><code>&gt; &gt;</code> J 拼接当前行和下一行<br><code>&gt; &gt;</code> gJ 同 J ，不过合并后不留空格。<br><code>==</code> 缩进当前行</p><h3 id="8-2-拼写检查"><a href="#8-2-拼写检查" class="headerlink" title="8.2 拼写检查"></a>8.2 拼写检查</h3><p>:set spell－开启拼写检查功能<br>:set nospell－关闭拼写检查功能<br>]s－移到下一个拼写错误的单词<br>[s－作用与上一命令类似，但它是从相反方向进行搜索<br>z=－显示一个有关拼写错误单词的列表，可从中选择<br>zg－告诉拼写检查器该单词是拼写正确的<br>zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的</p><h3 id="8-3-统计字数"><a href="#8-3-统计字数" class="headerlink" title="8.3 统计字数"></a>8.3 统计字数</h3><p>g ^g 可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。</p><h2 id="9-编辑多个文件"><a href="#9-编辑多个文件" class="headerlink" title="9. 编辑多个文件"></a>9. 编辑多个文件</h2><h3 id="9-1-一次编辑多个文件"><a href="#9-1-一次编辑多个文件" class="headerlink" title="9.1 一次编辑多个文件"></a>9.1 一次编辑多个文件</h3><p>我们可以一次打开多个文件，如</p><p>vi a.txt b.txt c.txt<br>使用:next(:n)编辑下一个文件。<br>:2n 编辑下 2 个文件。<br>使用:previous 或:N 编辑上一个文件。<br>使用:wnext，保存当前文件，并编辑下一个文件。<br>使用:wprevious，保存当前文件，并编辑上一个文件。<br>使用:args 显示文件列表。<br>:n filenames 或:args filenames 指定新的文件列表。<br>vi -o filenames 在水平分割的多个窗口中编辑多个文件。<br>vi -O filenames 在垂直分割的多个窗口中编辑多个文件。</p><h3 id="9-2-多标签编辑"><a href="#9-2-多标签编辑" class="headerlink" title="9.2 多标签编辑"></a>9.2 多标签编辑</h3><p><span id="9.2-多标签编辑"></span></p><p>vim -p files: 打开多个文件，每个文件占用一个标签页。<br>:tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。<br>^w gf – 在新的标签页里打开光标下路径指定的文件。<br>:tabn – 切换到下一个标签。Control + PageDown，也可以。<br>:tabp – 切换到上一个标签。Control + PageUp，也可以。<br>[n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第 n 个标签。第一个标签的序号就是 1。<br>:tab split – 将当前缓冲区的内容在新页签中打开。<br>:tabc[lose] – 关闭当前的标签页。<br>:tabo[nly] – 关闭其它的标签页。<br>:tabs – 列出所有的标签页和它们包含的窗口。<br>:tabm[ove] [N] – 移动标签页，移动到第 N 个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</p><h3 id="9-3-缓冲区"><a href="#9-3-缓冲区" class="headerlink" title="9.3 缓冲区"></a>9.3 缓冲区</h3><p>:buffers 或:ls 或:files 显示缓冲区列表。<br>ctrl+^：在最近两个缓冲区间切换。<br>:bn – 下一个缓冲区。<br>:bp – 上一个缓冲区。<br>:bl – 最后一个缓冲区。<br>:b[n]或:[n]b – 切换到第 n 个缓冲区。<br>:nbw(ipeout) – 彻底删除第 n 个缓冲区。<br>:nbd(elete) – 删除第 n 个缓冲区，并未真正删除，还在 unlisted 列表中。<br>:ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</p><h2 id="10-分屏编辑"><a href="#10-分屏编辑" class="headerlink" title="10. 分屏编辑"></a>10. 分屏编辑</h2><p><span id="10-分屏编辑"></span></p><p>vim -o file1 file2:水平分割窗口，同时打开 file1 和 file2<br>vim -O file1 file2:垂直分割窗口，同时打开 file1 和 file2</p><h3 id="10-1-水平分割"><a href="#10-1-水平分割" class="headerlink" title="10.1 水平分割"></a>10.1 水平分割</h3><p>:split(:sp) – 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S 可能会冻结终端，请按 CTRL-Q 继续。<br>:split filename – 水平分割窗口，并在新窗口中显示另一个文件。<br>:nsplit(:nsp) – 水平分割出一个 n 行高的窗口。<br>:[N]new – 水平分割出一个 N 行高的窗口，并编辑一个新文件。 (CTRL-W n 或 CTRL-W CTRL-N)<br>ctrl+w f –水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。<br>C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</p><h3 id="10-2-垂直分割"><a href="#10-2-垂直分割" class="headerlink" title="10.2 垂直分割"></a>10.2 垂直分割</h3><p>:vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v 或 CTRL CTRL-V)<br>:[N]vne[w] – 垂直分割出一个新窗口。<br>:vertical 水平分割的命令： 相应的垂直分割。</p><h3 id="10-3-关闭子窗口"><a href="#10-3-关闭子窗口" class="headerlink" title="10.3 关闭子窗口"></a>10.3 关闭子窗口</h3><p>:qall – 关闭所有窗口，退出 vim。<br>:wall – 保存所有修改过的窗口。<br>:only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)<br>:close – 关闭当前窗口，CTRL-W c 能实现同样的功能。 (象 :q :x 同样工作 )</p><h3 id="10-4-调整窗口大小"><a href="#10-4-调整窗口大小" class="headerlink" title="10.4 调整窗口大小"></a>10.4 调整窗口大小</h3><p>ctrl+w + –当前窗口增高一行。也可以用 n 增高 n 行。<br>ctrl+w - –当前窗口减小一行。也可以用 n 减小 n 行。<br>ctrl+w _ –当前窗口扩展到尽可能的大。也可以用 n 设定行数。<br>:resize n – 当前窗口 n 行高。<br>ctrl+w = – 所有窗口同样高度。<br>n ctrl+w _ – 当前窗口的高度设定为 n 行。<br>ctrl+w &lt; –当前窗口减少一列。也可以用 n 减少 n 列。<br>ctrl+w &gt; –当前窗口增宽一列。也可以用 n 增宽 n 列。<br>ctrl+w | –当前窗口尽可能的宽。也可以用 n 设定列数。</p><h3 id="10-5-切换和移动窗口"><a href="#10-5-切换和移动窗口" class="headerlink" title="10.5 切换和移动窗口"></a>10.5 切换和移动窗口</h3><p>如果支持鼠标，切换和调整子窗口的大小就简单了。</p><p>ctrl+w ctrl+w: 切换到下一个窗口。或者是 ctrl+w w。<br>ctrl+w p: 切换到前一个窗口。<br>ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。<br>ctrl+w t(b):切换到最上（下）面的窗口。<BR><br>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。<br>ctrl+w r：旋转窗口的位置。<br>ctrl+w T: 将当前的窗口移动到新的标签页上。</p><h2 id="11-快速编辑"><a href="#11-快速编辑" class="headerlink" title="11. 快速编辑"></a>11. 快速编辑</h2><h3 id="11-1-改变大小写"><a href="#11-1-改变大小写" class="headerlink" title="11.1 改变大小写"></a>11.1 改变大小写</h3><p>~: 反转光标所在字符的大小写。<br>可视模式下的 U 或 u：把选中的文本变为大写或小写。<br>gu(U)接范围（如$，或 G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如 ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如 gu5j，把当前行和下面四行全部变成小写。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>　1.整篇文章大写转化为小写</p><p>打开文件后，无须进入命令行模式。</p><p>键入:ggguG</p><p>解释一下：ggguG分作三段gg gu G</p><p>gg=光标到文件第一个字符</p><p>gu=把选定范围全部小写</p><p>G=到文件结束</p><p>　　2.整篇文章小写转化为大写</p><p>打开文件后，无须进入命令行模式。</p><p>键入:gggUG</p><p>解释一下：gggUG分作三段gg gU G</p><p>gg=光标到文件第一个字符</p><p>gU=把选定范围全部大写</p><p>G=到文件结束</p><p>　　3、只转化某个单词</p><p>guw 、gue、gUw、gUe</p><p>这样，光标后面的单词便会进行大小写转换</p><p>想转换5个单词的命令如下：</p><p>gu5w、gu5e、gU5w、gU5e</p><p>　　4、转换几行的大小写</p><p>将光标定位到想转换的行上，键入：1gU</p><p>从光标所在行往下一行都进行小写到大写的转换</p><p>10gU，则进行11行小写到大写的转换</p><p>以此类推，就出现其他的大小写转换命令</p><p>gU0 ：从光标所在位置到行首，都变为大写</p><p>gU$ ：从光标所在位置到行尾，都变为大写</p><p>gUG ：从光标所在位置到文章最后一个字符，都变为大写</p><p>gU1G ：从光标所在位置到文章第一个字符，都变为大写</p><h3 id="11-2-替换（normal-模式）"><a href="#11-2-替换（normal-模式）" class="headerlink" title="11.2 替换（normal 模式）"></a>11.2 替换（normal 模式）</h3><p>r: 替换光标处的字符，同样支持汉字。<br>R: 进入替换模式，按 esc 回到正常模式。</p><h3 id="11-3-撤消与重做（normal-模式）"><a href="#11-3-撤消与重做（normal-模式）" class="headerlink" title="11.3 撤消与重做（normal 模式）"></a>11.3 撤消与重做（normal 模式）</h3><p>[n] u: 取消一(n)个改动。<br>:undo 5 – 撤销 5 个改变。<br>:undolist – 你的撤销历史。<br>ctrl + r: 重做最后的改动。<br>U: 取消当前行中所有的改动。<br>:earlier 4m – 回到 4 分钟前<br>:later 55s – 前进 55 秒</p><h3 id="11-4-宏"><a href="#11-4-宏" class="headerlink" title="11.4 宏"></a>11.4 宏</h3><p>normal 模式下:</p><p>. –重复上一个编辑动作<br>qa：开始录制宏 a（键盘操作记录）<br>q：停止录制<br>@a：播放宏 a</p><h2 id="12-编辑特殊文件"><a href="#12-编辑特殊文件" class="headerlink" title="12. 编辑特殊文件"></a>12. 编辑特殊文件</h2><h3 id="12-1-文件加解密"><a href="#12-1-文件加解密" class="headerlink" title="12.1 文件加解密"></a>12.1 文件加解密</h3><p>vim -x file: 开始编辑一个加密的文件。<br>:X – 为当前文件设置密码。<br>:set key= – 去除文件的密码。<br>这里是 滇狐总结的比较高级的 vi 技巧。</p><h3 id="12-2-文件的编码"><a href="#12-2-文件的编码" class="headerlink" title="12.2 文件的编码"></a>12.2 文件的编码</h3><p>:e ++enc=utf8 filename, 让 vim 用 utf-8 的编码打开这个文件。<br>:w ++enc=gbk，不管当前文件什么编码，把它转存成 gbk 编码。<br>:set fenc 或:set fileencoding，查看当前文件的编码。<br>在 vimrc 中添加 set fileencoding=ucs-bom,utf-8,cp936，vim 会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936 对应于 gbk 编码。 ucs-bom 对应于 windows 下的文件格式。<br>让 vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc 的正确配置</p><h3 id="12-3-文件格式"><a href="#12-3-文件格式" class="headerlink" title="12.3 文件格式"></a>12.3 文件格式</h3><p>大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。</p><p>:e ++ff=dos filename, 让 vim 用 dos 格式打开这个文件。<br>:w ++ff=mac filename, 以 mac 格式存储这个文件。<br>:set ff，显示当前文件的格式。<br>在 vimrc 中添加 set fileformats=unix,dos,mac，让 vim 自动识别文件格式。</p><h2 id="13-编程辅助"><a href="#13-编程辅助" class="headerlink" title="13. 编程辅助"></a>13. 编程辅助</h2><h3 id="13-1-一些按键"><a href="#13-1-一些按键" class="headerlink" title="13.1 一些按键"></a>13.1 一些按键</h3><p>gd: 跳转到局部变量的定义处；<br>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；<br>g;: 上一个修改过的地方；<br>g,: 下一个修改过的地方；<br>[[: 跳转到上一个函数块开始，需要有单独一行的{。]]: 跳转到下一个函数块开始，需要有单独一行的{。<br>[]: 跳转到上一个函数块结束，需要有单独一行的}。<br>][: 跳转到下一个函数块结束，需要有单独一行的}。<br>[{: 跳转到当前块开始处；<br>]}: 跳转到当前块结束处；<br>[/: 跳转到当前注释块开始处；<br>]/: 跳转到当前注释块结束处；<br>**%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif 之间跳跃。**<br>下面的括号匹配对编程很实用的。</p><p>ci’, di’, yi’：修改、剪切或复制’之间的内容。<br>ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。<br>ci”, di”, yi”：修改、剪切或复制”之间的内容。<br>ca”, da”, ya”：修改、剪切或复制”之间的内容，包含”。<br>ci(, di(, yi(：修改、剪切或复制()之间的内容。<br>ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。<br>ci[, di[, yi[：修改、剪切或复制[]之间的内容。<br>ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。<br>ci{, di{, yi{：修改、剪切或复制{}之间的内容。<br>ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。<br>ci&lt;, di&lt;, yi&lt;：修改、剪切或复制&lt;&gt;之间的内容。<br>ca&lt;, da&lt;, ya&lt;：修改、剪切或复制&lt;&gt;之间的内容，包含&lt;&gt;。<br>13.2 ctags<br>ctags -R: 生成 tag 文件，-R 表示也为子目录中的文件生成 tags<br>:set tags=path/tags – 告诉 ctags 使用哪个 tag 文件<br>:tag xyz – 跳到 xyz 的定义处，或者将光标放在 xyz 上按 C-]，返回用 C-t<br>:stag xyz – 用分割的窗口显示 xyz 的定义，或者 C-w ]， 如果用 C-w n ]，就会打开一个 n 行高的窗口<br>:ptag xyz – 在预览窗口中打开 xyz 的定义，热键是 C-w }。<br>:pclose – 关闭预览窗口。热键是 C-w z。<br>:pedit abc.h – 在预览窗口中编辑 abc.h<br>:psearch abc – 搜索当前文件和当前文件 include 的文件，显示包含 abc 的行。<br>有时一个 tag 可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。</p><p>:[n]tnext – 下一[n]个匹配。<br>:[n]tprev – 上一[n]个匹配。<br>:tfirst – 第一个匹配<br>:tlast – 最后一个匹配<br>:tselect tagname – 打开选择列表<br>tab 键补齐</p><p>:tag xyz<tab> – 补齐以 xyz 开头的 tag 名，继续按 tab 键，会显示其他的。<br>:tag /xyz<tab> – 会用名字中含有 xyz 的 tag 名补全。</p><h3 id="13-3-cscope"><a href="#13-3-cscope" class="headerlink" title="13.3 cscope"></a>13.3 cscope</h3><p>cscope -Rbq: 生成 cscope.out 文件<br>:cs add /path/to/cscope.out /your/work/dir<br>:cs find c func – 查找 func 在哪些地方被调用<br>:cw – 打开 quickfix 窗口查看结果</p><h3 id="13-4-gtags"><a href="#13-4-gtags" class="headerlink" title="13.4 gtags"></a>13.4 gtags</h3><p>Gtags 综合了 ctags 和 cscope 的功能。 使用 Gtags 之前，你需要安装 GNU Gtags。 然后在工程目录运行 gtags 。</p><p>:Gtags funcname 定位到 funcname 的定义处。<br>:Gtags -r funcname 查询 funcname 被引用的地方。<br>:Gtags -s symbol 定位 symbol 出现的地方。<br>:Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。<br>:Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。<br>:Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示 vm 目录下的文件。</p><h3 id="13-5-编译"><a href="#13-5-编译" class="headerlink" title="13.5 编译"></a>13.5 编译</h3><p>vim 提供了:make 来编译程序，默认调用的是 make， 如果你当前目录下有 makefile，简单地:make 即可。</p><p>如果你没有 make 程序，你可以通过配置 makeprg 选项来更改 make 调用的程序。 如果你只有一个 abc.Java 文件，你可以这样设置：</p><p>set makeprg=javac\ abc.java<br>然后:make 即可。如果程序有错，可以通过 quickfix 窗口查看错误。 不过如果要正确定位错误，需要设置好 errorformat，让 vim 识别错误信息。 如：</p><p>:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#<br>%f 表示文件名，%l 表示行号， %m 表示错误信息，其它的还不能理解。 请参考 :help errorformat。</p><h3 id="13-6-快速修改窗口"><a href="#13-6-快速修改窗口" class="headerlink" title="13.6 快速修改窗口"></a>13.6 快速修改窗口</h3><p>其实是 quickfix 插件提供的功能， 对编译调试程序非常有用 :)</p><p>:copen – 打开快速修改窗口。<br>:cclose – 关闭快速修改窗口。<br>快速修改窗口在 make 程序时非常有用，当 make 之后：</p><p>:cl – 在快速修改窗口中列出错误。<br>:cn – 定位到下一个错误。<br>:cp – 定位到上一个错误。<br>:cr – 定位到第一个错误。</p><h3 id="13-7-自动补全"><a href="#13-7-自动补全" class="headerlink" title="13.7 自动补全"></a>13.7 自动补全</h3><p>C-x C-s – 拼写建议。<br>C-x C-v – 补全 vim 选项和命令。<br>C-x C-l – 整行补全。<br>C-x C-f – 自动补全文件路径。弹出菜单后，按 C-f 循环选择，当然也可以按 C-n 和 C-p。<br>C-x C-p 和 C-x C-n – 用文档中出现过的单词补全当前的词。 直接按 C-p 和 C-n 也可以。<br>C-x C-o – 编程时可以补全关键字和函数名啊。<br>C-x C-i – 根据头文件内关键字补全。<br>C-x C-d – 补全宏定义。<br>C-x C-n – 按缓冲区中出现过的关键字补全。 直接按 C-n 或 C-p 即可。<br>当弹出补全菜单后：</p><p>C-p 向前切换成员；<br>C-n 向后切换成员；<br>C-e 退出下拉菜单，并退回到原来录入的文字；<br>C-y 退出下拉菜单，并接受当前选项。</p><h3 id="13-8-多行缩进缩出"><a href="#13-8-多行缩进缩出" class="headerlink" title="13.8 多行缩进缩出"></a>13.8 多行缩进缩出</h3><p>正常模式下，按两下&gt;;光标所在行会缩进。<br>如果先按了 n，再按两下&gt;;，光标以下的 n 行会缩进。<br>对应的，按两下&lt;;，光标所在行会缩出。<br>如果在编辑代码文件，可以用=进行调整。<br>在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。<br>或者 n =，调整 n 行代码的缩排。</p><h2 id="13-9-折叠"><a href="#13-9-折叠" class="headerlink" title="13.9 折叠"></a>13.9 折叠</h2><p>zf – 创建折叠的命令，可以在一个可视区域上使用该命令；<br>zd – 删除当前行的折叠；<br>zD – 删除当前行的折叠；<br>zfap – 折叠光标所在的段；<br>zo – 打开折叠的文本；<br>zc – 收起折叠；<br>za – 打开/关闭当前折叠；<br>zr – 打开嵌套的折行；<br>zm – 收起嵌套的折行；<br>zR (zO) – 打开所有折行；<br>zM (zC) – 收起所有折行；<br>zj – 跳到下一个折叠处；<br>zk – 跳到上一个折叠处；<br>zi – enable/disable fold;</p><h2 id="14-命令行"><a href="#14-命令行" class="headerlink" title="14. 命令行"></a>14. 命令行</h2><p>normal 模式下按:进入命令行模式</p><h3 id="14-1-命令行模式下的快捷键："><a href="#14-1-命令行模式下的快捷键：" class="headerlink" title="14.1 命令行模式下的快捷键："></a>14.1 命令行模式下的快捷键：</h3><p>上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。<br>左右方向键：左/右移一个字符。<br>C-w： 向前删除一个单词。<br>C-h： 向前删除一个字符，等同于 Backspace。<br>C-u： 从当前位置移动到命令行开头。<br>C-b： 移动到命令行开头。<br>C-e： 移动到命令行末尾。<br>Shift-Left： 左移一个单词。<br>Shift-Right： 右移一个单词。<br>@： 重复上一次的冒号命令。<br>q： 正常模式下，q 然后按’:’，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。<br>q/和 q? 可以打开查找历史记录。<br>14.2 执行外部命令<br>:! cmd 执行外部命令。<br>:!! 执行上一次的外部命令。<br>:sh 调用 shell，用 exit 返回 vim。<br>:r !cmd 将命令的返回结果插入文件当前位置。<br>:m,nw !cmd 将文件的 m 行到 n 行之间的内容做为命令输入执行命令。</p><h2 id="15-其它"><a href="#15-其它" class="headerlink" title="15. 其它"></a>15. 其它</h2><h3 id="15-1-工作目录"><a href="#15-1-工作目录" class="headerlink" title="15.1 工作目录"></a>15.1 工作目录</h3><p>:pwd 显示 vim 的工作目录。<br>:cd path 改变 vim 的工作目录。<br>:set autochdir 可以让 vim 根据编辑的文件自动切换工作目录。</p><h3 id="15-2-一些快捷键（收集中）"><a href="#15-2-一些快捷键（收集中）" class="headerlink" title="15.2 一些快捷键（收集中）"></a>15.2 一些快捷键（收集中）</h3><pre><code class="hljs nestedtext"><span class="hljs-attribute">K</span><span class="hljs-punctuation">:</span> <span class="hljs-string">打开光标所在词的 manpage。</span><span class="hljs-attribute">*</span><span class="hljs-punctuation">:</span> <span class="hljs-string">向下搜索光标所在词。</span><span class="hljs-attribute">g*</span><span class="hljs-punctuation">:</span> <span class="hljs-string">同上，但部分符合即可。</span><span class="hljs-comment">#: 向上搜索光标所在词。</span><span class="hljs-attribute">g#</span><span class="hljs-punctuation">:</span> <span class="hljs-string">同上，但部分符合即可。</span><span class="hljs-attribute">g C-g</span><span class="hljs-punctuation">:</span> <span class="hljs-string">统计全文或统计部分的字数。</span></code></pre><h3 id="15-3-在线帮助"><a href="#15-3-在线帮助" class="headerlink" title="15.3 在线帮助"></a>15.3 在线帮助</h3><p>:h(elp)或 F1 打开总的帮助。<br>:help user-manual 打开用户手册。<br>命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。<br>:helptags somepath 为 somepath 中的文档生成索引。<br>:helpgrep 可以搜索整个帮助文档，匹配的列表显示在 quickfix 窗口中。<br>Ctrl+] 跳转到 tag 主题，Ctrl+t 跳回。<br>:ver 显示版本信息。</p><h3 id="15-4-一些小功能"><a href="#15-4-一些小功能" class="headerlink" title="15.4 一些小功能"></a>15.4 一些小功能</h3><p>简单计算器: 在插入模式下，输入 C-r =，然后输入表达式，就能在 光标处得到计算结果。</p><h2 id="16-实用技巧"><a href="#16-实用技巧" class="headerlink" title="16. 实用技巧"></a>16. 实用技巧</h2><h3 id="16-1-场景一-多行编辑"><a href="#16-1-场景一-多行编辑" class="headerlink" title="16.1 场景一: 多行编辑"></a>16.1 场景一: 多行编辑</h3><blockquote><p>列编辑模式.<br>Ctrl-V 进入列编辑模式 (win下Gvim使用Ctrl-Q)</p><p>j or k 选择要编辑的范围</p><p>I or A进入编辑模式,输入要编辑的内容</p><p>ESC 结束 </p></blockquote><p><code>方法一:</code><br><strong>需求描述:</strong></p><p>实现 3-10 行同时输入: <code>hello world!</code>.</p><p><strong>步骤一:</strong><br>在 NORMAL 模式下，将光标移动到第 3 行，如下图所示:</p><center><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/2020-09-24-15-14-59.png" class=""></center><br><p><strong>步骤二:</strong><br>按下 ctrl+v 进入块模式，然后移动光标到第 10 行,如下图所示:</p><center><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/2020-09-24-15-17-19.png" class=""></center><br><p><strong>步骤三:</strong><br>此时按下 I(或 A), 多行光标被激活，现在就可以进行多行编辑了.</p><center><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/2020-09-24-15-21-01.png" class=""></center><br><center><img src="/2020/09/24/vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AEcheatsheet/2020-09-24-15-23-56.png" class=""></center><p><code>方法二:</code><br>编辑模式下，按下 o,然后输入: aaaa<br>esc 回到普通模式, 按下 10.就会出现 10 行 aaaa</p><p>原理: <code>.</code> 重复操作</p><h3 id="16-2-在-vi-或-vim-上查找字符串"><a href="#16-2-在-vi-或-vim-上查找字符串" class="headerlink" title="16.2 在 vi 或 vim 上查找字符串"></a>16.2 在 vi 或 vim 上查找字符串</h3><p><span id="16.2-在vi或vim上查找字符串"></span></p><p><strong>1. 重头开始搜索:</strong></p><p>在命令模式下，输入/你要查找的字符</p><p>按下回车，可以看到 vim 把光标移动到该字符处</p><p>再按 n（小写）查看下一个匹配</p><p>按 N(大写）查看上一个匹配（capslock 切换大小写，也可以在小写状态下按 shift+n）</p><p><strong>2. 从结尾处搜索</strong></p><p>在命令模式下，输入？要搜索的字符串或字符</p><p><strong>3. 搜索后，打开别的文件发现也被高亮了，怎么关闭?</strong></p><p>命令行模式下，输入：nohlsearch 或者：set nohlsearch</p><p>可以简写成 noh 喝 set-noh</p><h3 id="16-3-快速复制多行"><a href="#16-3-快速复制多行" class="headerlink" title="16.3 快速复制多行"></a>16.3 快速复制多行</h3><p><span id="16.3-快速复制多行"></span><br>任务: 将第 9 行至第 15 行的数据，复制到第 16 行.</p><p><strong>方法 1：（强烈推荐）</strong><br>：9，15 copy 16 或 ：9，15 co 16<br>由此可有：<br>：9，15 move 16 或 :9,15 m 16 将第 9 行到第 15 行的文本内容到第 16 行的后面</p><p><strong>方法 3：</strong><br>把光标移到第 9 行 shift + v<br>再把光标移动到第 15 行 y<br>再把光标移动到第 16 行 p</p><h3 id="16-4-全选并复制"><a href="#16-4-全选并复制" class="headerlink" title="16.4 全选并复制"></a>16.4 全选并复制</h3><p><span id="16.4-全选并复制"></span></p><p>全部删除：按 esc 后，然后 dG<br>全部复制：按 esc 后，然后 ggyG<br>全选高亮显示：按 esc 后，然后 ggvG 或者 ggVG</p><h3 id="16-5-vim-如何移动当前行向上或向下-vim-移动整行的方法"><a href="#16-5-vim-如何移动当前行向上或向下-vim-移动整行的方法" class="headerlink" title="16.5 vim 如何移动当前行向上或向下 vim 移动整行的方法"></a>16.5 vim 如何移动当前行向上或向下 vim 移动整行的方法</h3><p><span id="16.5-vim如何移动当前行向上或向下vim移动整行的方法"></span></p><p>1、剪切粘贴的方法。dd 剪切当前行，然后移动光标到指定位置，再通过 p 或 P 粘贴。<br>2、通过 m 命令。讲光标放在你要移动的行，输入:m +1 向下移动一行，输入:m -2 向上移动一行。</p><h3 id="16-6-输入重复字符"><a href="#16-6-输入重复字符" class="headerlink" title="16.6 输入重复字符"></a>16.6 输入重复字符</h3><p>vim 中 10ik 就是输入 10 个 k</p><h3 id="16-7-删除连续字符"><a href="#16-7-删除连续字符" class="headerlink" title="16.7 删除连续字符"></a>16.7 删除连续字符</h3><p>输入 10x，删除 10 个连续字符</p><h3 id="16-8-vim-的恢复和撤销"><a href="#16-8-vim-的恢复和撤销" class="headerlink" title="16.8 vim 的恢复和撤销"></a>16.8 vim 的恢复和撤销</h3><p><span id="16.8-vim的恢复和撤销"></span><br>撤销：u<br>恢复撤销：Ctrl + r</p><h3 id="16-9-自动输入指定个数的重复字符"><a href="#16-9-自动输入指定个数的重复字符" class="headerlink" title="16.9 自动输入指定个数的重复字符"></a>16.9 自动输入指定个数的重复字符</h3><p><span id="16.9-自动输入指定个数的重复字符"></span></p><p>需求: 在编辑的时候，有时候需要输入一长串的重复字符。例如“########”、“========”、“//”、“*<strong>****</strong>”、“——-” 等。</p><p>思路:<br>有一个比较简单的方法是，在输入的时候，就指定要重复的字符个数，然后只输入一个字符，接着退出插入模式，vim 会自动输入指定个数的重复字符。</p><p>例如，在普通模式下，输入 10a= 就能得到 10 个连续的 ‘=’ 字符。按 a 后，会进入插入模式，然后只输入一个 = 字符，再按 Esc 键，vim 会自动输入 9 个 = 字符，得到 10 个连续的 = 字符。</p><p>这里的 a 可以换成其他进入插入模式的命令，例如 i 命令，也不限于插入单个字符。实际上，进入插入模式后输入的所有内容，都会在退出插入模式时被重复输入。</p><p>用 :help count 命令可以看到在命令前面输入数字重复执行命令的帮助说明。</p><h3 id="16-10-指定光标跳-n-行"><a href="#16-10-指定光标跳-n-行" class="headerlink" title="16.10 指定光标跳 n 行"></a>16.10 指定光标跳 n 行</h3><p><span id="16.10指定光标跳n行"></span></p><p>10 + j: 光标向下移动 10 行<br>10 + l: 光标向上移动 10 行</p><h3 id="16-11-vim-返回上次编辑的位置"><a href="#16-11-vim-返回上次编辑的位置" class="headerlink" title="16.11 vim 返回上次编辑的位置"></a>16.11 vim 返回上次编辑的位置</h3><p><span id="16.11-vim返回上次编辑的位置"></span></p><p>ctrl +O<br>ctrl + I(i)</p><p>When you move your cursor to a particular position in a file, Vim remembers this and lets you move around between where you are where you were. CTRL-O goes to the older position, and CTRL-I or tab goes to the newer one. 仅限于 normal mode</p><p>from <a href="http://dailyvim.tumblr.com/post/6826612086/ctrl-o-and-ctrl-i-or-the-jumplist-or-friggin-vim-time">http://dailyvim.tumblr.com/post/6826612086/ctrl-o-and-ctrl-i-or-the-jumplist-or-friggin-vim-time</a></p><h3 id="16-12-不同-tab-之间切换"><a href="#16-12-不同-tab-之间切换" class="headerlink" title="16.12 不同 tab 之间切换"></a>16.12 不同 tab 之间切换</h3><p>不同 tab 页面切换<br>文件间切换<br>ctrl+6: 两个文件间来回切换<br>:bn 下一个文件<br>:bp 上一个文件<br>:ls 列出当前目录下的文件，带有编号，可通过编号切换<br>:b1~n 切换至第 n 个文件<br>在窗口间切换<br>ctrl+w+方向键<br>ctrl+w+h/j/k/l<br>ctrl+ww 依次切换至下一个窗口</p><h3 id="16-13-vim-中打开中断标签页"><a href="#16-13-vim-中打开中断标签页" class="headerlink" title="16.13 vim 中打开中断标签页"></a>16.13 vim 中打开中断标签页</h3><p>:term</p><h3 id="16-14-vim-中的替换模式"><a href="#16-14-vim-中的替换模式" class="headerlink" title="16.14 vim 中的替换模式"></a>16.14 vim 中的替换模式</h3><p><span id="16.14-vim中的替换模式"></span></p><blockquote><p>批注: 这个模式在开发中非常的实用！！！</p></blockquote><p><strong>replace 模式</strong><br>replace 模式的使用频率相对较少，主要在替换单个或连续多个字符时使用。</p><p>将光标移动到想要替换的字符上，按下 r 进入 replace 模式，然后按下按下任意字符，此时你会看到字符已经替换成功，并且自动返回 normal 模式。</p><p>如果你想要连续替换多个字符，需要使用 R，比如有一个单词 code，我们将光标移动到 c 上，然后按下 R，随后键入 name，你会发现整个单词被替换过来，并且现在仍然停留在 replace 模式下，需要按下 <esc> 才会返回 normal 模式</p><pre><code class="hljs 1c">r   <span class="hljs-string">&quot; 替换单个字符，自动返回 normal 模式</span>R   <span class="hljs-string">&quot; 连续替换多个字符，手动 &lt;esc&gt; 返回 normal 模式</span></code></pre><p>该模式在使用得当的情况下，会让开发非常有效率，同样的，我们需要多加练习才行。</p><p>现在我们讲的这么多模式，并不是让你全到牢记，你难免会迷糊，没有关系，现在你只需要大概了解有这么个东西，后面我们会经常用到这些名词，看得多了也就熟了。</p><h3 id="向上删除n行"><a href="#向上删除n行" class="headerlink" title="向上删除n行"></a>向上删除n行</h3><p>普通模式下：</p><p>3dk  向上删除3行</p><h3 id="16-15-共享剪切板"><a href="#16-15-共享剪切板" class="headerlink" title="16.15 共享剪切板"></a>16.15 共享剪切板</h3><p><span id="16.15-共享剪切版"></span></p><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://www.zhihu.com/question/19863631">www.zhihu.com</a></p><blockquote><p>这个回答本来是我不经意间的一次回答，没想到会收到这么多赞同（最多了一次了，哈哈）。回过头看一下，这…</p></blockquote><p>根据平台不同，要分两种情况。先用下面命令确定你属于哪一种，</p><p>``<br>vim –version | grep clipboard</p><pre><code class="hljs markdown"><span class="hljs-strong">**情况一，**</span>如果结果里你找到加号开头的<span class="hljs-code">`**+clipboard**`</span>， 恭喜你，你的 vim 没问题，是你姿势问题。<span class="hljs-bullet">*</span>   用<span class="hljs-code">`**&quot;+y**`</span> 代替<span class="hljs-code">`y`</span>将选中的内容复制到系统剪贴板，效果和<span class="hljs-code">`ctrl-c`</span>一致。<span class="hljs-bullet">*</span>   用<span class="hljs-strong">**`&quot;+p`**</span>代替<span class="hljs-code">`p`</span>将剪贴板内容复制到指定位置，也可以用<span class="hljs-code">`ctrl-v`</span>。<span class="hljs-code">`d`</span>，<span class="hljs-code">`x`</span>，<span class="hljs-code">`c`</span>，<span class="hljs-code">`s`</span>也一样，用之前前面加<span class="hljs-code">`**&quot;+**`</span>。如果想偷懒用<span class="hljs-code">`y`</span>直接把内容复制到系统剪贴板，需要到 vim 配置文件<span class="hljs-code">`.vimrc`</span>里加一行属性。用下面命令开始配置，``vim ~/.vimrc</code></pre><p>然后，加入下面这行，</p><p>``<br>set clipboard=unnamed</p><pre><code class="hljs autohotkey">现在你的`y`，`d`，`x`，`p`已经能和 `ctrl-c`和`ctrl-v` 一个效果，并且能互相混用。**情况二，**如果找到的是负号开头的**`-<span class="hljs-built_in">clipboard</span>`，**说明你的 vim 不支持系统剪切板，我的 MacOS 系统自带 vim 就不支持，所以跑来了。需要先重新安装 vim，Linux 系统，``sudo apt install vim-gtk</code></pre><p>MacOS，</p><p>``<br>brew install vim</p><pre><code class="hljs autohotkey">安装好之后，重复情况一的操作即可。问题解决了，有几个细节再解释一下，满足一下好奇心。首先，vim 里`y`，`d`，`x`，`c`复制，剪切下来的内容临时存放在一个叫 **vim 寄存器（Register）**的地方。而且寄存器有好几个。下面 vim 命令可以看到寄存器列表，``:reg</code></pre><p>最常用的默认寄存器<code>&quot;&quot;</code>叫 <strong>未命名寄存器（unnamed register）</strong>。最近一次删除，修改，复制内容统统暂存这里（会覆盖，只保留最近一次任意操作）。感兴趣的同学可以看下表，其他寄存器都是干什么的。</p><p>``<br>“” // 默认 unnamed 寄存器，最近一次”d”,”c”,”s”,”x”,”y”复制，删除，修改内容</p><p>“0 // 最近一次”y”复制内容</p><p>“1 // 最近一次”d”,”c”,”s”,”x”删除，修改内容<br>“2 // 上一次”d”,”c”,”s”,”x”删除，修改内容<br>“3 // 上上次”d”,”c”,”s”,”x”删除，修改内容<br>…<br>“9 // [1-9]数字以此类推</p><p>“a // 字母寄存器，供用户指定使用，比如”ay 就是复制到”a 寄存器<br>“b<br>…<br>“z</p><p>“- // 少于一行的”d”,”c”,”x”删除内容</p><p>“. // 只读寄存器<br>“: // 只读寄存器<br>“% // 只读寄存器<br>“# // 只读寄存器</p><p>“+ // 映射系统剪贴板 (有的默认设置不支持)<br>“* // 映射系统剪贴板 (有的默认设置不支持)</p><pre><code class="hljs markdown">而<span class="hljs-code">`ctrl-c`</span>以及<span class="hljs-code">`ctrl-v`</span>用到的是<span class="hljs-strong">**系统剪贴板（system clipboard）**</span>。<span class="hljs-strong">**vim 寄存器和系统剪贴板不是一个东西**</span>。顾名思义，vim 寄存器的数据作用域仅限于 vim 本地，甚至如果开多个 vim 窗口，每个窗口都有一套自己完整的寄存器，互相不影响。而系统剪贴板作为系统级别的全局变量，两边当然不能混用。<span class="hljs-strong">**所以 vim 专门提供了`&quot;+`寄存器作为对系统剪贴板的映射**</span>。可以理解成自动把<span class="hljs-code">`&quot;+`</span>寄存器的内容再复制一份到系统剪贴板，前提是你得把<span class="hljs-code">`clipboard`</span>属性设置成打开。有些版本（比如 MacOS 自带的 vim）就不支持这个映射。重装 vim 就是为了打开这个开关。（如果有简便的直接改设置方法，请纠正我）。打开以后用<span class="hljs-code">`&quot;+y`</span>命令把内容复制到和系统剪贴板关联的寄存器<span class="hljs-code">`&quot;+`</span>上。而<span class="hljs-code">`y`</span>只是复制到默认无名寄存器<span class="hljs-code">`&quot;&quot;`</span>上。最后<span class="hljs-code">`set clipboard=unnamed`</span>就是把默认无名寄存器<span class="hljs-code">`&quot;&quot;`</span> 和系统剪贴板也关联上。 就是用<span class="hljs-code">`y`</span>也可以备份到系统剪贴板。缺点是破坏了默认寄存器<span class="hljs-code">`&quot;&quot;`</span>的本地性。因为<span class="hljs-code">`p`</span>操作也会被等同于<span class="hljs-code">`&quot;+p`</span>处理，粘贴的是<span class="hljs-code">`&quot;+`</span>寄存器的内容， 粘贴的时候<span class="hljs-code">`&quot;&quot;`</span>默认寄存器内容就会被覆盖。 表现出来的就是复制一次，到任意 vim 窗口都可以粘贴。但这个特性恰恰是很多人想要的。还有个细节，大部分系统上<span class="hljs-code">`&quot;+`</span>和<span class="hljs-code">`&quot;*`</span>是等价的。但在有的系统上不等价，比如 Linux，<span class="hljs-bullet">*</span>   <span class="hljs-code">`&quot;+`</span>：对应<span class="hljs-code">`ctrl-c`</span>和<span class="hljs-code">`ctrl-v`</span>用到的系统剪贴板：desktop clipboard (<span class="hljs-code">`XA_SECONDARY`</span>)<span class="hljs-bullet">*</span>   <span class="hljs-code">`&quot;*`</span>：对应图形界面中鼠标框选的内容（可以用鼠标中键黏贴）：X11 primary selection (<span class="hljs-code">`XA_PRIMARY`</span>)所以看到<span class="hljs-code">`&quot;*`</span>也不要慌，试试看用<span class="hljs-code">`&quot;*y`</span>和<span class="hljs-code">`&quot;*p`</span>能不能复制粘贴。可以的话就说明是混用的，不行就老老实实用<span class="hljs-code">`&quot;+`</span>。以上。遇到此坑的同学了解一下。参考文献：<span class="hljs-bullet">*</span>   【[<span class="hljs-string">Vim documentation: change</span>](<span class="hljs-link">https://link.zhihu.com/?target=http%3A//vimdoc.sourceforge.net/htmldoc/change.html%23quotequote</span>)】<span class="hljs-bullet">*</span>   【[<span class="hljs-string">How to copy to clipboard in Vim?</span>](<span class="hljs-link">https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/3961859/how-to-copy-to-clipboard-in-vim</span>)】<span class="hljs-bullet">*</span>   【[<span class="hljs-string">如何将 Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？</span>](<span class="hljs-link">https://www.zhihu.com/question/19863631</span>)】<span class="hljs-bullet">*</span>   【[<span class="hljs-string">Accessing the system clipboard</span>](<span class="hljs-link">https://link.zhihu.com/?target=http%3A//vim.wikia.com/wiki/Accessing_the_system_clipboard</span>)】<span class="hljs-bullet">*</span>   【[<span class="hljs-string">Macbook 终端 vim 使用系统剪切板</span>](<span class="hljs-link">https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/270a5013808b</span>)】</code></pre></blockquote><h3 id="16-16-vim-实现系统剪切板复制"><a href="#16-16-vim-实现系统剪切板复制" class="headerlink" title="16.16 vim 实现系统剪切板复制"></a>16.16 vim 实现系统剪切板复制</h3><p><span id="16.16-vim实现系统剪切板复制"></span></p><p>shift + insert 可以将系统剪切板的内容插入 vim 编辑器</p><p>ctrl + shift 然后移动鼠标选取, 之后普通的复制粘贴即可.</p><p>大部分终端下的复制都是 ctrl + shift + C</p><p>原理上说, 应该是在按住 shift 键时, vim 就把鼠标的活动交给 X 去处理了, 因此无论本地还是远程都有效, 加上 ctrl 是因为单 shift 的话是针对整个 window, 而加 ctrl 只针对整个 buffer.</p><h2 id="NERDTree-快捷键"><a href="#NERDTree-快捷键" class="headerlink" title="NERDTree 快捷键"></a>NERDTree 快捷键</h2><p><span id="NERDTree快捷键"></span></p><p>:NERDTreeFind NERDTree 打开当前文件所在目录<br>o 在已有窗口中打开文件、目录或书签，并跳到该窗口<br>go 在已有窗口 中打开文件、目录或书签，但不跳到该窗口<br>t 在新 Tab 中打开选中文件/书签，并跳到新 Tab<br>T 在新 Tab 中打开选中文件/书签，但不跳到新 Tab<br>i split 一个新窗口打开选中文件，并跳到该窗口<br>gi split 一个新窗口打开选中文件，但不跳到该窗口<br>s vsplit 一个新窗口打开选中文件，并跳到该窗口<br>gs vsplit 一个新 窗口打开选中文件，但不跳到该窗口<br>! 执行当前文件<br>O 递归打开选中 结点下的所有目录<br>x 合拢选中结点的父目录<br>X 递归 合拢选中结点下的所有目录<br>e Edit the current dif<br>双击 相当于 NERDTree-o<br>中键 对文件相当于 NERDTree-i，对目录相当于 NERDTree-e<br>D 删除当前书签<br>P 跳到根结点<br>p 跳到父结点<br>K 跳到当前目录下同级的第一个结点<br>J 跳到当前目录下同级的最后一个结点<br>k 跳到当前目录下同级的前一个结点<br>j 跳到当前目录下同级的后一个结点<br>C 将选中目录或选中文件的父目录设为根结点<br>u 将当前根结点的父目录设为根目录，并变成合拢原根结点<br>U 将当前根结点的父目录设为根目录，但保持展开原根结点<br>r 递归刷新选中目录<br>R 递归刷新根结点<br>m 显示文件系统菜单<br>cd 将 CWD 设为选中目录<br>I 切换是否显示隐藏文件<br>f 切换是否使用文件过滤器<br>F 切换是否显示文件<br>B 切换是否显示书签<br>q 关闭 NerdTree 窗口<br>? 切换是否显示 Quick Help</p><h2 id="vim-插件之-surround-vim"><a href="#vim-插件之-surround-vim" class="headerlink" title="vim 插件之 surround.vim"></a>vim 插件之 surround.vim</h2><p>surround.vim－这个插件主要是用来插入一些特殊符号的(成对出现)</p><p>下载地址</p><p><a href="http://www.vim.org/scripts/script.php?script_id=1697">http://www.vim.org/scripts/script.php?script_id=1697</a></p><p><a href="http://github.com/tpope/vim-surround">http://github.com/tpope/vim-surround</a></p><p>常用命令:</p><p> 1．ds-删除字串的包裹符号”aaa”—ds”—aaa<br> 2．cs-替换字串的包裹符号”aaa”—cs”]—[aaa]<br> 3．ys-添加字串的包裹符号aaa—ysw]—[aaa]<br> 4.我们可以选中一个字串，然后使用S＋符号的方法来添加包裹符号</p>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
      <tag>cheatsheet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>金融世界观</title>
    <link href="/2020/09/23/%E9%87%91%E8%9E%8D%E4%B8%96%E7%95%8C%E8%A7%82/"/>
    <url>/2020/09/23/%E9%87%91%E8%9E%8D%E4%B8%96%E7%95%8C%E8%A7%82/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="金融世界观"><a href="#金融世界观" class="headerlink" title="金融世界观"></a>金融世界观</h2><img src="/2020/09/23/%E9%87%91%E8%9E%8D%E4%B8%96%E7%95%8C%E8%A7%82/2020-09-23-15-36-39.png" class=""><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=449577802&auto=1&height=66"></iframe></center><h3 id="RoadMap"><a href="#RoadMap" class="headerlink" title="RoadMap"></a>RoadMap</h3><img src="/2020/09/23/%E9%87%91%E8%9E%8D%E4%B8%96%E7%95%8C%E8%A7%82/2020-09-23-14-58-50.png" class=""><h3 id="合理的资产配置"><a href="#合理的资产配置" class="headerlink" title="合理的资产配置"></a>合理的资产配置</h3><img src="/2020/09/23/%E9%87%91%E8%9E%8D%E4%B8%96%E7%95%8C%E8%A7%82/2020-09-23-15-27-09.png" class=""><h3 id="金融决策"><a href="#金融决策" class="headerlink" title="金融决策"></a>金融决策</h3><blockquote><p>建立一个自己的<code>知识框架</code>和<code>思维方式</code>，掌握事情背后的一般性规律，然后因地制宜、因时制宜地来安排你的人生。社会环境在变化，但是<code>人性</code>其实没有变过。要在理解人性的基础上理解这些宏观环境的变化，才能够把握未来的趋势。<br>金融是一个风险—收益决策衡量的框架性思维，一个人要具有这种思维能力，才能保证在大的人生决策上，作出对的选择。<br>它是一门对未来做资产配置的学问，它的一切都是基于对未来的计算、预测和分析。这是金融的一个根本特征。它不关心过去，它只关心未来。</p></blockquote><blockquote><p>绝大多数人很重视回报，但是只有少数人会<code>管理风险</code>。实际上风险这个概念非常重要。不同的人做相同的决定风险是不一样的。一旦你要去做相对重大的决策时，不妨问问自己，如果这件事你完全彻底 100%地失败了，你能承受这个后果吗？实际上这就是对自己风险承受能力的一个最重要的评估。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/988ceaa482fc">009.合理进行个人资产配置</a></li><li><a href="https://www.jianshu.com/p/957f472ae8f5">004.构建金融世界观</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>金融</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA查看运行Java代码生成的汇编指令</title>
    <link href="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
    <url>/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="IDEA-查看运行-Java-代码生成的汇编指令"><a href="#IDEA-查看运行-Java-代码生成的汇编指令" class="headerlink" title="IDEA 查看运行 Java 代码生成的汇编指令"></a>IDEA 查看运行 Java 代码生成的汇编指令</h1><h2 id="方式一-HSDIS"><a href="#方式一-HSDIS" class="headerlink" title="方式一: HSDIS"></a>方式一: HSDIS</h2><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><ol><li>下载地址: <a href="https://pan.baidu.com/s/1c1GM9Wm4abDTAMA2tv7WeQ">hsdis-amd64.dll</a>,提取码：ssmy</li><li>把 hsdis-amd64.dll 放在 $JAVA_HOME/jre/bin/server 目录下</li><li>运行时添加参数:<code>-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly</code><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-14-08-20.png" class=""></li></ol><h3 id="二、IDEA-运行添加-VM-options"><a href="#二、IDEA-运行添加-VM-options" class="headerlink" title="二、IDEA 运行添加 VM options"></a>二、IDEA 运行添加 VM options</h3><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-15-44-40.png" class=""><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-15-48-43.png" class=""><h2 id="方式二-jitwatch"><a href="#方式二-jitwatch" class="headerlink" title="方式二: jitwatch"></a>方式二: jitwatch</h2><p><a href="https://github.com/AdoptOpenJDK/jitwatch">AdoptOpenJDK/jitwatch</a> 一个用于分析汇编日志的图形界面工具.</p><h3 id="一、安装-1"><a href="#一、安装-1" class="headerlink" title="一、安装"></a>一、安装</h3><p><strong>操作步骤:</strong></p><ol><li>拉取源码</li><li>编译源码</li><li>启动</li></ol><p><strong>1.拉取源码</strong></p><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AdoptOpenJDK/</span>jitwatch.git</code></pre><p><strong>2.编译源码</strong></p><pre><code class="hljs bash">mvn clean compile <span class="hljs-built_in">test</span> <span class="hljs-built_in">exec</span>:java</code></pre><blockquote><p>NOTE:<br><code>ant clean compile test run</code> &gt; <code>gradlew clean build run</code><br>以上两种工具也可! 选择自己顺手的</p></blockquote><p>不出意外的话，你将会看到一个自动弹出的工具界面：</p><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-00-19.png" class=""><p><strong>3.启动</strong><br>编译成功后，jitwatch 目录下会生成一些脚本文件，其中<code>launchUI.bat</code>就是 windows 平台下的启动脚本.因此，下次启动该工具直接双击该批处理文件即可.</p><blockquote><p>NOTE:<br><code>launchUI.sh</code> 为 linux 平台下的启动脚本.</p></blockquote><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-05-01.png" class=""><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p><strong>1. 配置源码目录和编译字节码目录</strong></p><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-41-29.png" class=""><p><strong>2.打开生成的 hotspot.log 文件</strong></p><p>具体 jvm 参数参见附录 1.</p><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-44-02.png" class=""><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-44-23.png" class=""><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-45-50.png" class=""><img src="/2020/09/21/IDEA%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8CJava%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/2020-09-21-16-59-40.png" class=""><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol><li>Jvm 参数:<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">Java Platform, Standard Edition Tools Reference</a><br>本文涉及到的常用参数:</li></ol><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-XX:+UnlockDiagnosticVMOptions</td><td>解锁用于 JVM 诊断的选项</td></tr><tr><td>-XX:+PrintAssembly</td><td>配合反汇编插件（例如 hsdis-amd64.dylib）可以打印出字节码和本地方法的汇编码；必须和 -XX:+UnlockDiagnosticVMOptions 一起使用。</td></tr><tr><td>-Xcomp</td><td>在第一次调用时强制编译方法。默认情况下，无论是 -client 模式还是 -server 模式，都需要执行一定次数解释方法的调用才会触发方法的编译。（如果需要 JIT 日志，则不指定该参数）</td></tr><tr><td>-XX:CompileCommand=compileonly,*ClassName.methodName：</td><td>只编译类名为 ClassName 中的 methodName 方法，支持使用 * 作为通配符。可以多次指定 -XX:CompileCommand 添加多条命令。（建议只指定需要的方法，否则将会产生大量的无关日志）</td></tr><tr><td>-XX:+LogCompilation：</td><td>允许将编译活动记录到当前工作目录中名为 hotspot.log 的文件中。可以通过 -XX:LogFile 指定文件的路径和名字。</td></tr><tr><td>-XX:LogFile=path：</td><td>指定日志的路径和文件名。例如：-XX:LogFile=/var/log/hotspot.log</td></tr></tbody></table><p><strong>例子:</strong></p><pre><code class="hljs ruby">-<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+UnlockDiagnosticVMOptions</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+PrintAssembly</span> -<span class="hljs-title class_">Xcomp</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:CompileCommand=compileonly</span>,*<span class="hljs-title class_">VolatileTest</span>.increase -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:CompileCommand=compileonly</span>,*<span class="hljs-title class_">VolatileTest</span>.decrease -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+LogCompilation</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:LogFile=F</span><span class="hljs-symbol">:/opt/log/hotspot</span>.log</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/haihui_yang/article/details/103789384?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-3-103789384.nonecase&utm_term=ideaui%E6%89%93%E5%8D%B0%E6%B1%87%E7%BC%96">如何优雅的查看 Java 代码的汇编码</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>IDEA</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Working copy</title>
    <link href="/2020/09/20/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8workingcopy/"/>
    <url>/2020/09/20/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8workingcopy/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>flutter通过外链唤起app注入代理设置</title>
    <link href="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
    <url>/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-42-44.png" class=""><h1 id="flutter-通过外链唤起-app-注入代理设置"><a href="#flutter-通过外链唤起-app-注入代理设置" class="headerlink" title="flutter 通过外链唤起 app 注入代理设置"></a>flutter 通过外链唤起 app 注入代理设置</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><blockquote><p>在 Flutter 中进行网络请求时，我们可以使用的库有 3 个，即 Http 请求库、HttpClient 请求库和 Dio 请求库<br>），使用得最多的就是 Dio 请求库。因为相比 Http 请求库和 HttpClient 请求库，Dio 库不仅支持常见的网络请求，还支持 Restful API、FormData、拦截器、请求取消、Cookie 管理、文件上传/下载、超时等操作。不过，默认情况下，Dio 进行网络请求时是不支持抓包的，所以如果要进行抓包，就需要对 Dio 进行请求封装，并编写代理代码。<br>转自: <a href="https://segmentfault.com/a/1190000023654714?utm_source=tag-newest">https://segmentfault.com/a/1190000023654714?utm_source=tag-newest</a></p></blockquote><p>经查阅 dio 的文档，发现可以设置 http 代理：</p><pre><code class="hljs abnf">Dio dio <span class="hljs-operator">=</span> new Dio()<span class="hljs-comment">;</span>    (dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate <span class="hljs-operator">=</span>        (HttpClient client) &#123;      client.findProxy <span class="hljs-operator">=</span> (uri) &#123;        return <span class="hljs-string">&quot;PROXY 10.10.25.80:8888&quot;</span><span class="hljs-comment">;</span>      &#125;<span class="hljs-comment">;</span>    &#125;<span class="hljs-comment">;</span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>参见:</strong><a href="https://www.jianshu.com/p/09aa6876acea">flutter 完美抓包解决方案</a><br>阅读一番后，其实不外乎是基于官网给的方式去演绎，使我们能够更加便捷地去设置代理 IP 和端口。<br>当然，你可以通过 <code>wireshark</code> 去抓包，这里都是针对 <code>fiddler</code> 这样的工具提供抓包支持。<br>以下笔者将基于参考链接的原文内容进行详细的演绎说明。</p><h2 id="方式一-硬编码"><a href="#方式一-硬编码" class="headerlink" title="方式一: 硬编码"></a>方式一: 硬编码</h2><pre><code class="hljs wren">(<span class="hljs-variable">_dio</span>.<span class="hljs-property">httpClientAdapter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">DefaultHttpClientAdapter</span>).<span class="hljs-property">onHttpClientCreate</span> <span class="hljs-title function_">=</span>          (<span class="hljs-variable">client</span>) &#123;        <span class="hljs-comment">//这一段是解决安卓https抓包的问题</span>        <span class="hljs-variable">client</span>.<span class="hljs-property">badCertificateCallback</span> <span class="hljs-title function_">=</span>            (<span class="hljs-variable">X509Certificate</span> <span class="hljs-variable">cert</span>, <span class="hljs-title class_">String</span> <span class="hljs-variable">host</span>, int <span class="hljs-variable">port</span>) &#123;          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Platform</span>.<span class="hljs-property">isAndroid</span>;        &#125;;        <span class="hljs-variable">client</span>.<span class="hljs-property">findProxy</span> <span class="hljs-title function_">=</span> (<span class="hljs-variable">uri</span>) &#123;          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PROXY 代理ip:代理port&quot;</span>;        &#125;;      &#125;;</code></pre><h2 id="方式二-编写原生插件"><a href="#方式二-编写原生插件" class="headerlink" title="方式二: 编写原生插件"></a>方式二: 编写原生插件</h2><p><code>缺点: </code></p><ol><li>安卓无法获取</li><li>编写成本高, 对不是原生开发者不够友好</li></ol><p><code>优点:</code> IOS 可行</p><pre><code class="hljs objectivec"><span class="hljs-comment">//自动获取手机代理</span>  <span class="hljs-built_in">NSDictionary</span> *proxySettings = (__bridge <span class="hljs-built_in">NSDictionary</span> *)(<span class="hljs-built_in">CFNetworkCopySystemProxySettings</span>());           <span class="hljs-built_in">NSArray</span> *proxies = (__bridge <span class="hljs-built_in">NSArray</span> *)(<span class="hljs-built_in">CFNetworkCopyProxiesForURL</span>((__bridge <span class="hljs-built_in">CFURLRef</span> _Nonnull)([<span class="hljs-built_in">NSURL</span> URLWithString:call.arguments]), (__bridge <span class="hljs-built_in">CFDictionaryRef</span> _Nonnull)(proxySettings)));           <span class="hljs-built_in">NSString</span> *hostName = proxySettings[<span class="hljs-string">@&quot;HTTPSProxy&quot;</span>];           <span class="hljs-built_in">NSString</span> *portName = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@&quot;</span>,proxySettings[<span class="hljs-string">@&quot;HTTPPort&quot;</span>]];           <span class="hljs-type">long</span> HTTPEnable = [proxySettings[<span class="hljs-string">@&quot;HTTPEnable&quot;</span>] longValue];           <span class="hljs-keyword">if</span> (HTTPEnable==<span class="hljs-number">0</span>) &#123;               hostName = <span class="hljs-string">@&quot;&quot;</span>;           &#125;</code></pre><h2 id="方式三-采用-scheme-协议"><a href="#方式三-采用-scheme-协议" class="headerlink" title="方式三: 采用 scheme 协议"></a>方式三: 采用 scheme 协议</h2><p>整体思路如下:</p><pre><code class="hljs awk"><span class="hljs-number">1</span>，注册自己的URL Scheme，例如：scheme:<span class="hljs-regexp">//</span><span class="hljs-number">2</span>，定义参数规则，例如：scheme:<span class="hljs-regexp">//</span>tiaoshi?host=<span class="hljs-number">10.0</span>.<span class="hljs-number">206.163</span><span class="hljs-number">3</span>，引入flutter插件：uni_links: ^<span class="hljs-number">0.2</span>.<span class="hljs-number">0</span><span class="hljs-number">4</span>，flutter监听解析参数，并在dio里面设置代理<span class="hljs-number">5</span>，使用[草料]https:<span class="hljs-regexp">//</span>cli.im生成一个二维码：内容：scheme:<span class="hljs-regexp">//</span>tiaoshi?host=<span class="hljs-number">10.0</span>.<span class="hljs-number">206.163</span><span class="hljs-number">6</span>，使用二维码扫描工具扫描生成的二维码唤起APP</code></pre><h3 id="URL-Scheme"><a href="#URL-Scheme" class="headerlink" title="URL Scheme"></a>URL Scheme</h3><p>Scheme 用于从浏览器或其他应用中启动本应用。也就是说要从其他应用中跳转本应用的界面或者网页跳转本应用打开特定的界面。</p><h3 id="Scheme-协议格式"><a href="#Scheme-协议格式" class="headerlink" title="Scheme 协议格式"></a>Scheme 协议格式</h3><pre><code class="hljs awk">protocol :<span class="hljs-regexp">//</span> hostname[:port] <span class="hljs-regexp">/ path /</span> [;parameters][?query]<span class="hljs-comment">#fragment</span></code></pre><p><strong>protocol：</strong> 协议也就是你定义的 scheme<br><strong>hostname：</strong> 地址域<br><strong>port：</strong> 端口<br><strong>path：</strong> 路径<br><strong>params：</strong> 参数</p><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p><strong>第一步:</strong> 修改 AndroidManifest.xml</p><blockquote><p><code>NOTE:</code><br>flutter 工程目录/android/app/src/main/AdroidManifest.xml</p></blockquote><p>在&lt;activity&gt;&lt;/activity&gt;之间的最后面加入如下代码:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:host</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;taoqi&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span></code></pre><p><img src="2020-09-11-19-14-26.png"></p><p><strong>第二步：</strong> pubspec.yaml 文件中引入 uni_links</p><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span>  <span class="hljs-attr">flutter:</span>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span>  <span class="hljs-attr">flutter_localizations:</span>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span>  <span class="hljs-comment"># The following adds the Cupertino Icons font to your application.</span>  <span class="hljs-comment"># Use with the CupertinoIcons class for iOS style icons.</span>  <span class="hljs-attr">uni_links:</span> <span class="hljs-string">^0.2.0</span></code></pre><p><strong>第三步:</strong> 封装一个 pocket_capture.dart</p><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:uni_links/uni_links.dart&#x27;</span>;<span class="hljs-comment">//设置抓包</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Packetcapture</span> &#123;  <span class="hljs-keyword">static</span> <span class="hljs-title class_">StreamController</span> _packetcaptureListener =      <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamController</span>.<span class="hljs-title function_">broadcast</span>(); <span class="hljs-comment">//抓包监听</span>  <span class="hljs-keyword">static</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">Function</span>, <span class="hljs-title class_">StreamSubscription</span>&gt; _listeners = &#123;&#125;;  <span class="hljs-comment">//这两个数据根据你自己的项目修改</span>  <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> scheme = <span class="hljs-string">&quot;taoqi://&quot;</span>;  <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> mode = <span class="hljs-string">&quot;debug&quot;</span>;  <span class="hljs-comment">//设置自己的scheme</span>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">setConfig</span>(<span class="hljs-params">&#123;<span class="hljs-built_in">String</span> schemeConfig, <span class="hljs-built_in">String</span> modeConfig&#125;</span>) &#123;    scheme = schemeConfig;    mode = modeConfig;  &#125;  <span class="hljs-comment">//通过topsports://设置抓包代理</span>  <span class="hljs-keyword">static</span> <span class="hljs-title class_">Future</span>&lt;<span class="hljs-title class_">Null</span>&gt; <span class="hljs-title function_">initUniLinks</span>(&#123;<span class="hljs-title class_">Function</span> callBack&#125;) <span class="hljs-keyword">async</span> &#123;    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;------获取参数--------&#x27;</span>);    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-comment">//app没有打开时获取link</span>      <span class="hljs-title class_">String</span> link = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getInitialLink</span>();      <span class="hljs-keyword">if</span> (link != <span class="hljs-literal">null</span> &amp;&amp; link.<span class="hljs-title function_">contains</span>(scheme)) &#123;        <span class="hljs-title function_">setNetworkAgent</span>(link, <span class="hljs-attr">callBack</span>: callBack);      &#125;    &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;    <span class="hljs-comment">//app打开时获取link</span>    <span class="hljs-title function_">getLinksStream</span>().<span class="hljs-title function_">listen</span>((<span class="hljs-title class_">String</span> link) &#123;      link = <span class="hljs-title class_">Uri</span>.<span class="hljs-title function_">decodeComponent</span>(link);      <span class="hljs-keyword">if</span> (link.<span class="hljs-title function_">contains</span>(scheme)) &#123;        <span class="hljs-title function_">setNetworkAgent</span>(link, <span class="hljs-attr">callBack</span>: callBack);      &#125;      <span class="hljs-comment">// Parse the link and warn the user, if it is not correct</span>    &#125;, <span class="hljs-attr">onError</span>: (err) &#123;      <span class="hljs-comment">// Handle exception by warning the user their action did not succeed</span>    &#125;);  &#125;  <span class="hljs-keyword">static</span> <span class="hljs-title function_">setNetworkAgent</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> link, &#123;<span class="hljs-built_in">Function</span> callBack&#125;</span>) &#123;    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;=======link:$link============&#x27;</span>);    <span class="hljs-title class_">String</span> <span class="hljs-keyword">type</span> = <span class="hljs-title function_">getTypeStr</span>(link);    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> == mode) &#123;      <span class="hljs-title class_">String</span> param = link.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;$scheme$type?&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);      <span class="hljs-title class_">Map</span> dict = <span class="hljs-title function_">getUrlParams</span>(param);      <span class="hljs-comment">//设置抓包代理</span>      <span class="hljs-title class_">String</span> host = dict[<span class="hljs-string">&quot;host&quot;</span>];      <span class="hljs-title class_">String</span> port = dict[<span class="hljs-string">&quot;port&quot;</span>] ?? <span class="hljs-string">&quot;8888&quot;</span>;      <span class="hljs-keyword">if</span> (callBack != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-title function_">callBack</span>(host, port);      &#125;      <span class="hljs-title function_">packetcapture</span>(<span class="hljs-string">&quot;&quot;</span>);    &#125;  &#125;  <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getTypeStr</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> link</span>) &#123;    <span class="hljs-title class_">List</span> params = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>);    <span class="hljs-title class_">String</span> typeStr = params[<span class="hljs-number">0</span>];    typeStr = typeStr.<span class="hljs-title function_">replaceAll</span>(scheme, <span class="hljs-string">&quot;&quot;</span>);    <span class="hljs-keyword">return</span> typeStr;  &#125;<span class="hljs-comment">//url参数转map</span>  <span class="hljs-keyword">static</span> <span class="hljs-title class_">Map</span> <span class="hljs-title function_">getUrlParams</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> paramStr</span>) &#123;    <span class="hljs-title class_">Map</span> map = <span class="hljs-title class_">Map</span>();    <span class="hljs-title class_">List</span> params = paramStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; params.<span class="hljs-property">length</span>; i++) &#123;      <span class="hljs-title class_">String</span> str = params[i];      <span class="hljs-title class_">List</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);      map[arr[<span class="hljs-number">0</span>]] = arr[<span class="hljs-number">1</span>];    &#125;    <span class="hljs-keyword">return</span> map;  &#125;  <span class="hljs-comment">//抓包广播</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">packetcapture</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> code</span>) &#123;    _packetcaptureListener.<span class="hljs-title function_">add</span>(code);  &#125;  <span class="hljs-comment">//添加抓包监听</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addPacketcaptureListener</span>(<span class="hljs-params"><span class="hljs-built_in">void</span> onData(<span class="hljs-built_in">String</span> code)</span>) &#123;    _listeners[onData] = _packetcaptureListener.<span class="hljs-property">stream</span>.<span class="hljs-title function_">listen</span>(onData);  &#125;  <span class="hljs-comment">//取消监听</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">removeListener</span>(<span class="hljs-params"><span class="hljs-built_in">void</span> onData(dynamic data)</span>) &#123;    <span class="hljs-title class_">StreamSubscription</span> listener = _listeners[onData];    <span class="hljs-keyword">if</span> (listener == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;    listener.<span class="hljs-title function_">cancel</span>();    _listeners.<span class="hljs-title function_">remove</span>(onData);  &#125;&#125;</code></pre><p><strong>第四步:</strong> 在 main 入口里边添加监听</p><blockquote><p><code>NOTE:</code><br>这里我是封装了一个公用的 main 入口函数<br>真正的 main.dart 会这样调用</p><p>import ‘package:bid/config/environment.dart’;<br>import ‘package:bid/config/main_common.dart’;</p><p>Future<void> main() async {<br>await mainCommon(Environment.DEV);<br>}</p></blockquote><p>秉承只提供思路的原则，不贴可运行完整代码.</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 公共的启动Main方法.</span><span class="hljs-comment"> * @author: DANTE FUNG</span><span class="hljs-comment"> * @date: 2020-9-9 15:53:14</span><span class="hljs-comment"> */</span>Future&lt;void&gt; main<span class="hljs-constructor">Common(String <span class="hljs-params">env</span>)</span> async &#123;  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WidgetsFlutterBinding</span>.</span></span>ensure<span class="hljs-constructor">Initialized()</span>;  <span class="hljs-comment">// 初始化代理配置监听</span>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Packetcapture</span>.</span></span>init<span class="hljs-constructor">UniLinks(<span class="hljs-params">callBack</span>: (<span class="hljs-params">host</span>, <span class="hljs-params">port</span>)</span> &#123;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Network</span>.</span></span>set<span class="hljs-constructor">HttpProxy(<span class="hljs-params">host</span>, <span class="hljs-params">port</span>)</span>;  &#125;);    <span class="hljs-comment">// 省略其他代码</span>&#125;</code></pre><p>Network 工具类(工具类大家应该都会封装)里边的关键代码:</p><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHttpProxy</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> host, <span class="hljs-built_in">String</span> port</span>) &#123;  <span class="hljs-keyword">if</span> (host.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>) &#123;    <span class="hljs-title class_">AppManager</span>.<span class="hljs-property">httpProxy</span> = host + <span class="hljs-string">&#x27;:&#x27;</span> + port;  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-title class_">AppManager</span>.<span class="hljs-property">httpProxy</span> = <span class="hljs-string">&#x27;&#x27;</span>;  &#125;  <span class="hljs-title function_">_initDio</span>();&#125;</code></pre><blockquote><p><code>NOTE:</code><br>这里简单说明下 AppManager 工具类（不一定要像我一样用一个类封装起来，你可以用全局变量或者局部变量传参都行），代码定义如下:<br>class AppManager {<br>static String httpProxy = ‘’;</p><p>}</p></blockquote><p>_initDio()方法的关键代码:</p><pre><code class="hljs wren"><span class="hljs-variable">_dio</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">Dio</span>(<span class="hljs-title class_">BaseOptions</span>(      <span class="hljs-variable">contentType</span>: &#x27;<span class="hljs-variable">application</span>/<span class="hljs-variable">json</span>&#x27;,<span class="hljs-comment">//      baseUrl: Config.BASE_URL,</span>    ));    <span class="hljs-variable">_dio</span>.<span class="hljs-property">options</span>.<span class="hljs-property">receiveTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;    <span class="hljs-variable">_dio</span>.<span class="hljs-property">options</span>.<span class="hljs-property">connectTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">30000</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">AppManager</span>.<span class="hljs-property">httpProxy</span>.<span class="hljs-property">length</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>) &#123;      (<span class="hljs-variable">_dio</span>.<span class="hljs-property">httpClientAdapter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">DefaultHttpClientAdapter</span>).<span class="hljs-property">onHttpClientCreate</span> <span class="hljs-title function_">=</span>          (<span class="hljs-variable">client</span>) &#123;        <span class="hljs-comment">//这一段是解决安卓https抓包的问题</span>        <span class="hljs-variable">client</span>.<span class="hljs-property">badCertificateCallback</span> <span class="hljs-title function_">=</span>            (<span class="hljs-variable">X509Certificate</span> <span class="hljs-variable">cert</span>, <span class="hljs-title class_">String</span> <span class="hljs-variable">host</span>, int <span class="hljs-variable">port</span>) &#123;          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Platform</span>.<span class="hljs-property">isAndroid</span>;        &#125;;        <span class="hljs-variable">client</span>.<span class="hljs-property">findProxy</span> <span class="hljs-title function_">=</span> (<span class="hljs-variable">uri</span>) &#123;          <span class="hljs-comment">//注入代理</span>          <span class="hljs-title class_">LogUtils</span>.<span class="hljs-property">debug</span>(              <span class="hljs-variable">TAG</span>,              <span class="hljs-title function_">sprintf</span>(&#x27;<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>注入的代理地址为:<span class="hljs-operator">%</span><span class="hljs-variable">s</span>&#x27;, [<span class="hljs-title class_">AppManager</span>.<span class="hljs-property">httpProxy</span>]),              <span class="hljs-title class_">StackTrace</span>.<span class="hljs-property">current</span>);          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PROXY $&#123;AppManager.httpProxy&#125;&quot;</span>;        &#125;;      &#125;;    &#125;</code></pre><p><strong>第五步:</strong> 用任意一家二维码生成工具去生成这段地址<code>taoqi://debug?host=你的主机地址&amp;?port=你的代理端口</code>的二维码</p><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-10-09.png" class=""><p><strong>第六步:</strong> 前提条件是你要安装好你要调试的 APP 在模拟器里。打开 MUMU 模拟器, 然后打开共享文件夹，将生成的二维码放入该文件夹中:</p><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-16-51.png" class=""></center><br><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-17-54.png" class=""></center><br><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-19-46.png" class=""></center><br><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-20-06.png" class=""></center><br><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-20-27.png" class=""></center><br><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-22-22.png" class=""></center><br><center></center><br><center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-40-11.png" class=""></center><br><p><strong>第七步:</strong> 使用 fiddler 抓包。相关的配置说明请百度即可。<code>特别说明:</code>雷电模拟器似乎无法进行抓包，问题不得知。<br>建议使用 MUMU 模拟器。</p><p><strong>关于如何让 VS code 连接 MUMU 模拟器</strong>，这里简单说明下:</p><ol><li>打开 MUMU 模拟器以下目录 如:</li></ol><pre><code class="hljs livescript">D:<span class="hljs-string">\Program</span> Files (x86)<span class="hljs-string">\MuMu\emulator\nemu\vmonitor\bin</span></code></pre><ol start="2"><li>打开命令行终端进入该目录，然后执行如下命令:</li></ol><pre><code class="hljs apache"><span class="hljs-attribute">adb_server</span>.exe connect <span class="hljs-number">127.0.0.1:7555</span></code></pre><ol start="3"><li>在 flutter 工程目录下，执行终端命令<code>flutter devices</code>就能识别到 MUMU 模拟器了.<center><img src="/2020/09/11/flutter%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E5%94%A4%E8%B5%B7app%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/2020-09-11-19-50-45.png" class=""></center></li></ol><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢该作者提供的代码参考: <a href="https://github.com/18138870200/flutter_sg_mvvm">https://github.com/18138870200/flutter_sg_mvvm</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>flutter</tag>
      
      <tag>抓包</tag>
      
      <tag>fiddler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批处理bat echo中文乱码完美解决方法</title>
    <link href="/2020/09/10/%E6%89%B9%E5%A4%84%E7%90%86bat%20echo%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2020/09/10/%E6%89%B9%E5%A4%84%E7%90%86bat%20echo%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>转自:<a href="https://blog.csdn.net/tp7309/article/details/79283524">https://blog.csdn.net/tp7309/article/details/79283524</a></p><pre><code class="hljs dos">@<span class="hljs-built_in">echo</span> off<span class="hljs-comment">REM 声明采用UTF-8编码</span><span class="hljs-built_in">chcp</span> <span class="hljs-number">65001</span><span class="hljs-built_in">echo</span> test<span class="hljs-built_in">echo</span> 中文测试<span class="hljs-built_in">pause</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>批处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为谁工作</title>
    <link href="/2020/08/31/%E4%B8%BA%E8%B0%81%E5%B7%A5%E4%BD%9C/"/>
    <url>/2020/08/31/%E4%B8%BA%E8%B0%81%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="93ddbbe3b3880f5b3962d70d61f2da101ea6779e13b21fb9d9f190e2220e06ae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决HHKB PRO BT连接Mac时配对窗口狂闪问题</title>
    <link href="/2020/08/31/BT%E8%BF%9E%E6%8E%A5Mac%E6%97%B6%E9%85%8D%E5%AF%B9%E7%AA%97%E5%8F%A3%E7%8B%82%E9%97%AA%E9%97%AE%E9%A2%98/"/>
    <url>/2020/08/31/BT%E8%BF%9E%E6%8E%A5Mac%E6%97%B6%E9%85%8D%E5%AF%B9%E7%AA%97%E5%8F%A3%E7%8B%82%E9%97%AA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决HHKB-PRO-BT连接Mac时配对窗口狂闪问题"><a href="#解决HHKB-PRO-BT连接Mac时配对窗口狂闪问题" class="headerlink" title="解决HHKB PRO BT连接Mac时配对窗口狂闪问题"></a>解决HHKB PRO BT连接Mac时配对窗口狂闪问题</h2><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height=100 src="//music.163.com/outchain/player?type=2&id=1401040007&auto=1&height=66"></iframe></center><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>hhkb今天配对Mac Book Pro的时候出现了<code>要输入配对码的配对窗口</code>疯狂闪的问题.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在<code>hhkb键盘</code>上按<code>Fn+q</code>即可，它就会进入配对模式，此时输入配对码并按下Enter就行了.</p>]]></content>
    
    
    
    <tags>
      
      <tag>mac相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试使用vscode插件插入图片</title>
    <link href="/2020/08/28/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8vscode%E6%8F%92%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2020/08/28/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8vscode%E6%8F%92%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2020/08/28/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8vscode%E6%8F%92%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/2020-08-28-01-00-05.png" class=""> <h3 id="前提，安装vscode的插件Paste-images"><a href="#前提，安装vscode的插件Paste-images" class="headerlink" title="前提，安装vscode的插件Paste images"></a>前提，安装vscode的插件Paste images</h3><h3 id="先截图，然后通过command-alt-v-ctrl-alt-v-的方式粘贴"><a href="#先截图，然后通过command-alt-v-ctrl-alt-v-的方式粘贴" class="headerlink" title="先截图，然后通过command+alt+v(ctrl+alt+v)的方式粘贴"></a>先截图，然后通过command+alt+v(ctrl+alt+v)的方式粘贴</h3><p>markdown文件中自动插入如下内容:</p><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">asset_img</span> <span class="hljs-number">2020</span>-<span class="hljs-number">08</span>-<span class="hljs-number">28</span>-<span class="hljs-number">01</span>-<span class="hljs-number">25</span>-<span class="hljs-number">27</span>.png <span class="hljs-template-tag">%&#125;</span></code></pre><img src="/2020/08/28/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8vscode%E6%8F%92%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/2020-08-28-01-25-27.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式极简教程</title>
    <link href="/2020/08/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/"/>
    <url>/2020/08/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://i.loli.net/2020/02/21/FZ4AcQa6zw3TkHj.png"></p><h2 id="什么是正则表达式-？"><a href="#什么是正则表达式-？" class="headerlink" title="什么是正则表达式 ？"></a>什么是正则表达式 ？</h2><blockquote><p>正则表达式是一种被用于从文本中检索符合某些特定模式的文本。</p></blockquote><p>正则表达式是从左到右来匹配一个字符串的。”Regular Expression” 这个词太长了，我们通常使用它的缩写 “regex” 或者 “regexp”。<br>正则表达式可以被用来替换字符串中的文本、验证表单、基于模式匹配从一个字符串中提取字符串等等。<br><br /></p><p>想象一下，您正在编写应用程序，并且您希望在用户选择用户名时设置规则。我们希望用户名可以包含字母，数字，下划线和连字符。<br>为了让它看起来不丑，我们还想限制用户名中的字符数量。我们可以使用以下正则表达式来验证用户名:</p><p><img src="https://i.loli.net/2020/02/21/L6XKBv72rt1Zb5p.png"></p><p>上面这个正则表达式可以匹配 <code>john_doe</code>，<code>jo-hn\_doe</code> 和 <code>john12\_as</code>。但是它不能匹配 <code>Jo</code>，因为该字符串里面包含了大写字符，并且它太短了。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">基本匹配</a></li><li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">元字符</a><ul><li><a href="#21-%E8%8B%B1%E6%96%87%E5%8F%A5%E5%8F%B7">英文句号</a></li><li><a href="#22-%E5%AD%97%E7%AC%A6%E9%9B%86">字符集</a><ul><li><a href="#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86">否定字符集</a></li></ul></li><li><a href="#23-%E9%87%8D%E5%A4%8D">重复</a><ul><li><a href="#231-%E6%98%9F%E5%8F%B7">星号</a></li><li><a href="#232-%E5%8A%A0%E5%8F%B7">加号</a></li><li><a href="#233-%E9%97%AE%E5%8F%B7">问号</a></li></ul></li><li><a href="#24-%E8%8A%B1%E6%8B%AC%E5%8F%B7">花括号</a></li><li><a href="#25-%E5%AD%97%E7%AC%A6%E7%BB%84">字符组</a></li><li><a href="#26-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84">分支结构</a></li><li><a href="#27-%E8%BD%AC%E4%B9%89%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">转义特殊字符</a></li><li><a href="#28-%E5%AE%9A%E4%BD%8D%E7%AC%A6">定位符</a><ul><li><a href="#281-%E6%8F%92%E5%85%A5%E7%AC%A6%E5%8F%B7">插入符号</a></li><li><a href="#282-%E7%BE%8E%E5%85%83%E7%AC%A6%E5%8F%B7">美元符号</a></li></ul></li></ul></li><li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">简写字符集</a></li><li><a href="#4-%E6%96%AD%E8%A8%80">断言</a><ul><li><a href="#41-%E6%AD%A3%E5%90%91%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">正向先行断言</a></li><li><a href="#42-%E8%B4%9F%E5%90%91%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">负向先行断言</a></li><li><a href="#43-%E6%AD%A3%E5%90%91%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80">正向后行断言</a></li><li><a href="#44-%E8%B4%9F%E5%90%91%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80">负向后行断言</a></li></ul></li><li><a href="#5-%E6%A0%87%E8%AE%B0">标记</a><ul><li><a href="#51-%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99">不区分大小写</a></li><li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2">全局搜索</a></li><li><a href="#53-%E5%A4%9A%E8%A1%8C%E5%8C%B9%E9%85%8D">多行匹配</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">常用正则表达式</a></li></ul><h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式只是我们用于在文本中检索字母和数字的模式。例如正则表达式 <code>cat</code>，表示: 字母 <code>c</code> 后面跟着一个字母 <code>a</code>，再后面跟着一个字母 <code>t</code>。</p><pre>"cat" => The <a href="#learn-regex"><strong>cat</strong></a> sat on the mat</pre><p>正则表达式 <code>123</code> 会匹配字符串 “123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。<br>正则表达式通常区分大小写，因此正则表达式 <code>Cat</code> 与字符串 “cat” 不匹配。</p><pre>"Cat" => The cat sat on the <a href="#learn-regex"><strong>Cat</strong></a></pre><h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符写在方括号内的时候有特殊含义。<br>元字符如下:</p><table><thead><tr><th align="center">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配除换行符以外的任意字符。</td></tr><tr><td align="center">[ ]</td><td>字符类，匹配方括号中包含的任意字符。</td></tr><tr><td align="center">[^ ]</td><td>否定字符类。匹配方括号中不包含的任意字符</td></tr><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</td></tr><tr><td align="center">{n,m}</td><td>花括号，匹配前面字符至少 n 次，但是不超过 m 次。</td></tr><tr><td align="center">(xyz)</td><td>字符组，按照确切的顺序匹配字符xyz。</td></tr><tr><td align="center">&#124;</td><td>分支结构，匹配符号之前的字符或后面的字符。</td></tr><tr><td align="center">&#92;</td><td>转义符，它可以还原元字符原来的含义，允许你匹配保留字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td></tr><tr><td align="center">^</td><td>匹配行的开始</td></tr><tr><td align="center">$</td><td>匹配行的结束</td></tr></tbody></table><h2 id="2-1-英文句号"><a href="#2-1-英文句号" class="headerlink" title="2.1 英文句号"></a>2.1 英文句号</h2><p>英文句号 <code>.</code> 是元字符的最简单的例子。元字符 <code>.</code> 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 <code>.ar</code>，表示: 任意字符后面跟着一个字母 <code>a</code>，<br>再后面跟着一个字母 <code>r</code>。</p><pre>".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。<br>例如正则表达式 <code>[Tt]he</code>，表示: 大写 <code>T</code> 或小写 <code>t</code> ，后跟字母 <code>h</code>，再后跟字母 <code>e</code>。</p><pre>"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p>然而，字符集中的英文句号表示它字面的含义。正则表达式 <code>ar[.]</code>，表示小写字母 <code>a</code>，后面跟着一个字母 <code>r</code>，再后面跟着一个英文句号 <code>.</code> 字符。</p><pre>"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a></pre><h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说插入字符 <code>^</code> 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 <code>[^c]ar</code>，表示: 除了字母 <code>c</code> 以外的任意字符，后面跟着字符 <code>a</code>，<br>再后面跟着一个字母 <code>r</code>。</p><pre>"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><h2 id="2-3-重复"><a href="#2-3-重复" class="headerlink" title="2.3 重复"></a>2.3 重复</h2><p>以下元字符 <code>+</code>，<code>*</code> 或 <code>?</code> 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。</p><h3 id="2-3-1-星号"><a href="#2-3-1-星号" class="headerlink" title="2.3.1 星号"></a>2.3.1 星号</h3><p>该符号 <code>*</code> 表示匹配上一个匹配规则的零次或多次。正则表达式 <code>a*</code> 表示小写字母 <code>a</code> 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。<br>例如正则表达式 <code>[a-z]*</code>，表示: 一行中可以包含任意数量的小写字母。</p><pre>"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.</pre><p>该 <code>*</code> 符号可以与元符号 <code>.</code> 用在一起，用来匹配任意字符串 <code>.*</code>。该 <code>*</code> 符号可以与空格符 <code>\s</code> 一起使用，用来匹配一串空格字符。<br>例如正则表达式 <code>\s*cat\s*</code>，表示: 零个或多个空格，后面跟小写字母 <code>c</code>，再后面跟小写字母 <code>a</code>，再再后面跟小写字母 <code>t</code>，后面再跟零个或多个空格。</p><pre>"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex"><strong>cat</strong></a>.</pre><h3 id="2-3-2-加号"><a href="#2-3-2-加号" class="headerlink" title="2.3.2 加号"></a>2.3.2 加号</h3><p>该符号 <code>+</code> 匹配上一个字符的一次或多次。例如正则表达式 <code>c.+t</code>，表示: 一个小写字母 <code>c</code>，后跟任意数量的字符，后跟小写字母 <code>t</code>。</p><pre>"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.</pre><h3 id="2-3-3-问号"><a href="#2-3-3-问号" class="headerlink" title="2.3.3 问号"></a>2.3.3 问号</h3><p>在正则表达式中，元字符 <code>?</code> 用来表示前一个字符是可选的。该符号匹配前一个字符的零次或一次。<br>例如正则表达式 <code>[T]?he</code>，表示: 可选的大写字母 <code>T</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p><pre>"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><pre>"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.</pre><h2 id="2-4-花括号"><a href="#2-4-花括号" class="headerlink" title="2.4 花括号"></a>2.4 花括号</h2><p>在正则表达式中花括号(也被称为量词 ?)用于指定字符或一组字符可以重复的次数。例如正则表达式 <code>[0-9]&#123;2,3&#125;</code>，表示: 匹配至少2位数字但不超过3位(0到9范围内的字符)。</p><pre>"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p>我们可以省略第二个数字。例如正则表达式 <code>[0-9]&#123;2,&#125;</code>，表示: 匹配2个或更多个数字。如果我们也删除逗号，则正则表达式 <code>[0-9]&#123;2&#125;</code>，表示: 匹配正好为2位数的数字。</p><pre>"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><pre>"[0-9]{2}" => The number was 9.<a href="#learn-regex"><strong>99</strong></a><a href="#learn-regex"><strong>97</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><h2 id="2-5-字符组"><a href="#2-5-字符组" class="headerlink" title="2.5 字符组"></a>2.5 字符组</h2><p>字符组是一组写在圆括号内的子模式 <code>(...)</code>。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。<br>但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。<br>例如正则表达式 <code>(ab)*</code> 表示匹配零个或多个的字符串 “ab”。我们还可以在字符组中使用元字符 <code>|</code>。例如正则表达式 <code>(c|g|p)ar</code>，表示: 小写字母 <code>c</code>、<code>g</code> 或 <code>p</code> 后面跟字母 <code>a</code>，后跟字母 <code>r</code>。</p><pre>"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><h2 id="2-6-分支结构"><a href="#2-6-分支结构" class="headerlink" title="2.6 分支结构"></a>2.6 分支结构</h2><p>在正则表达式中垂直条 <code>|</code> 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支机构的工作方式一样。<br>但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。<br>例如正则表达式 <code>(T|t)he|car</code>，表示: 大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code> 或小写字母 <code>c</code>，后跟小写字母 <code>a</code>，后跟小写字母 <code>r</code>。</p><pre>"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><h2 id="2-7-转义特殊字符"><a href="#2-7-转义特殊字符" class="headerlink" title="2.7 转义特殊字符"></a>2.7 转义特殊字符</h2><p>正则表达式中使用反斜杠 <code>\</code> 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code>。在特殊字符前面加 <code>\</code>，就可以使用它来做匹配字符。<br>例如正则表达式 <code>.</code> 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 <code>.</code> 字符，正则表达式 <code>(f|c|m)at\.?</code>，表示: 小写字母 <code>f</code>、<code>c</code> 或者 <code>m</code> 后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟可选的 <code>.</code> 字符。</p><pre>"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a></pre><h2 id="2-8-定位符"><a href="#2-8-定位符" class="headerlink" title="2.8 定位符"></a>2.8 定位符</h2><p>在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。<br>定位符有两种类型: 第一种类型是 <code>^</code> 检查匹配字符是否是起始字符，第二种类型是 <code>$</code>，它检查匹配字符是否是输入字符串的最后一个字符。</p><h3 id="2-8-1-插入符号"><a href="#2-8-1-插入符号" class="headerlink" title="2.8.1 插入符号"></a>2.8.1 插入符号</h3><p>插入符号 <code>^</code> 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 <code>^a</code> (如果a是起始符号)匹配字符串 <code>abc</code>，它会匹配到 <code>a</code>。<br>但是如果我们使用正则表达式 <code>^b</code>，它是匹配不到任何东西的，因为在字符串 <code>abc</code> 中 “b” 不是起始字符。<br>让我们来看看另一个正则表达式 <code>^(T|t)he</code>，这表示: 大写字母 <code>T</code> 或小写字母 <code>t</code> 是输入字符串的起始符号，后面跟着小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p><pre>"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><pre>"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><h3 id="2-8-2-美元符号"><a href="#2-8-2-美元符号" class="headerlink" title="2.8.2 美元符号"></a>2.8.2 美元符号</h3><p>美元 <code>$</code> 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 <code>(at\.)$</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟一个 <code>.</code> 字符，且这个匹配器必须是字符串的结尾。</p><pre>"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a></pre><pre>"(at\.)$" => The fat cat sat on the m<a href="#learn-regex"><strong>at.</strong></a></pre><h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下:</p><table><thead><tr><th align="center">简写</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td align="center">\w</td><td>匹配所有字母和数字的字符: <code>[a-zA-Z0-9_]</code></td></tr><tr><td align="center">\W</td><td>匹配非字母和数字的字符: <code>[^\w]</code></td></tr><tr><td align="center">\d</td><td>匹配数字: <code>[0-9]</code></td></tr><tr><td align="center">\D</td><td>匹配非数字: <code>[^\d]</code></td></tr><tr><td align="center">\s</td><td>匹配空格符: <code>[\t\n\f\r\p&#123;Z&#125;]</code></td></tr><tr><td align="center">\S</td><td>匹配非空格符: <code>[^\s]</code></td></tr></tbody></table><h2 id="4-断言"><a href="#4-断言" class="headerlink" title="4. 断言"></a>4. 断言</h2><p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <strong><em>非捕获组</em></strong> (用于匹配模式，但不包括在匹配列表中)。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。<br>例如我们想获取输入字符串 <code>$4.44 and $10.88</code> 中带有前缀 <code>$</code> 的所有数字。我们可以使用这个正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>，表示: 获取包含 <code>.</code> 字符且前缀为 <code>$</code> 的所有数字。<br>以下是正则表达式中使用的断言:</p><table><thead><tr><th align="center">符号</th><th>描述</th></tr></thead><tbody><tr><td align="center">?=</td><td>正向先行断言</td></tr><tr><td align="center">?!</td><td>负向先行断言</td></tr><tr><td align="center">?&lt;=</td><td>正向后行断言</td></tr><tr><td align="center">?&lt;!</td><td>负向后行断言</td></tr></tbody></table><h3 id="4-1-正向先行断言"><a href="#4-1-正向先行断言" class="headerlink" title="4.1 正向先行断言"></a>4.1 正向先行断言</h3><p>正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。<br>要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 <code>(?=...)</code>。先行断言表达式写在括号中的等号后面。<br>例如正则表达式 <code>(T|t)he(?=\sfat)</code>，表示: 匹配大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟字母 <code>h</code>，后跟字母 <code>e</code>。<br>在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 <code>The</code> 或 <code>the</code> 后面跟着 <code>fat</code>。</p><pre>"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><h3 id="4-2-负向先行断言"><a href="#4-2-负向先行断言" class="headerlink" title="4.2 负向先行断言"></a>4.2 负向先行断言</h3><p>当我们需要从输入字符串中获取不匹配表达式的内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样，<br>唯一的区别是不是等号 <code>=</code>，我们使用否定符号 <code>!</code>，例如 <code>(?!...)</code>。<br>我们来看看下面的正则表达式 <code>(T|t)he(?!\sfat)</code>，表示: 从输入字符串中获取全部 <code>The</code> 或者 <code>the</code> 且不匹配 <code>fat</code> 前面加上一个空格字符。</p><pre>"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><h3 id="4-3-正向后行断言"><a href="#4-3-正向后行断言" class="headerlink" title="4.3 正向后行断言"></a>4.3 正向后行断言</h3><p>正向后行断言是用于获取在特定模式之前的所有匹配内容。正向后行断言表示为 <code>(?&lt;=...)</code>。例如正则表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code>，表示: 从输入字符串中获取在单词 <code>The</code> 或 <code>the</code> 之后的所有 <code>fat</code> 和 <code>mat</code> 单词。</p><pre>"(?<=(T|t)he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><h3 id="4-4-负向后行断言"><a href="#4-4-负向后行断言" class="headerlink" title="4.4 负向后行断言"></a>4.4 负向后行断言</h3><p>负向后行断言是用于获取不在特定模式之前的所有匹配的内容。负向后行断言表示为 <code>(?&lt;!...)</code>。例如正则表达式 <code>(?&lt;!(T|t)he\s)(cat)</code>，表示: 在输入字符中获取所有不在 <code>The</code> 或 <code>the</code> 之后的所有单词 <code>cat</code>。</p><pre>"(?<!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.</pre><h2 id="5-标记"><a href="#5-标记" class="headerlink" title="5. 标记"></a>5. 标记</h2><p>标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。</p><table><thead><tr><th align="center">标记</th><th>描述</th></tr></thead><tbody><tr><td align="center">i</td><td>不区分大小写: 将匹配设置为不区分大小写。</td></tr><tr><td align="center">g</td><td>全局搜索: 搜索整个输入字符串中的所有匹配。</td></tr><tr><td align="center">m</td><td>多行匹配: 会匹配输入字符串每一行。</td></tr></tbody></table><h3 id="5-1-不区分大小写"><a href="#5-1-不区分大小写" class="headerlink" title="5.1 不区分大小写"></a>5.1 不区分大小写</h3><p><code>i</code> 修饰符用于执行不区分大小写匹配。例如正则表达式 <code>/The/gi</code>，表示: 大写字母 <code>T</code>，后跟小写字母 <code>h</code>，后跟字母 <code>e</code>。<br>但是在正则匹配结束时 <code>i</code> 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 <code>g</code> 标记，因为我们要在整个输入字符串中搜索匹配。</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><pre>"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><h3 id="5-2-全局搜索"><a href="#5-2-全局搜索" class="headerlink" title="5.2 全局搜索"></a>5.2 全局搜索</h3><p><code>g</code> 修饰符用于执行全局匹配 (会查找所有匹配，不会在查找到第一个匹配时就停止)。<br>例如正则表达式 <code>/.(at)/g</code>，表示: 除换行符之外的任意字符，后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>。<br>因为我们在正则表达式的末尾使用了 <code>g</code> 标记，它会从整个输入字符串中找到每个匹配项。</p><pre>".(at)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.</pre><pre>"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><h3 id="5-3-多行匹配"><a href="#5-3-多行匹配" class="headerlink" title="5.3 多行匹配"></a>5.3 多行匹配</h3><p><code>m</code> 修饰符被用来执行多行的匹配。正如我们前面讨论过的 <code>(^, $)</code>，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 <code>m</code> 修饰符。<br>例如正则表达式 <code>/at(.)?$/gm</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，匹配除了换行符以外任意字符零次或一次。而且因为 <code>m</code> 标记，现在正则表达式引擎匹配字符串中每一行的末尾。</p><pre>"/.at(.)?$/" => The fat                cat sat                on the <a href="#learn-regex"><strong>mat.</strong></a></pre><pre>"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>                  cat <a href="#learn-regex"><strong>sat</strong></a>                  on the <a href="#learn-regex"><strong>mat.</strong></a></pre><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><ul><li><strong>正整数</strong>: <code>^\d+$</code></li><li><strong>负整数</strong>: <code>^-\d+$</code></li><li><strong>电话号码</strong>: <code>^+?[\d\s]&#123;3,&#125;$</code></li><li><strong>电话代码</strong>: <code>^+?[\d\s]+(?[\d\s]&#123;10,&#125;$</code></li><li><strong>整数</strong>: <code>^-?\d+$</code></li><li><strong>用户名</strong>: <code>^[\w\d_.]&#123;4,16&#125;$</code></li><li><strong>字母数字字符</strong>: <code>^[a-zA-Z0-9]*$</code></li><li><strong>带空格的字母数字字符</strong>: <code>^[a-zA-Z0-9 ]*$</code></li><li><strong>密码</strong>: <code>^(?=^.&#123;6,&#125;$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code></li><li><strong>电子邮件</strong>: <code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,4&#125;)*$</code></li><li><strong>IPv4 地址</strong>: <code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code></li><li><strong>小写字母</strong>: <code>^([a-z])*$</code></li><li><strong>大写字母</strong>: <code>^([A-Z])*$</code></li><li><strong>网址</strong>: <code>^(((http|https|ftp):\/\/)?([[a-zA-Z0-9]\-\.])+(\.)([[a-zA-Z0-9]])&#123;2,4&#125;([[a-zA-Z0-9]\/+=%&amp;_\.~?\-]*))*$</code></li><li><strong>VISA 信用卡号码</strong>: <code>^(4[0-9]&#123;12&#125;(?:[0-9]&#123;3&#125;)?)*$</code></li><li><strong>日期 (MM/DD/YYYY)</strong>: <code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]&#123;2&#125;$</code></li><li><strong>日期 (YYYY/MM/DD)</strong>: <code>^(19|20)?[0-9]&#123;2&#125;[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code></li><li><strong>万事达信用卡号码</strong>: <code>^(5[1-5][0-9]&#123;14&#125;)*$</code></li></ul><h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><ul><li>Report issues</li><li>Open pull request with improvements</li><li>Spread the word </li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT © <a href="mailto:ziishaned@gmail.com">Zeeshan Ahmed</a></p><hr><p><strong><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-">⬆ top</a></strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用VSCode插件提升hexo的书写体验</title>
    <link href="/2020/08/27/%E5%88%A9%E7%94%A8VSCode%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87hexo%E7%9A%84%E4%B9%A6%E5%86%99%E4%BD%93%E9%AA%8C/"/>
    <url>/2020/08/27/%E5%88%A9%E7%94%A8VSCode%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87hexo%E7%9A%84%E4%B9%A6%E5%86%99%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用VSCode插件提升hexo体验"><a href="#利用VSCode插件提升hexo体验" class="headerlink" title="利用VSCode插件提升hexo体验"></a>利用VSCode插件提升hexo体验</h1><p>Hexo的编写与部署可以通过vscode进行，同时通过对插件的使用也可以增强体验，提升效率</p><p>1. 图片剪切插件 <a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste Image</a></p><p>hexo3.0版本中可以在_config.yml中设置</p><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre><p>这样在hexo new 的时候会生成同名的文件夹，同时在md文件中输入</p><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> xxx %&#125;</span></code></pre><p>就可以插入这个文件夹中的图片。为了方便进行这个步骤，使用vscode中的插件Paste Image，安装之后，在user-settings里新增两条配置：</p><p><del>“pasteImage.path”: “${currentFileNameWithoutExt}/“,</del> </p><p><del>“pasteImage.insertPattern”: ““</del></p><p>更正为:</p><pre><code class="hljs bash"><span class="hljs-string">&quot;pasteImage.path&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;currentFileNameWithoutExt&#125;</span>&quot;</span>,<span class="hljs-string">&quot;pasteImage.insertPattern&quot;</span>: <span class="hljs-string">&quot;&#123;% asset_img <span class="hljs-variable">$&#123;imageFileName&#125;</span> %&#125;&quot;</span></code></pre><p>操作步骤图示:</p><center><img src="/2020/08/27/%E5%88%A9%E7%94%A8VSCode%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87hexo%E7%9A%84%E4%B9%A6%E5%86%99%E4%BD%93%E9%AA%8C/2020-08-28-01-51-34.png" class=""></center><br/><center><img src="/2020/08/27/%E5%88%A9%E7%94%A8VSCode%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87hexo%E7%9A%84%E4%B9%A6%E5%86%99%E4%BD%93%E9%AA%8C/2020-08-28-01-55-04.png" class=""></center><br/><center><img src="/2020/08/27/%E5%88%A9%E7%94%A8VSCode%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87hexo%E7%9A%84%E4%B9%A6%E5%86%99%E4%BD%93%E9%AA%8C/2020-08-28-01-55-52.png" class=""></center><br/><center><img src="/2020/08/27/%E5%88%A9%E7%94%A8VSCode%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87hexo%E7%9A%84%E4%B9%A6%E5%86%99%E4%BD%93%E9%AA%8C/2020-08-28-01-56-21.png" class=""></center><br/><p>这样粘贴图片的时候会自动保存到文件夹中，并自动引用。注意这个插件只适合与剪切板使用，直接拖拽文件是不管用的。</p><h2 id="2-markdown预览插件-Markdown-Preview-Enhanced"><a href="#2-markdown预览插件-Markdown-Preview-Enhanced" class="headerlink" title="2. markdown预览插件 Markdown Preview Enhanced"></a>2. markdown预览插件 <a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a></h2><p>利用该插件预览</p><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> xxx %&#125;</span></code></pre><p>形式插入的图片，主要分为两步</p><h5 id="1-ctrl-shift-P-找到-Markdown-Preview-Enhanced-Extend-Parser，打开parser-js”"><a href="#1-ctrl-shift-P-找到-Markdown-Preview-Enhanced-Extend-Parser，打开parser-js”" class="headerlink" title="1. ctrl+shift+P 找到 Markdown Preview Enhanced: Extend Parser，打开parser.js”"></a>1. ctrl+shift+P 找到 Markdown Preview Enhanced: Extend Parser，打开parser.js”</h5><h5 id="2-修改其中onWillParseMarkdown方法为："><a href="#2-修改其中onWillParseMarkdown方法为：" class="headerlink" title="2. 修改其中onWillParseMarkdown方法为："></a>2. 修改其中onWillParseMarkdown方法为：</h5><pre><code class="hljs javascript"><span class="hljs-attr">onWillParseMarkdown</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">markdown</span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> &#123;    markdown = markdown.<span class="hljs-title function_">replace</span>(      <span class="hljs-regexp">/\&#123;%\s*asset_img\s*(.*)\s*%\&#125;/g</span>,      <span class="hljs-function">(<span class="hljs-params">whole, content</span>) =&gt;</span> (<span class="hljs-string">`![](<span class="hljs-subst">$&#123;content&#125;</span>)`</span>)    )    <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(markdown)  &#125;)&#125;,</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程概念(一)</title>
    <link href="/2020/08/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5(%E4%B8%80)/"/>
    <url>/2020/08/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面向对象编程概念-一"><a href="#面向对象编程概念-一" class="headerlink" title="面向对象编程概念(一)"></a>面向对象编程概念(一)</h1><blockquote><p>生活的质感依赖于张力，你总需要某些够不着的东西，来构成这种张力。</p></blockquote><center><font color="gray" style="font-size: 1rem">点 上 方 蓝 字 可 关 注 我 们</font></center><p><img src="https://wx3.sinaimg.cn/large/70c0040cly4gam5yg84u5j20dw05kq36.jpg"></p><center>▼</center><center> <font color="red">Leaders</font> ｜<strong>Dante Fung</strong> </center><p><img src="https://wx1.sinaimg.cn/large/70c0040cly4gbh0gvjveuj20rs0iodjv.jpg">​</p><center>欢 迎 阅 读 本 文</center><center>我 是 老 朋 友， Fung 主编</center><p>本期编辑：fung</p><p>生活的质感依赖于张力，你总需要某些够不着的东西，来构成这种张力。</p><p>如果你以前从来没有使用面向对象语言，你需要在开始编写 JAVA 代码之前先理解这个概念。你需要理解什么是对象、什么是类、对象和类的关系怎样以及使用消息怎样在对象之间进行通讯。本教程的前面部分将描述面向对象编程的概念，而后面的教程将教你怎样将这个概念编成代码。</p><h2 id="一、什么是对象"><a href="#一、什么是对象" class="headerlink" title="一、什么是对象"></a>一、什么是对象</h2><hr><p>对象是一些相关的变量和方法的软件集。软件对象经常用于模仿现实世界中我们身边的一些对象。对象是理解面向对象技术的关键。你在学习之前可以看看现实生活中的对象，比如狗、桌子、电视、自行车等等。你可以发现现实世界中的对象有两个共同特征：它们都有状态和行为。比如狗有自己的状态（比如名字、颜色、生育以及饥饿等等）和行为（比如摇尾巴等等）。同样自行车也有自己的状态（比如当前档位、两个轮子等等）和行为（比如刹车、加速、减速以及改变档位等等）。</p><p>而软件对象实际上是现实世界对象的造型，因为它同样有状态和行为。一个软件对象利用一个或者多个变量来维持它的状态。变量是由用户标识符来命名的数据项。软件对象用它的方法来执行它的行为。方法是跟对象有关联的函数（子程序）。</p><p>你可以利用软件对象来代表现实世界中的对象。你可能想用一个动画程序来代表现实世界中的狗，或者用可以控制电子自行车的程序来代表现实世界的自行车。同样你可以使用软件对象来造型抽象的概念，比如，事件是一个用在 GUI 窗口系统的公共对象，它可以代表用户按下鼠标按钮或者键盘上的按键的反应。</p><p><img src="https://wx1.sinaimg.cn/large/70c0040cly4gbh0gvlnzfj212k0k0di3.jpg"></p><center>图1- 软件对象公共可视代表图</center><p>　软件对象的状态和行为都可以用在对象中的变量和方法来表达。构造现实世界的自行车的软件对象要有指示自行车的当前状态的变量：速度为 20mph，它的当前档位为第三档。这些变量就是我们熟知的实例变量，因为它们包含了用于特殊自行车对象的状态，并且在面向对象技术中，特殊的对象称为实例。</p><p><img src="https://wx1.sinaimg.cn/large/70c0040cly4gbh0gvhj8yj20vk0jo0uc.jpg"></p><center>图2-软件对象之自行车造型</center><p>除了变量，软件自行车同样有用于刹车、改变踏板步调以及改变档位的方法。这些方法就是熟知的实例方法因为它们检查或者改变特殊自行车实例的状态。</p><p>以上的对象图显示了对象的变量组成了圆心部分。方法处在变量的四周并且在程序中从其它对象隐藏了对象的核心。用保护方法的方法来包装对象的变量称为封装。这个对象图就是对象理想的表示法，也是面向对象系统设计者努力的最后目标。然而这并不是全部的内容。通常，出于某种现实的理由，对象可能暴露它的一些变量或者隐藏一些方法。在 JAVA 编程语言中，一个对象可以为变量和方法指定四种访问等级中的一种。这个访问等级决定哪个对象和类可以访问变量或者方法。在 JAVA 中访问变量和方法可以转换为控制访问类的成员函数。封装相关的变量和方法到一个简洁的软件集是一个简单而且强有力的方法，它为软件开发者提供了两个主要好处：</p><p><strong>模块性：</strong> 对象的源代码可以独立于其它的对象源代码来进行编写和维护。同样，对象可以很容易地在系统中传递。你可以将你的自行车对象给其它的对象，它仍然可以正常工作。</p><p><strong>信息隐藏：</strong> 一个对象如果有一个公共的界面，那么其它的对象就可以与之进行通讯。这个对象可以维护私人的信息和方法，它可以在任何时候被改变而不影响依耐于它的其它对象。所以你不必理解自行车中齿轮的机理就可以使用它。</p><h2 id="二、什么是消息"><a href="#二、什么是消息" class="headerlink" title="二、什么是消息"></a>二、什么是消息</h2><hr><p>软件对象之间进行交互作用和通讯是利用消息的。</p><p>单一的一个对象通常不是很有用的。相反，一个对象通常是一个包含了许多其它对象的更大的程序或者应用程序。通过这些对象的交互作用，程序员可以获得高阶的功能以及更为复杂的行为。你的自行车如果不使用它的时候，它就是一堆铝合金和橡胶，它没有任何的活动。而只有当有其它的对象来和它交互的时候才是有用的。</p><p>软件对象与其它对象进行交互与通讯是利用发送给其它对象来实现的。当对象 A 想对象 B 来执行一个 B 中的方法，对象 A 就会消息给对象 B。如图 3 所示。</p><p><img src="https://wx4.sinaimg.cn/large/70c0040cly4gbh0gvmomfj217q0sqtci.jpg"></p><center>图3-对象之间的消息传递</center><p>  有时候，接收的对象需要更多的信息就至于它可以正确知道该如何做。比如，当你想改变自行车的齿轮，你就必须指出哪个齿轮。这个信息是将信息作为参数来传递的。如图 4 所示的现实了一个信息由三个组件组成：</p><ol><li><p>被寻址消息的对象（YourBicycle）</p></li><li><p>要执行方法的名字(changeGears)</p></li><li><p>这个方法需要的所有参数（lowerGear）</p></li></ol><p><img src="https://wx3.sinaimg.cn/large/70c0040cly4gbh0gvhsjtj20zk0lntb9.jpg"></p><center>图4-对象之间消息传递(对象之间通过方法调用实现消息通讯)</center><p>上面的三个组件对于接收方的对象执行相应的方法是给出了充分的信息。再也不需要其它的信息或者上下文了。</p><p>消息提供了两个重要的好处：</p><ol><li><p>对象的行为是通过它的方法来表达的，因此消息传递支持所有在对象之间的可能的交互。</p></li><li><p>对象不需要在相同的进程或者相同的机器上来发送和接收消息给其它的对象</p></li></ol><h2 id="三、什么是类"><a href="#三、什么是类" class="headerlink" title="三、什么是类"></a>三、什么是类</h2><hr><p>类实际上是对某种类型的对象定义变量和方法的原型。</p><p>在现实世界中，你经常看到相同类型的许多对象。比如 ，你的自行车只是现实世界中许多自行车的其中一辆。使用面向对象技术，我们可以说你的自行车是自行车对象类的一个实例。通常，自行车有一些状态（当前档位、两个轮子等等）以及行为（改变档位、刹车等等）。但是，每辆自行车的状态都是独立的并且跟其它自行车不同。</p><p>当厂家制造自行车的时候，厂商利用了自行车共有的特性来根据相同的蓝图制造许多自行车。如果制造一辆自行车就要产生一个新蓝图，那效率就太低了。</p><p>在面向对象软件中，同样地，可以让相同种类地许多对象来共有一些特性，比如矩形、雇员记录、视频夹等等。就象自行车制造商人，你可以利用相同种类的对象是相似的事实并且你可以为这些对象创建一个蓝图。对对象的软件蓝图叫做类。</p><p>自行车的类需要定义一些实例变量来包括当前档位、当前速度等等。这个类将为实例方法定义和提供实施方法，它允许骑车者改变档位、刹车以及改变脚踏板的节奏，如图 5 所示：</p><p><img src="https://wx3.sinaimg.cn/large/70c0040cly4gbh0gvlra4j20rs0k30un.jpg"></p><center>图5-对象实例变量与实例方法</center><p>当你创建了自行车类以后，你可以从这个类创建任意个自行车对象。当你创建了一个类的实例后，系统将为这个对象和的实例变量分配内存。每个实例将给所有实例变量的副本定义在类中。如图 6 所示：</p><p><img src="https://wx3.sinaimg.cn/large/70c0040cly4gbh0gvi1j3j20zk0fe0v1.jpg"></p><center>图6-多个实例对象</center><p>除了实例变量，类还要定义类的变量。类变量包含了被类所有实例共享的信息。比如，假设所有的自行车有相同的档位数。在本例子中，要定义一个实例变量来容纳档位数。每一个实例都会有变量的副本，但是在每一个实例中数值都是相同的。在这样的情况下，你可以定义一个类变量来包含档位数，这样所有的类的实例都共享这个变量。如果一个对象改变了变量，它就为改变那个类的所有对象。类同样可以定义类方法。你可以直接从类中调用类方法，然而你必须在特定的实例中调用实例方法。如图 7 所示。</p><p><img src="https://wx4.sinaimg.cn/large/70c0040cly4gbh0gvnz7tj20zk0ipwhe.jpg"></p><center>图7</center><center>-  未  -  完  -  待  -  续  -</center><center><p>所有的成功都不是空穴来风<p>你要相信你的努力</p><p>终将有迹可循</p></p></center><center><strong>- END -</strong></center><p><img src="https://wx3.sinaimg.cn/large/70c0040cly4gam5yg5rj2j20p00p0dhc.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试插入音频</title>
    <link href="/2020/08/19/%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5%E9%9F%B3%E9%A2%91/"/>
    <url>/2020/08/19/%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5%E9%9F%B3%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-NHNcaeEO" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="92786442" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div>]]></content>
    
    
    <categories>
      
      <category>测试文章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试插入视频</title>
    <link href="/2020/08/19/%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91/"/>
    <url>/2020/08/19/%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="测试插入视频"><a href="#测试插入视频" class="headerlink" title="测试插入视频"></a>测试插入视频</h2><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"screenshot":"yes","video":{"url":"https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&userId=17&ext=.mp4","pic":"https://i.loli.net/2019/06/06/5cf8c5d9c57b510947.png"},"danmaku":{"id":"9E2E3368B56CDBB4","api":"http://dplayer.daoapp.io","token":"tokendemo"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    
    <categories>
      
      <category>测试文章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何找到融资</title>
    <link href="/2020/08/19/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E8%9E%8D%E8%B5%84/"/>
    <url>/2020/08/19/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E8%9E%8D%E8%B5%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="如何找到融资"><a href="#如何找到融资" class="headerlink" title="如何找到融资"></a>如何找到融资</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>AI天使投资（Angel Investment）</strong>： 是指富有的个人出资协助具有专门技术或独特概念的原创项目或小型初创企业，进行一次性的前期投资，它是风险投资的一种形式。</p><p><strong>VC风险投资（Venture Capital）</strong>： 风险投资是把资本投向蕴藏着失败风险的高新技术及其产品的研究开发领域，旨在促使高新技术成果尽快商品化、产业化，以取得高资本收益的一种投资过程。</p><p><strong>PE私募股权投资（PrivateEquity）</strong>： 通过私募形式募集资金，对私有企业，即非上市企业进行的权益性投资，从而推动非上市企业价值增长，最终通过上市、并购、管理层回购、股权置换等方式出售持股套现退出的一种投资行为。</p><p><strong>IPO首次公开募股（Initial Public Offerings）</strong>： 是指一家企业或公司第一次将它的股份向公众出售（首次公开发行，指股份公司首次向社会公众公开招股的发行方式）。也就是我们经常说的公司上市。</p><h1 id="融资需要什么条件"><a href="#融资需要什么条件" class="headerlink" title="融资需要什么条件"></a>融资需要什么条件</h1><p>天使轮和A轮主要看公司的创始人。</p><p>靠谱的创始人 + 想法 基本上就能拿到天使轮。</p><p>融A轮则需要有个1.x的产品、基本完整的团队、可靠的商业模式，暂时都还不需要特别好的运营数据。</p><p>B轮则需要做A轮作Back，加上比较好的运营数据。</p><p>C轮则是为上市做准备的，数额一般都特别大，拿到C轮基本都需要做到市场中第一、第二的位置。</p><h1 id="创业融资的渠道有哪些"><a href="#创业融资的渠道有哪些" class="headerlink" title="创业融资的渠道有哪些"></a>创业融资的渠道有哪些</h1><p>如果个人关系不是很强，有哪些渠道可以找到融资呢？主要是</p><ul><li>通过朋友介绍</li><li>线上平台和线下路演</li><li>36Kr</li><li>天使汇</li><li>IT桔子</li><li>创投圈</li></ul>]]></content>
    
    
    <categories>
      
      <category>创业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>A Tour of Computer System</title>
    <link href="/2020/03/03/CSAPP-A%20Tour%20of%20Computer%20System/"/>
    <url>/2020/03/03/CSAPP-A%20Tour%20of%20Computer%20System/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>计算机的五大基础部件是：存储器、控制器、运算器、输入和输出设备。</p><p>存储器分为: 磁盘和内存。</p><blockquote><p>Note:</p><p>磁盘和内存的区别:</p><p>磁盘和内存都是存储设备。</p><p><code>内存</code>通过电流来实现存储。</p><p><code>磁盘</code>通过磁记录技术来实现存储。</p></blockquote><h2 id="主存-Main-Memory"><a href="#主存-Main-Memory" class="headerlink" title="主存(Main Memory)"></a>主存(Main Memory)</h2><h4 id="一、什么是主存"><a href="#一、什么是主存" class="headerlink" title="一、什么是主存?"></a>一、什么是主存?</h4><p>一般内存指的就是主存（负责存储CPU中运行的程序和数据）。</p><p><strong>作用:</strong></p><p>存放CPU中的运算数据，以及与硬盘等外部存储设备交换的数据。</p><p>只要计算机在运行中，CPU就会把需要运算的数据调到主存中进行运算，当运算完成后CPU再将结果传送出来。</p><h3 id="二、主存的物理结构"><a href="#二、主存的物理结构" class="headerlink" title="二、主存的物理结构"></a>二、主存的物理结构</h3><blockquote><p>Physically,main memory consists of a collection of <code>dynamic random access memory(DRAM)</code> chips.</p></blockquote><p><img src="https://imgkr.cn-bj.ufileos.com/f9f48492-ffad-4df8-8f34-68b3ac278dc2.png"></p><h4 id="2-1-IC电路中主要的三种存储器"><a href="#2-1-IC电路中主要的三种存储器" class="headerlink" title="2.1 IC电路中主要的三种存储器"></a>2.1 IC电路中主要的三种存储器</h4><p>内存的内部是由各种<code>IC电路</code>组成的，它的种类很庞大，但是主要分为三种存储器:</p><p><strong>随机存储器(RAM):</strong>  内存中最重要的一种，表示既可以从中读取数据，也可以写入数据。当机器关闭时，内存中的信息会丢失。</p><p><strong>只读存储器(ROM)：</strong> ROM一般只能用于数据的读取，    不能写入数据，但是当机器停电的时候，这些数据不会丢失。</p><p><strong>高速缓存(Cache):</strong>  Cache也是我们经常见到的，它分为一级缓存（L1 Cache）、二级缓存(L2 Cache)、三级缓存(L3 Cache)。这些数据，它位于内存和CPU之间，是一个读写速度比内存更快的存储器。当CPU写入数据时，这些数据也会被写入高速缓存中。当CPU需要读取数据时，会直接从高速缓存中直接读取，当然，如需要的数据在Cache中没有，CPU会再去读取内存中的数据。</p><h4 id="2-2-内存IC结构及其数据存储"><a href="#2-2-内存IC结构及其数据存储" class="headerlink" title="2.2 内存IC结构及其数据存储"></a>2.2 内存IC结构及其数据存储</h4><p><code>内存 IC</code> 是一个完整的结构，它内部也有电源、地址信号、数据信号、控制信号和用于寻址的 IC 引脚来进行数据的读写。下面是一个虚拟的 IC 引脚示意图</p><p><img src="C:\Users\fenghaolin\AppData\Roaming\marktext\images\2020-03-02-15-18-29-image.png"></p><p><code>D0 - D7</code> 表示的是数据信号，也就是说，一次可以输入输出 8 bit = 1 byte 的数据。</p><p><code>A0 - A9</code> 是地址信号共十个，表示可以指定 00000 00000 - 11111 11111 共 2 的 10次方 = 1024个地址。</p><p>每个地址都会存放 1 byte 的数据，因此我们可以得出内存 IC 的容量就是 1 KB。</p><blockquote><p>Logically,memory is organized as a linear array of bytes, each with its own unique address(array index) starting at zero.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac终端利器iTerm2实现ssh连接</title>
    <link href="/2020/02/29/Mac%E7%BB%88%E7%AB%AF%E5%88%A9%E5%99%A8iTerm2%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/02/29/Mac%E7%BB%88%E7%AB%AF%E5%88%A9%E5%99%A8iTerm2%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Mac终端利器iTerm2实现ssh连接"><a href="#Mac终端利器iTerm2实现ssh连接" class="headerlink" title="Mac终端利器iTerm2实现ssh连接"></a>Mac终端利器iTerm2实现ssh连接</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>通过Mac OS x 系统下的终端利器Item2实现ssh远程连接</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="第一步-新建shell文件"><a href="#第一步-新建shell文件" class="headerlink" title="第一步: 新建shell文件"></a>第一步: 新建shell文件</h4><blockquote><p>笔者偏好讲shell文件放置在/Users/admin/Documents/ssh目录下，读者可以根据自己的喜好自行放置</p></blockquote><p>首先在/Users/admin/Documents/ssh目录下新建一个以.sh为后缀的文件，文件名根据个人喜好命名，假定笔者将其命名为server.sh</p><blockquote><p>Note: 现在你的ssh文件的目录为/Users/admin/Documents/ssh/server.sh</p></blockquote><h4 id="第二步-填写脚本代码"><a href="#第二步-填写脚本代码" class="headerlink" title="第二步: 填写脚本代码"></a>第二步: 填写脚本代码</h4><p>打开server.sh文件，并填写如下内容:</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/expect -f</span>    set port 22    set user dante  set host 这里填写你要连接的服务器的IP  set password 这里填写你要连接的服务器的登录密码  set timeout -1     spawn ssh -p$port $user@$host    expect &quot;*assword:*&quot;    send &quot;$password\r&quot;    interact    expect eof</code></pre><blockquote><p>Note: 本文不针对脚本中的代码进行解释说明，感兴趣的读者可自行通过搜索引擎寻求答案。</p></blockquote><h4 id="第三步：-配置iTerm2的profile"><a href="#第三步：-配置iTerm2的profile" class="headerlink" title="第三步： 配置iTerm2的profile"></a>第三步： 配置iTerm2的profile</h4><p>假定你已经安装好了iTerm2了，现在请你打开iTem2终端。</p><p>此时，你会看到屏幕顶端的菜单栏：</p><p><code>iTerm2</code>  <code>Shell</code> <code>Edit</code> <code>View</code> <code>Session</code> <code>Profiles</code> <code>Toolbelt</code> <code>Windows</code> <code>Help</code></p><p><img src="/images/image-20200229013028044.png" alt="image-20200229013028044"></p><p>[x] 选择<code>iTem2</code>–&gt;<code>Preferences...</code>,进入偏好设置页面，不出意外的话，你将见到菜单栏:</p><p><code>General</code> <code>Appearance</code> <code>Profiles</code> <code>Key</code> <code>Arrangements</code> <code>Pointer</code> <code>Advanced</code></p><p>[x] 选择<code>Profiles</code>，新增一个profile，命名为server，Command选择<code>Custom Shell</code>，配置路径为<code>/Users/admin/Documents/ssh/server.sh</code>，然后关闭窗口即可。</p><p><img src="/images/image-20200229011920187.png" alt="image-20200229011920187"></p><h4 id="第四步：在终端主页面选择profiles菜单下的server"><a href="#第四步：在终端主页面选择profiles菜单下的server" class="headerlink" title="第四步：在终端主页面选择profiles菜单下的server"></a>第四步：在终端主页面选择profiles菜单下的server</h4><blockquote><p>Note: 一般来说，你需要先手动通过<code>ssh -p$port $user@$host  </code>命令先手动连接一次。然后在通过选择iTerm2终端菜单栏Profiles里边配置的<code>服务器连接</code></p></blockquote><p><img src="/images/image-20200229013441719.png" alt="image-20200229013441719"></p>]]></content>
    
    
    <categories>
      
      <category>利器</category>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>利器</tag>
      
      <tag>Item2</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Karabiner-Elements</title>
    <link href="/2020/02/29/Karabiner-Elements/"/>
    <url>/2020/02/29/Karabiner-Elements/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>由于 Mac 的键盘和主流布局不一致，许多人都会遇到外接键盘布局不适应的情况；即便是 Mac 的内置键盘，也有人觉得其设计不够合理，不符合自己的工作习惯。好在键盘和使用者之间是可以磨合的，<a href="https://pqrs.org/osx/karabiner/">Karabiner-Elements</a> 就是 Mac 上一款非常好用的开源改键利器，能让键盘顺着你的意愿来工作。</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><a href="https://pqrs.org/osx/karabiner/document.html#usage">安装</a> 完后会有两个应用，一个是 <code>Karabiner-Elements</code>，另一个是 <code>Karabiner-EventViewer</code>。</p><p>第一个是改键用的主程序，第二个是键鼠事件的监听器，当你不知道目前键盘的某个物理按键对应的是哪个键位, 可以使用这个查看。</p><h2 id="Karabiner-Elements"><a href="#Karabiner-Elements" class="headerlink" title="Karabiner-Elements"></a>Karabiner-Elements</h2><h3 id="Simple-Modifications"><a href="#Simple-Modifications" class="headerlink" title="Simple Modifications"></a><a href="https://pqrs.org/osx/karabiner/document.html#configuration-simple-modifications">Simple Modifications</a></h3><p>简单改键: 将某一个键位更改为另一个键位</p><p>用法:</p><ol><li>先在 <code>Target Device</code> 中选择需要修改的键盘, 可以选择 <code>For all devices</code> 或只针对某一个键盘</li><li>点击 <code>Add item</code> 来增加一对按键映射</li><li><code>From key</code> 是物理按键, <code>To key</code> 是你想映射的按键</li><li>如果不知道键盘上某一个物理按键的名字, 可以在 <code>Karabiner-EventViewer</code> 查询</li><li>修改完后也可以在 <code>Karabiner-EventViewer</code> 中查看是否修改成功</li></ol><h3 id="Function-Keys"><a href="#Function-Keys" class="headerlink" title="Function Keys"></a>Function Keys</h3><p>这个主要是修改功能键 <code>F1</code> - <code>F12</code> 键位的</p><p>用法也是先选择需要修改的键盘, 再修改物理按键为映射按键</p><p>注: 如果选中左下角的 <code>Use all F1, F2, etc. keys as standard function keys</code>, 则功能键使用默认功能, 上面设置的映射键位不会生效</p><h3 id="Complex-Modifications"><a href="#Complex-Modifications" class="headerlink" title="Complex Modifications"></a><a href="https://pqrs.org/osx/karabiner/document.html#configuration-complex-modifications">Complex Modifications</a></h3><p>复杂改键, 修改组合键位来实现自定义事件</p><p>这里主要介绍一下用 <code>Karabiner-Elements</code> 打造 <code>Vim</code> 风格的方向键。也许你对这个词感到陌生，还会奇怪，干嘛放着 MacBook 上好好的方向键不用？其实，Mac 自带键盘的方向键位于右下角，打字时把爪子挪过去点很不方便，而 <code>Vim</code> 式的操作中，可以挪用 <code>HJKL</code> 四枚按键，调教一下充当方向键，打字时手掌都不用抬起，就能实现光标的移动，很快捷。</p><ol><li>点击左下角的 <code>Add rule</code> 来添加组合键</li><li>软件自带的 <code>Vim</code> 风格的方向键为 <code>right_command + hjkl</code> 来代替方向键, 在 <code>Examples</code> 中可以找到, 点击右侧的 <code>Enable</code> 即可加入到组合键位中, 但实际使用起来有点费劲</li><li>在 <a href="https://pqrs.org/osx/karabiner/complex_modifications/#emulation-modes">官网的 complex_modifications</a> 找到 <code>Vi Mode (rev 5)</code>, 展开后有详细的组合键位说明. 点击右侧的 <code>import</code> 来下载下来, 并导入到软件中.</li><li>重复第一步和第二步, 你可以选择 <code>s</code> 作为触发键, 也可以选择 <code>d</code> 作为触发键, 或者两者都作为触发键</li><li>无法正常使用? 其实官网展开后的键位使用说明最后有这么一句话: Please change your <code>simultaneous_threshold_milliseconds</code> setting in Karabiner-Elements → Complex Modifications → Parameters; A value between 150 and 500 is recommended for this mode. 说白了就是两个按键之间的等待值, 默认是 <code>50ms</code>, 但一般人没法做到组合键这么小的间隔, 就只能调高等待值, 我一般设置为 <code>300</code>, 既不影响打字, 也不影响组合键</li><li>如果不想要某一个组合键, 点击右侧的 <code>Remove</code> 即可移除. 下面的 <code>Up</code> 和 <code>Down</code> 可以排序</li><li>当然官网还有很多组合键, 可以找到自己需要的</li></ol><h3 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a><a href="https://pqrs.org/osx/karabiner/document.html#configuration-devices">Devices</a></h3><p>显示此 Mac 中当前连接了哪些键鼠设备</p><p>如果连接了外部键盘，也可以禁用 MacBook 内置键盘。</p><p>在 <code>Disable the built-in keyboard while one of the following selected devices is connected.</code> 列表中选择需要使用的键盘, 即可禁用内置键盘, 如果都不勾选, 默认都可以使用</p><h3 id="Virtual-Keyboard"><a href="#Virtual-Keyboard" class="headerlink" title="Virtual Keyboard"></a>Virtual Keyboard</h3><p>虚拟键盘</p><p>这个一般不需要修改</p><p>但如果使用了具有相同 <code>vendor</code>(供应商) id (Ox16cO) 和 <code>product</code> (产品) id (Ox27db) 的其他设备, 那就需要修改了</p><h3 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h3><p>配置列表</p><p>在界面上的 <code>Profiles</code> 标签内，可以添加、删除和选中某个配置，<code>select</code> 选中某个配置之后，所有对键位的更改都会保存在当前 <code>select</code> 的这套配置内，比如可以根据使用的键盘不同维护多套配置，以便在使用不同输入设备时切换。</p><p>另外，Karabiner 的所有配置都以 <code>JSON</code> 格式文件保存在：<code>~/.config/karabiner/karabiner.json</code> 目录，如果在网上看到别人给出的配置需要编辑 <code>karabiner.json</code> 文件加到其中，如果需要备份配置则可以直接备份这个目录。</p><p>也可以通过点击菜单栏图标来切换配置</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><a href="https://pqrs.org/osx/karabiner/document.html#quit">Misc</a></h3><p>其他配置, 包含重置 / 退出 / 更新 / 卸载等</p><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p>日志, 纪录软件运行的一些参数</p><h2 id="Karabiner-EventViewer"><a href="#Karabiner-EventViewer" class="headerlink" title="Karabiner-EventViewer"></a>Karabiner-EventViewer</h2><p>Karabiner 提供了查看每个键位代码名称的工具 <code>Karabiner-EventViewer</code>，打开该工具，随后的所有按键操作都会在界面上显示明细，如果有不清楚名称的按键，查看界面中 <code>name</code> 一栏，配置映射时选择对应名称的键位即可。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://pqrs.org/osx/karabiner/document.html">Karabiner Elements</a></li><li><a href="https://sspai.com/post/42921s">让键盘变成你想要的样子：改键利器 Karabiner-Elements</a></li><li><a href="https://www.jianshu.com/p/47d5de7f12bc">Karabiner Elements 键位定制神器</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>利器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown文档风格指南</title>
    <link href="/2020/02/26/Markdown%E6%96%87%E6%A1%A3%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <url>/2020/02/26/Markdown%E6%96%87%E6%A1%A3%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://i.loli.net/2020/02/26/mRSVTMtjgHL6DXW.jpg"></a></p><p>1.标题</p><hr><h3 id="1-1层级"><a href="#1-1层级" class="headerlink" title="1.1层级"></a>1.1层级</h3><p>标题分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>下面是示例。</p><pre><code class="hljs clean"># 一级标题## 二级标题### 三级标题#### 四级标题</code></pre><h3 id="1-2原则"><a href="#1-2原则" class="headerlink" title="1.2原则"></a>1.2原则</h3><p>（1）一级标题下，不能直接出现三级标题。</p><p>示例：下面的文章结构，缺少二级标题。</p><pre><code class="hljs clean"># 一级标题### 三级标题</code></pre><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p><p>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</p><pre><code class="hljs clean">## 二级标题 A### 三级标题 A## 二级标题 B</code></pre><p>（3）下级标题不重复上一级标题的名字。</p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><pre><code class="hljs clean">## 概述### 概述</code></pre><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p>示例：下面的结构二要好于结构一。后者适用的场景，主要是较长篇幅的内容。</p><pre><code class="hljs clean">结构一### 三级标题#### 四级标题 A#### 四级标题 B#### 四级标题 C结构二### 三级标题**（<span class="hljs-number">1</span>）A****（<span class="hljs-number">2</span>）B****（<span class="hljs-number">3</span>）C**</code></pre><h2 id="2-文本"><a href="#2-文本" class="headerlink" title="2.文本"></a>2.文本</h2><h3 id="2-1字间距"><a href="#2-1字间距" class="headerlink" title="2.1字间距"></a>2.1字间距</h3><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p><pre><code class="hljs">错误：本文介绍如何快速启动Windows系统。正确：本文介绍如何快速启动 Windows 系统。</code></pre><p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><pre><code class="hljs tap">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。正确：2011 年<span class="hljs-number"> 5 </span>月<span class="hljs-number"> 15 </span>日，我订购了<span class="hljs-number"> 5 </span>台笔记本电脑与<span class="hljs-number"> 10 </span>台平板电脑。</code></pre><p>半角的百分号，视同阿拉伯数字。</p><p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p><pre><code class="hljs tap">错误：一部容量为<span class="hljs-number"> 16 </span>GB 的智能手机正确：一部容量为 16GB 的智能手机</code></pre><p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><pre><code class="hljs">错误：他的电脑是 MacBook Air 。正确：他的电脑是 MacBook Air。</code></pre><h3 id="2-2-句子"><a href="#2-2-句子" class="headerlink" title="2.2 句子"></a>2.2 句子</h3><ul><li>避免使用长句。句子内部不使用逗号时，总长度不应该超过 40 个字；使用逗号时，总长度不应该超过 100 字或者正文的 3 行。</li><li>尽量使用简单句和并列句，避免使用复合句。</li></ul><h3 id="2-3写作风格"><a href="#2-3写作风格" class="headerlink" title="2.3写作风格"></a>2.3写作风格</h3><p>1、尽量不使用被动语态，改为使用主动语态。</p><pre><code class="hljs">错误：假如此软件尚未被安装，正确：假如尚未安装这个软件，</code></pre><p>2、不使用非正式的语言风格。</p><pre><code class="hljs">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！正确：无法参加本次活动，我深感遗憾。</code></pre><p>3、不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p><pre><code class="hljs">错误：这是唯二的快速启动的方法。正确：这是仅有的两种快速启动的方法。</code></pre><p>4、用对”的”、”地”、”得”。</p><pre><code class="hljs">她露出了开心的笑容。（形容词＋的＋名词）她开心地笑了。（副词＋地＋动词）她笑得很开心。（动词＋得＋副词）</code></pre><p>5、使用代词时（比如”其”、”该”、”此”、”这”等词），必须明确指代的内容，保证只有一个含义。</p><pre><code class="hljs">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</code></pre><p>6、名词前不要使用过多的形容词。</p><pre><code class="hljs">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</code></pre><p>7、不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p><pre><code class="hljs">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</code></pre><p>8、同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><pre><code class="hljs">错误：请确认没有接通装置的电源。正确：请确认装置的电源已关闭。</code></pre><p>9、避免使用双重否定句。</p><pre><code class="hljs">错误：没有删除权限的用户，不能删除此文件。正确：用户必须拥有删除权限，才能删除此文件。</code></pre><h3 id="2-4英文处理"><a href="#2-4英文处理" class="headerlink" title="2.4英文处理"></a>2.4英文处理</h3><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><pre><code class="hljs lasso">英文：⋯information stored <span class="hljs-keyword">in</span> random access memory (RAMs)⋯中文：<span class="hljs-params">...</span><span class="hljs-params">...</span>存储在随机存取存储器（RAM）里的信息<span class="hljs-params">...</span><span class="hljs-params">...</span></code></pre><p>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p><pre><code class="hljs erlang">U.S.A.Apple, Inc.</code></pre><p>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>......</code>）。</p><pre><code class="hljs vim">英文：<span class="hljs-number">5</span> minutes <span class="hljs-keyword">later</span>⋯中文：<span class="hljs-number">5</span> 分钟过去了⋯⋯</code></pre><p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p><pre><code class="hljs stata">英文：<span class="hljs-keyword">He</span> published <span class="hljs-keyword">an</span> article entitled <span class="hljs-string">&quot;The Future of the Aviation&quot;</span>.中文：他发表了一篇名为《航空业的未来》的文章。</code></pre><p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><pre><code class="hljs 1c">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用<span class="hljs-string">&quot;IOC&quot;</span>了。</code></pre><p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;American Association of Physicists in Medicine&quot;</span>（美国医学物理学家协会）是专有名词，需要大写。<span class="hljs-string">&quot;online transaction processing&quot;</span>（在线事务处理）不是专有名词，不应大写。</code></pre><h2 id="3-段落"><a href="#3-段落" class="headerlink" title="3.段落"></a>3.段落</h2><h3 id="3-1原则"><a href="#3-1原则" class="headerlink" title="3.1原则"></a>3.1原则</h3><ul><li>一个段落只能有一个主题，或一个中心句子。</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li><li>段落之间使用一个空行隔开。</li><li>段落开头不要留出空白字符。</li></ul><h3 id="3-2引用"><a href="#3-2引用" class="headerlink" title="3.2引用"></a>3.2引用</h3><p>引用第三方内容时，应注明出处。</p><pre><code class="hljs vhdl">One man<span class="hljs-symbol">&#x27;s</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">is</span> another man<span class="hljs-symbol">&#x27;s</span> <span class="hljs-keyword">variable</span>. <span class="hljs-comment">--- Alan Perlis</span></code></pre><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><pre><code class="hljs">本文转载自 WikiQuote</code></pre><p>使用外部图片时，必须在图片下方或文末标明来源。</p><pre><code class="hljs">本文部分图片来自 Wikipedia</code></pre><h2 id="4-数值"><a href="#4-数值" class="headerlink" title="4.数值"></a>4.数值</h2><h3 id="4-1半角数字"><a href="#4-1半角数字" class="headerlink" title="4.1半角数字"></a>4.1半角数字</h3><p>数字一律使用半角形式，不得使用全角形式。</p><pre><code class="hljs yaml"><span class="hljs-string">错误：</span> <span class="hljs-string">这件商品的价格是１０００元。</span><span class="hljs-string">正确：</span> <span class="hljs-string">这件商品的价格是</span> <span class="hljs-number">1000</span> <span class="hljs-string">元。</span></code></pre><h3 id="4-2千分号"><a href="#4-2千分号" class="headerlink" title="4.2千分号"></a>4.2千分号</h3><p>数值为千位以上，应添加千分号（半角逗号）。</p><pre><code class="hljs apache"><span class="hljs-attribute">XXX</span> 公司的实收资本为 RMB1,<span class="hljs-number">258</span>,<span class="hljs-number">000</span>。</code></pre><p>对于 4 ～ 6 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于7位及以上的数值，千分号是必须的。</p><p>多位小数要从小数点后从左向右添加千分号，比如<code>4.234,345</code>。</p><h3 id="4-3货币"><a href="#4-3货币" class="headerlink" title="4.3货币"></a>4.3货币</h3><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$1</span>,000</span><span class="hljs-number">1</span>,<span class="hljs-number">000</span> 美元</code></pre><h3 id="4-4数值范围"><a href="#4-4数值范围" class="headerlink" title="4.4数值范围"></a>4.4数值范围</h3><p>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的”连接号”部分。</p><p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p><pre><code class="hljs gcode">错误：<span class="hljs-number">132</span>～<span class="hljs-number">234</span>kg正确：<span class="hljs-number">132</span>kg～<span class="hljs-number">234</span>kg错误：<span class="hljs-number">67</span>～<span class="hljs-number">89</span><span class="hljs-meta">%</span>正确：<span class="hljs-number">67</span><span class="hljs-meta">%</span>～<span class="hljs-number">89</span><span class="hljs-meta">%</span></code></pre><h3 id="4-5变化程度的表示法"><a href="#4-5变化程度的表示法" class="headerlink" title="4.5变化程度的表示法"></a>4.5变化程度的表示法</h3><p>数字的增加要使用”增加了”、”增加到”。”了”表示增量，”到”表示定量。</p><pre><code class="hljs">增加到过去的两倍（过去为一，现在为二）增加了两倍（过去为一，现在为三）</code></pre><p>数字的减少要使用”降低了”、”降低到”。”了”表示增量，”到”表示定量。</p><pre><code class="hljs">降低到百分之八十（定额是一百，现在是八十）降低了百分之八十（原来是一百，现在是二十）</code></pre><p>不能用”降低N倍”或”减少N倍”的表示法，要用”降低百分之几”或”减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h2 id="5-标点符号"><a href="#5-标点符号" class="headerlink" title="5.标点符号"></a>5.标点符号</h2><h3 id="5-1原则"><a href="#5-1原则" class="headerlink" title="5.1原则"></a>5.1原则</h3><ul><li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。</li><li>如果整句为英文，则该句使用英文/半角标点。</li><li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</li></ul><h3 id="5-2句号"><a href="#5-2句号" class="headerlink" title="5.2句号"></a>5.2句号</h3><p>中文语句中的结尾处应该用全角句号（<code>。</code>）。</p><p>句子末尾用括号加注时，句号应在括号之外。</p><pre><code class="hljs tap">错误：关于文件的输出，请参照第 1.3 节（见第<span class="hljs-number"> 26 </span>页。）正确：关于文件的输出，请参照第 1.3 节（见第<span class="hljs-number"> 26 </span>页）。</code></pre><h3 id="5-3逗号"><a href="#5-3逗号" class="headerlink" title="5.3逗号"></a>5.3逗号</h3><p>逗号<code>，</code>表示句子内部的一般性停顿。</p><p>注意避免”一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><h3 id="5-4顿号"><a href="#5-4顿号" class="headerlink" title="5.4顿号"></a>5.4顿号</h3><p>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p><pre><code class="hljs">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</code></pre><p>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p><pre><code class="hljs arcade">例句：Microsoft Office <span class="hljs-built_in">includes</span> Word, Excel, PowerPoint, Outlook and other components.</code></pre><h3 id="5-5分号"><a href="#5-5分号" class="headerlink" title="5.5分号"></a>5.5分号</h3><p>分号<code>；</code>表示复句内部并列分句之间的停顿。</p><h3 id="5-6引号"><a href="#5-6引号" class="headerlink" title="5.6引号"></a>5.6引号</h3><p>引用时，应该使用全角双引号（<code>&quot; &quot;</code>），注意前后双引号不同。</p><pre><code class="hljs 1c">例句：许多人都认为客户服务的核心是<span class="hljs-string">&quot;友好&quot;</span>和<span class="hljs-string">&quot;专业&quot;</span>。</code></pre><p>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>&#39; &#39;</code>），注意前后单引号不同。</p><pre><code class="hljs scilab">例句：鲍勃解释道：<span class="hljs-string">&quot;我要放音乐，可萨利说，&#x27;</span>不行！<span class="hljs-string">&#x27;。&quot;</span></code></pre><h3 id="5-7圆括号"><a href="#5-7圆括号" class="headerlink" title="5.7圆括号"></a>5.7圆括号</h3><p>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</p><pre><code class="hljs">例句：请确认所有的连接（电缆和接插件）均安装牢固。</code></pre><h3 id="5-8冒号"><a href="#5-8冒号" class="headerlink" title="5.8冒号"></a>5.8冒号</h3><p>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p><pre><code class="hljs">例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。</code></pre><p>表示时间时，应使用半角冒号（<code>:</code>）。</p><pre><code class="hljs">例句：早上 8:00</code></pre><h3 id="5-9省略号"><a href="#5-9省略号" class="headerlink" title="5.9省略号"></a>5.9省略号</h3><p>省略号<code>......</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p><p>省略号不应与”等”这个词一起使用。</p><pre><code class="hljs lasso">错误：我们为会餐准备了香蕉、苹果、梨<span class="hljs-params">...</span>等各色水果。正确：我们为会餐准备了各色水果，有香蕉、苹果、梨<span class="hljs-params">...</span><span class="hljs-params">...</span>正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</code></pre><h3 id="5-10感叹号"><a href="#5-10感叹号" class="headerlink" title="5.10感叹号"></a>5.10感叹号</h3><p>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</p><p>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p><h3 id="5-11破折号"><a href="#5-11破折号" class="headerlink" title="5.11破折号"></a>5.11破折号</h3><p>破折号<code>------------</code>一般用于进一步解释。</p><p>破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p><pre><code class="hljs brainfuck"><span class="hljs-comment">例句：直觉</span><span class="hljs-literal">------------</span><span class="hljs-comment">尽管它并不总是可靠的</span><span class="hljs-literal">------------</span><span class="hljs-comment">告诉我，这事可能出了些问题。</span><span class="hljs-comment">例句：直觉</span> <span class="hljs-literal">------</span> <span class="hljs-comment">尽管它并不总是可靠的</span> <span class="hljs-literal">------</span> <span class="hljs-comment">告诉我，这事可能出了些问题。</span></code></pre><h3 id="5-12连接号"><a href="#5-12连接号" class="headerlink" title="5.12连接号"></a>5.12连接号</h3><p>连接号用于连接两个类似的词。</p><p>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p><ul><li>两个名词的复合</li><li>图表编号</li></ul><pre><code class="hljs subunit">例句：氧化-还原反应例句：图 1<span class="hljs-string">-1</span></code></pre><p>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</p><ul><li>数值范围（例如日期、时间或数字）</li></ul><pre><code class="hljs">例句：2009 年～2011 年</code></pre><p>注意，波浪连接号前后两个值都应该加上单位。</p><p>波浪连接号也可以用汉字”至”代替。</p><pre><code class="hljs mathematica">例句：周围温度：<span class="hljs-operator">-</span><span class="hljs-number">20</span>°<span class="hljs-built_in">C</span> 至 <span class="hljs-operator">-</span><span class="hljs-number">10</span>°<span class="hljs-built_in">C</span></code></pre><h2 id="6-文档体系"><a href="#6-文档体系" class="headerlink" title="6.文档体系"></a>6.文档体系</h2><h3 id="6-1结构"><a href="#6-1结构" class="headerlink" title="6.1结构"></a>6.1结构</h3><p>软件手册是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li><li><strong>入门篇</strong>（Basics）： [必备] [目录] 又称”使用篇”，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li><li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li></ul></li><li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称”开发篇”，提供中高级的开发教程</li><li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li><li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li><li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>Glossary</strong>：[可选] [文件] 名词解释</li><li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li><li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li><li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li><li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li></ul></li></ul><p>下面是两个真实范例，可参考。</p><ul><li><a href="http://redux.js.org/index.html">Redux 手册</a></li><li><a href="http://flight-manual.atom.io/">Atom 手册</a></li></ul><h3 id="6-2文件名"><a href="#6-2文件名" class="headerlink" title="6.2文件名"></a>6.2文件名</h3><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><pre><code class="hljs dos">错误： 名词解释.<span class="hljs-built_in">md</span>正确： glossary.<span class="hljs-built_in">md</span></code></pre><p>文件名建议只使用小写字母，不使用大写字母。</p><pre><code class="hljs dos">错误：TroubleShooting.<span class="hljs-built_in">md</span>正确：troubleshooting.<span class="hljs-built_in">md</span></code></pre><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><pre><code class="hljs dos">不佳：advanced_usage.<span class="hljs-built_in">md</span>正确：advanced-usage.<span class="hljs-built_in">md</span></code></pre><h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7.参考链接"></a>7.参考链接</h2><ul><li><a href="http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html">产品手册中文写作规范</a>, by 华为</li><li><a href="http://docs.daocloud.io/write-docs/format">写作规范和格式规范</a>, by DaoCloud</li><li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li><li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf">简体中文规范指南</a>, by lengoo</li><li><a href="https://open.leancloud.cn/copywriting-style-guide.html">文档风格指南</a>, by LeanCloud</li><li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit">豌豆荚文案风格指南</a>, by 豌豆荚</li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a>, by sparanoid</li><li><a href="http://w3c.github.io/clreq/">中文排版需求</a>, by W3C</li><li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html">为什么文件名要小写？</a>, by 阮一峰</li><li><a href="https://developers.google.com/style/">Google Developer Documentation Style Guide</a>, by Google</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Travis CI 持续集成</title>
    <link href="/2020/02/25/Travis%20CI%20%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <url>/2020/02/25/Travis%20CI%20%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Travis-CI-持续集成"><a href="#Travis-CI-持续集成" class="headerlink" title="Travis CI 持续集成"></a>Travis CI 持续集成</h1><p>[TOC]</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><blockquote><p> <strong>持续集成(Continuous Integration):</strong> 是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建(包括自动测试)的检验，以尽快发现集成错误。</p></blockquote><h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h3><blockquote><p>Travis CI 是目前新兴开源持续集成构建项目，它与jenkins，GO的明显差别再约采用yaml格式，同时它是在线的服务，不想jenkins需要你在本地搭建服务，简介清新独树一帜。目前大多数的Github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整的构建。对于做开源项目或者Github的使用者，如果你项目还没有加入Travis CI构建队列，那你真的是out of date了。</p></blockquote><h3 id="User-Guide"><a href="#User-Guide" class="headerlink" title="User Guide"></a>User Guide</h3><p>First time here ? Let ‘s get you started !</p><ol><li><p>Activate your GitHub repositories</p><p>激活你的Github仓库。</p></li><li><p>Add a .travis.yml file to your repository</p><p>在你的仓库添加<code>.travis.yml</code> [^1] 配置文件。</p></li><li><p>Trigger your first build</p></li></ol><p>[^1]</p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>持续集成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh两条命令，实现内网穿透</title>
    <link href="/2019/12/10/ssh%E4%B8%A4%E6%9D%A1%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2019/12/10/ssh%E4%B8%A4%E6%9D%A1%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ssh两条命令，实现内网穿透"><a href="#ssh两条命令，实现内网穿透" class="headerlink" title="ssh两条命令，实现内网穿透"></a>ssh两条命令，实现内网穿透</h1><blockquote><p>ssh的功能灰常强大，除了平时用于终端，其实还有一些更实用的功能。比如本地/远程端口转发，动态端口转发  等。本文介绍的就是基本ssh的端口的本地/远程端口转发，实现内网穿透的实战 </p></blockquote><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ol><li>你需要要有一台 <code>公网的服务器 </code>(有没有域名都可以，但需要有公网可访问的ip噢)[后文用 <code>ali‐yun </code>作为公网标记]  </li><li>家里/公司有一台可以连接至外网的机器[后文用 <code>house </code>作为标记]</li></ol><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h4><p><strong>这种是一种比较复杂的方法</strong></p><p>配置思路：在 <code>house</code>上做到 <code>阿里云服务器</code>的反向代理；在 B 机器上做正向代理本地端口转发。</p><ol><li><code>house</code>机器利用ssh -R，建立通道 </li></ol><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -R <span class="hljs-number">8081</span>:localhost:<span class="hljs-number">8443</span> 用户名@阿里云的ip</code></pre><p>根据提示输入密码.到这里<code>house</code>的8443端口已经映射到阿里云服务器的8081端口，可以在通过服务器的8081(记得去ECS开启安全组)端口访问<code>house</code>的8443端口，但注意只支持阿里云服务器本地访问。</p><ol start="2"><li><code>ali-yun</code>机器利用ssh -L，将本机端口共享出去<blockquote><p>note: 建立<code>阿里云服务器</code>上的正向代理用作本地转发(在<code>阿里云服务器</code>上操作)因为绑定后的端口只支持服务器B本地访问，所以我们需要把已经映射的端口转发出去。</p></blockquote><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -L *:<span class="hljs-number">8081</span>:localhost:<span class="hljs-number">8082</span> root@localhost</code></pre>现在可以通过<code>阿里云服务器</code>的8081端口访问到<code>house</code>的8443端口。</li></ol><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h4><p><strong>直接建立一个可对外访问的连接</strong></p><ol><li>修改公网机器的/etc/ssh/sshd_config </li></ol><pre><code class="hljs nginx"><span class="hljs-attribute">GatewayPorts</span> <span class="hljs-literal">yes</span></code></pre><ol start="2"><li>重启sshd服务  </li></ol><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart sshd</span></code></pre><ol start="3"><li>house 机器直接建立连接  </li></ol><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -R <span class="hljs-number">8081</span>:localhost:<span class="hljs-number">8443</span> 用户名@阿里云的ip</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/08/28/hello-world/"/>
    <url>/2019/08/28/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>眼里的光</title>
    <link href="/2019/05/15/%E7%9C%BC%E9%87%8C%E7%9A%84%E5%85%89/"/>
    <url>/2019/05/15/%E7%9C%BC%E9%87%8C%E7%9A%84%E5%85%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>也许只有彻底放手的时候，<br>才会真的明白这些事。<br>比如一个人逍遥自在也挺好<br>比如有些人爱的从来都不是你。<br>而是他自己<br>比如每当你喜欢一个人<br>那个人就开始发光<br>站在海上是灯塔<br>挂在天上是明星<br>等到终于慢慢不喜欢了，<br>光芒也就随之黯淡下去。<br>然后才能看清，<br>原来他只是这世上最普通的一人<br>只因你得注目才熠熠生辉</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>谈职业扩展性</title>
    <link href="/2019/05/03/%E8%B0%88%E8%81%8C%E4%B8%9A%E6%89%A9%E5%B1%95%E6%80%A7/"/>
    <url>/2019/05/03/%E8%B0%88%E8%81%8C%E4%B8%9A%E6%89%A9%E5%B1%95%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>能够获得暴利的职业，都有一个共同特点：可扩展性（scaling）：一次劳动可以服务成千上万的人。</p><p>软件、电影、游戏行业都具有可扩展性，作品的生产成本是固定的，但可以被消费无数次，所以有巨大的获利空间，创造出许许多多的富豪。另一方面，理发师、厨师、出租车司机一次劳动，只能服务少数几个人，就不具有可扩展性，很难获得暴利，生存得很辛苦。</p><p>最近，我读到美国一个风险投资家的文章。他说了一句发人深思的话：</p><p>“写作是最具可扩展性的活动。你呆在家里，不去参加活动/会议，只是在网上写下自己的想法，然后你就具有了最好的可扩展性。”</p><p>我想了一下，还真是这样。你写了一篇文章，想让其他人看到，只要到处张贴就行了。每次转贴，就是扩展了一次。这比其他产品的扩展容易多了。面包师傅想要更多的人尝到自己的面包，只能多开面包店；网站要扩展，只能购买更多的服务器。相比之下，文字的扩展简直是零成本。</p><p>大公司每年花费数十亿美元用于广告，以求人们关注他们的产品。但是，一个好的作家可以免费获得这种扩展性。这就是为什么你应该把自己的想法写下来的原因，这么好的免费传播渠道，为什么不用呢？你以为，写下来不会有人看。错，其实是有人会看到的，如果他们觉得有价值，就会帮你传播出去。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《稀缺》笔记</title>
    <link href="/2019/04/30/%E7%A8%80%E7%BC%BA/"/>
    <url>/2019/04/30/%E7%A8%80%E7%BC%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>一些喜闻乐见的道理，老外更乐于去总结、归纳成一套理论，爱下定义，然后通过事实依据去论证它。<br>简单总结下：注重长远考虑，要有大局观，拥有富足的心态，做事留有余地。虚怀若谷。意志力就像肌肉，在频繁使用时会变得疲劳。如果某个人需要持续的抵御诱惑，那么意志力就会被耗尽，想了要逃离稀缺陷阱就会变得更难。日常工作生活，太多琐碎与繁复，简简单单多好。</p></blockquote><p>PS: 国文总系表达唔出粤语入边个种随性豁达既feel.两种语言两种思维方式，两个人，好分裂既感觉。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>**管窥:**专注于某一事物就意味着我们会忽略其他事物.</p><pre><code class="hljs stylus">e<span class="hljs-selector-class">.g</span>. 消防员在出警途中由于未系案例带导致坠车身亡，原因就是接到报警后消防员面临时间稀缺的问题，途中他们要制定复杂的消防策略而忽视其他事项，这是专注红利的代价。制定计划很重要，但是并不紧急，而这类事情正是管窥心态导致我们所忽略的事情。</code></pre><p>**借用:**当面对资源稀缺时，不会通过借用相应的时间或金钱来就对突发事件。从长远看，借用会进一步加剧稀缺。</p><p>**余闲:**就是我们在拥有很大的空间，不存在稀缺心态时的产物，也是我们在资源丰富时进行资源管理的特定方式，余闲可以将我们从做权衡的苦差事中解脱出来。</p><pre><code class="hljs erlang">e.g.<span class="hljs-number">1</span>.想象着你要出差，使用大行李箱收拾时，人们总是十分随意；而用小行李箱时，人们便会变得小心翼翼，思索再三。<span class="hljs-number">2</span>.圣约翰中心手术室不够用的例子，手术被延期，员工因为加班而工作效率不高，重新安排手术又额外消耗医生的精力。最终的解决方案是留下一间手术室待用。<span class="hljs-number">3</span>.道路占用率为<span class="hljs-number">70</span><span class="hljs-comment">%时达到最佳的运转状态。</span>优点：余闲是应对突发事件的利器。缺点：但在资源充裕的时期，人们容易犯下拖延的毛病。</code></pre><p>**带宽:**就是心智的容量,包含认知能力和执行控制力。稀缺会降低带宽的容量，致使我们缺乏洞察力和前瞻性，还会减弱我们的执行控制力。</p><p><img src="/images/pasted-31.png" alt="upload successful"></p><p><img src="/images/pasted-32.png" alt="upload successful"></p><p><img src="/images/pasted-33.png" alt="upload successful"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>风格感觉</title>
    <link href="/2019/04/30/%E9%A3%8E%E6%A0%BC%E6%84%9F%E8%A7%89/"/>
    <url>/2019/04/30/%E9%A3%8E%E6%A0%BC%E6%84%9F%E8%A7%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="/images/pasted-20.png" alt="upload successful"><br><em>题图：来自互联网</em>  </p><pre><code class="hljs ada">撰稿： DANTE  排版： DANTE  校对:姜野  要想抵达源泉，就必须激流勇进、逆水而上。只有垃圾才会随波逐浪、顺流而下。                <span class="hljs-comment">-- 引自 《我的职业是小说家》第四章 关于原创性</span></code></pre> <pre><code class="hljs ada"> 写作第一要素，省略掉不必要的词句。    论写作的书大多废话连篇。小说作家，包括如今的这一帮，都不太理解他们从事的工作<span class="hljs-comment">--不理解好在哪里，坏在何处。我想，书越薄，废话就越少。</span>这个废话理论有个值得一提的例外，那就是小威廉·斯特伦克和 E.B.怀特合著的《风格的要素》。这本书几乎没有，或者根本没有废话。我现在就告诉你，每个有心从事写作的人都该读读《风格的要素》。其中一章题为《写作原则》，里面的第十七条是“略掉不必要的词句”。在这本书里，我将尽力做到这一条。   节选自《写作这回事》。大部分写作者的毛病都是，废话太多。  <span class="hljs-comment">--池建强</span></code></pre><p>  <font color="blue">本周分享的是我们内部分享会的一次关于写作的内容，希望对你有帮助。</font></p><p><img src="/images/pasted-19.png" alt="upload successful"></p><center><strong>·  时  ·  代 · 背  · 景  · </strong></center><p>  随着互联网的兴起，信息传递越来越高效。很快，几乎每个领域都被少数人主导。而发出声音的人，获得影响力的效率越来越高。这就是信息时代的马太效应：强者愈强。现在已经不是仅仅靠努力工作，就能轻易获得机会的时代了。你必须通过主动发声让他人知道你的存在和价值。而写作，便是一种最便捷、最有效的发声方式。如果你想要改变现状，就需要完成被动接收者到主动输出者的转变。通过主动对外输出，持续提升影响力。当你坚持利用写作输出有价值的内容，且形成可以打动别人的个人风格时，你的影响力就会不断累积。</p><p><img src="/images/pasted-21.png" alt="upload successful"></p><p><img src="/images/pasted-22.png" alt="upload successful"></p><center><strong>·  写  ·  作 · 本  · 质  ·</strong> </center><p> <strong><em>写作的过程是信息传递的过程，而写作的本质就是优化信息传递过程中每个环节的传递效率。</em></strong> 我们常常在工作中需要书写相关的文书，而大多数情况下，很多人往往不得其法，写出的内容逻辑不通，总让人云里雾里，不知所言，难以在短时间内有效地去领会其中的意思。为何会如此呢？那是因为对于大多数人来说，他们还没形成结构化思维，没理解写作的本质是什么。如果我们把写作这件事及其相关干要素做一个抽象的结构化、流程化处理就会得到如下的一个模型：</p><p><img src="/images/pasted-23.png" alt="upload successful"></p><p><strong><font color="orange">环节1：</font></strong> 外部信息通过积累或收集，转化为我们拥有的信息</p><p><strong><font color="orange">环节2：</font></strong> 写作前的构思就是整理和加工信息的过程</p><p><strong><font color="orange">环节3：</font></strong> 将整理好的信息写作成文</p><p><strong><font color="orange">环节4：</font></strong> 信息通过媒介被接受者看见</p><p><strong><font color="orange">环节5：</font></strong> 信息被接收者理解，进而吸收</p><p><strong><font color="orange">环节6：</font></strong> 信息被接收者吸收，促使接收者产生行动</p><p> 显而易见，倘若你想写好一份文书，你应该致力于如何提高每个环节的效率。提高效率的其中一种方式就是针对每个环节进行自我发问。</p><p><img src="/images/pasted-24.png" alt="upload successful"></p><p>   我们可以根据这些问题优化自己的写作细节。不过，要系统化地解决这些问题，需要三种关键思维： <strong>逻辑思维、故事思维、受众思维。</strong>  </p><p>  逻辑思维能帮助你理清思路，受众思维能够帮你找准表达方式，故事思维则能让你讲的内容更加打动他人。这三种思维的结合，能有效降低各个环节的信息流失，让你更好地达成写作的目标。</p><p> 本段小结：</p><ol><li><p>阐述写作本质为提高信息传递模型每个环节的效率。</p></li><li><p>引申出要很好的提高效率取决于 <strong>逻辑思维、故事思维、受众思维。</strong></p></li></ol><p>  下面，我们将介绍三种思维方式在信息传递模型中的作用。</p><center><strong>·  受  ·  众 · 思  · 维  ·</strong> </center><p>  在我们过去的求学生涯里边，估计有很多同学有这样的体验–有些老师讲课风趣幽默、妙趣横生；有些则索然无味、味同嚼蜡。显然，这是授课者没有站在学生的角度去考虑如何给他们做讲解。所以，想要更好地传递信息，就要站在信息接收者的角度考虑问题，也就是本节我们要讨论的受众思维。</p><p>  写作里边就更需要我们有受众思维，换位思考。如果说逻辑思维是文字表达的基石，那么受众思维是文字表达的桥梁。基石决定了信息能否顺利地组织起来，桥梁决定了对方能否顺利接收并理解你表达的信息。</p><p>  我们在文字所表达的内容要考虑(其实就是换位思考)：</p><p>  我的读者是哪些群体？</p><p>  什么样的信息是读者(受众)感兴趣的？</p><p>  什么样的逻辑是更容易接收？</p><p>  读者能否正确解读我要表达的内容？</p><p><img src="/images/pasted-30.png" alt="upload successful"></p><p>  假设有以下一种场景：老张是一家IT公司的技术经理，上司交代他说：“老张，你那个项目临时调整，下午3点前要完成数据整理和备份工作，将现有数据整理备份，然后再检查下。你跟进一下。”</p><p><img src="/images/pasted-27.png" alt="upload successful"></p><p>从上边的结果来看，老张从传达方式上做了考虑，使用微信文字的形式，而形式上按“任务说明–&gt;工作分配–&gt;截至时间”的结构整理，这个清晰分明的结构是考虑到了环节5【吸收】中的问题：怎样的逻辑更容易让受众理解。而在工作任务分配中明确对接和时间截点是因为他考虑了环节6【行动】中的问题：我的目标是什么？(安排工作，所以要落实到细节。)</p><p>综合来说，因为充分考虑了受众思维，所以这条信息做到了简单快捷、分工明确，也方便负责的同时保存和转发。</p><p>  这就是受众思维的优势：1、提高文字的感染力 2、受众更易于去接收信息。  </p><center><strong>·  逻  ·  辑 · 思  · 维  ·</strong> </center><p> <strong><font color="orange">逻辑思维可以让我们有条理地组织信息。</font></strong> 原始信息经过有条理组织后，变成受众易于接受的形式后能大大减轻大脑的负荷。而减轻大脑负荷，也就减少了信息传递模型中 <strong>环节5</strong>的信息流失，让接收者更容易理解。</p><p><img src="/images/pasted-28.png" alt="upload successful"></p><p><img src="/images/pasted-29.png" alt="upload successful"></p><p>**<font color="orange">通过逻辑树来锻炼自己的逻辑思维。</font>**在逻辑思维中，要用到概念、判断、推理等思维形式和比较、分析、综合、抽象、概括等思维方法，而掌握和运用这些思维形式和方法的程度，也就是逻辑思维的能力。全球著名的管理咨询公司麦肯锡在分析问题时，最常使用的就是“逻辑树”。逻辑树像是一棵“有逻辑的信息树”，树根象征核心主题，树干代表关键分支，树的枝叶则是细节信息。它主要有两个功能，第一个功能是梳理已有的信息。第二个功能就是构建信息，构建信息的过程，实质上就是在构建逻辑树。</p><p><img src="/images/pasted-18.png" alt="upload successful"></p><p><img src="/images/pasted-17.png" alt="upload successful"></p><p><img src="/images/pasted-16.png" alt="upload successful"></p><center><strong>·  故 ·  事 · 思  · 维  ·  </strong></center><p>   在输出信息时，逻辑思维能帮你更有条理地组织信息，也便于接收者理解。写作之前，受众思维可以帮你换位思考，让你用接收者更容易理解的方式输出信息。而故事思维则是一种动人的信息包装方式，可以让你输出的信息更加易于被对方接收。诺贝尔经济学奖得主西蒙教授曾说：“这个时代，有价值的不再是信息，而是注意力。”是的，注意力如此重要。如果你不能吸引受众的注意力，再好的内容也无法产生作用。而想要吸引受众的注意力，往往离不开故事思维。为什么故事思维会有这样的作用呢？这是因为 <strong>冲突</strong>。多数故事都是围绕“冲突”展开的。“冲突”（Complication=冲突）它打破了一种宁静祥和的景像(Situation=背景)。它在不该出现矛盾的地方恰恰出现了，它让观众产生了一种心理落差，而正是这种落差感，让你感觉到了违反常识，一反常态，进而，让你的好奇心被激发。让你心理悬挂着一个大大的疑问(Question=提问)，基于此，作者才慢慢地给你揭开层层面纱，为你一一解答谜题。（Answer=回答）</p><p><img src="/images/pasted-15.png" alt="upload successful"></p><p> （S）在背景中，构建一个稳定场景，让人产生代入感。</p><p>  (C) 冲突部分，扰乱稳定的状态，让读者认识到有问题存在。</p><p>  (Q) 然后提问，通过提问产生转折，引起不安定感。</p><p>  (A) 最后回答，解决提出的问题，让论述有头有尾。</p><p>  通过这样4个步骤，故事感就出来了。</p><center>·  谢  ·  谢 · 观  · 看  · </center><center><strong>「优秀作品的背后一定有个出色的团队」</strong></center><p><img src="/images/pasted-14.png" alt="upload successful"></p>]]></content>
    
    
    
    <tags>
      
      <tag>推文</tag>
      
      <tag>写作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当我成为独立开发者我在干什么</title>
    <link href="/2018/11/19/%E5%BD%93%E6%88%91%E6%88%90%E4%B8%BA%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85%E6%88%91%E5%9C%A8%E5%B9%B2%E4%BB%80%E4%B9%88/"/>
    <url>/2018/11/19/%E5%BD%93%E6%88%91%E6%88%90%E4%B8%BA%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85%E6%88%91%E5%9C%A8%E5%B9%B2%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>我们糊涂地活着，像动物一样活得毫无意义。我们穿着现实的戏服，既无价值又受到忽视。</p></blockquote><hr><center><font color='blue'>-1-</font></center><p><img src="/images/pasted-1.png" alt="upload successful"></p><p> 在脆弱不堪的基础上，若有人能让你体会到心碎和一败涂地，那伟大并不是他而是你自己。醉人的夜，是的，wine in,word out。如果此时的天空，是一枚枚飞弹划破天际，热爱生命的人一定早起，像小鸟一样，他们得到的报酬将是一顿好吃又丰盛的早餐。</p><p>  无奈的是，物欲横流的人世间，生活从来不会治愈谁，你得不到解药与救赎，绝大多数人在生活的泥淖中挣扎，诗与远方只留存在旖旎芳华的书卷与理想主义者的吟咏中。</p><p>  对于大多数人而言，生活是他们几乎注意不到的恼人小事，是一种参杂着短暂愉悦的伤心事。过了很久才明白，人生最重要的不是放下，是认输。我很久没有再投笔写出如此矫情的文字，今夜或许是因为一些白兰地化学反应吧，姑且流露心绪几许，以聊慰藉，供看客叫好。</p><p>  自从7月17日离开前东家后，我以脚步丈量世界的心态奔赴我国大好河山，步履不停，行迹于上海、乌镇、周庄、苏州、杭州、北京等，与其说是走南闯北，倒不如说是将一颗无处安放的心放任自流。常言道，此心归处是吾乡，然吾心随风漂泊，无处为安。保持探索的心，在这大千世界寻寻觅觅。</p><hr><center><font color='blue'>-2-</font></center><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>   不思考的人是幸福的，他们凭借这本能和生命的定数完成了思想。而我们必须经历许多的曲折，然后凭借着生命或者社会定数才能完成。费尔南多·佩索阿，“与动物最接近的人是幸福的，因为他们毫不费劲的活着，而我们必须通过工作才能活着”。幸运地是，我们大多数的人都没有这样地活着。</p><p>   “大难过后，我们通常也只是抽抽鼻子，作为一个犹太人，以及一个普通人，他了解人类的普通本性”，海涅如是说。</p><p>   是的，每当夜幕降临之际，我时常梦魇，而这也是我决定展示这生活的另一面给亲爱的读者您。您所认知的作者，其实也是个普通人，也有常人的喜怒哀乐，五味杂陈。这也是一直困扰我许久的问题，或许，我还没能体会到生活的真谛吧。</p><hr><center><font color='blue'>-3-</font></center><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>  前面多谈心绪与笔者现状多有传递负面能量之嫌，但请读者明白，理想主义与浪漫主义情怀只能在信仰层面，回归烟火袅绕的生活，您还需要有能接纳现实主义的胸怀与气度。笔者尚属临近中年之列的无为青年，时常偶遇深渊海怪。可见，大海是多么危险的事物。它蔚蓝，辽阔，深不可测。您可能见到如此一番景象：</p><p>  <em>海边，他or她，等待一艘船。</em></p><p>  <em>山海无法触及，斑斓石头充斥着视野。</em></p><p>  <em>甚至，未曾领略过远处的风。</em></p><p>  <em>去年，梦里的船似乎从孤岛开出。</em></p><p>  <em>阅过四季的我，不见一只带着海腥的船出现。</em></p><p>  <em>我做了一只桨，闭眼在烈日下尽情摆弄。</em></p><hr><center><font color='blue'>-4-</font></center><p><img src="/images/pasted-6.png" alt="upload successful"></p><p>  9月伊始，每天奔赴泳场，像投身于汪洋般傲游。焦虑先生时常造访，偶得彻夜长谈，实属荣幸之至。每日伴着楼下大妈的广场舞神曲睁开惺忪睡眼，迎来鲜活的一天。晨起，心血来潮之际自然便成村上村树先生之《当我在跑步我在谈些什么》。白粥一碗，咸菜一碟，胜却人生无数美好。临窗而坐，嗅阳光,鸟鸣晨钟响，携一刻晨曦，似乎能看到往昔求学的种种。776路公交每日7点20许，人少，心宽。转1号线至坑口于广实游泳场，路过绿荫一道心欣然。每每游泳之后，都困意十足，归家必睡上几刻钟方能消除。生活平淡如水，便开始自学微服务相关技术栈，免于百无聊赖。</p><hr><center><font color='blue'>-5-</font></center><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>  当我听闻要作为乙方承接甲方项目之时，我内心的欣喜多余担忧。为何？因为生活所迫，迫于现实，我当下必须通过我的劳动力去换取资本。于是我欣然应允。就这样我与亲爱的读者们失联了老长一段时间呐～纵有万般对不住，也不足以平复读者的期待之余的失望。为此，我借着今夜的兴致，撰写此文，权当歉意为之。您可看到笔者在夕阳下奔跑，祭奠失去的青春。是的，我好久没跟读者们分享自己的声音，因为各种原因（其实就是生活所迫），我没能坚持下来。虽然坚持是一件值得骄傲的事。您们可以怪我眼高手低，这真是一个不好的陋习，它让很多机会从手边溜走，即便是做一些很细微的事情，其实只要坚持就是对读者最大的不离不弃。</p><p>  这么静，比诵经声，还静。我骑上我的白鹿，白鹿踏着，尚未落地的雪花。</p><hr><center><font color='blue'>-6-</font></center><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>   我依稀记得我过去这两个月的生活现状。白鹿如此轻盈，轻如幻影，本来是去远山拾梦，却惊醒了，梦中的你。</p><p>   是的，我常常失眠。</p><p>   今夜，高脚杯它有它独有的韵脚让我肆意书写这漫漫长夜的思绪。</p><p>   如果您仍然认为我是一个无趣的理科怪物，抱歉，确实是。</p><p>   but,并不全是，在我绝笔多年后，这类文风也许也就今夜再直抒于此。</p><p>   我很苦逼地过了9月10月，或许您会问：为嘛？</p><p>   那是因为，再牛逼的开发遇上傻逼的甲方您也会道一句呵呵。</p><p>   如果真有夏尔这种地方，我愿去当个农夫，吃自己种的蔬菜，喝自己摘的茶，聊自己剩下的天。</p><p>   我只是希望我的这个公众号承载着梦想，它的美，能感染你我他。</p><p>   大鱼海棠：</p><p>   “有的鱼是永远关不住的，因为他们属于天空。”</p><p>   肖申克的救赎：</p><p>   “有些鸟儿注定是关不住的， 它们的每一片羽毛都闪耀着自由的光辉。”</p><p>   我相信，我不是信仰缺失的一代，陷入精神荒芜。任何精神指导展至今，靠的不是僵化、教条式的学习。我经过10月的炼狱，我更加能体悟到生活之奴的单调与匮乏。就犹如进入了监狱般难以度日。而今天或许是我监狱中平凡而又波澜不惊的一天。活许这种单调仅仅是属于我的单调。世界是海角和尖峰组成，读者您只是因为弱视症使您只能窥探到四周弥漫的薄雾。</p><p>  我是如此的迫切逃离我所知，我所有，我所爱。卸下我的伪装，成为真实的我，以此得到喘息。睡意临然之际，或许是一个good idea。忘记生活的期许，进行生活的休养生息。</p><p>   但是，这是我要的生活？</p><hr>  <center><font color='blue'>-7-</font></center>  <p><img src="/images/pasted-11.png" alt="upload successful"></p><p>当我学会逃离樊篱，生活教会我一个临近中年的男人该如何面对这不可避免的一切。我辛勤的劳作，如同勤劳的小蜜蜂般，于夜以继日，2018年11月03日 04:27:36，这是我当些仍然在撰写此文稿的时间，为何我如此亢奋？brandy真不可小觑喔～</p><p>   奴役虽然是生活的唯一法律。but，崇尚自由的我们自然会乖乖地将甲方的需求按期完成，以此彰显我国民的职业素养。我相信这些只是我们生命的一部分，以它鲜血和血肉生命的一切经验砥砺着我们前行，一道阳光暗去，不代表希望的磨灭对吧？</p><hr><center><font color='blue'>-8-</font></center><p><img src="/images/pasted-9.png" alt="upload successful"><br>   可能本文的行文风格过于学究或文绉绉，还望读者能欣然阅之。本人是一名极简主义者，在这溪水长流的日子里，我只是互联网不起眼的一朵浪花，飘泊在广州的一叶孤舟，与您分享工作感悟与生活感悟，此文干货不多，更多是情感宣泄，算是敞开心扉的交流，感谢您们的支持与厚爱。我不想我年老之际会后悔自己没有趁年轻之际，多做一些尝试。行文至此，我也不怕道出本人多年以来不耻的一个事实。本人有轻度抑郁，很多时候严重影响学习与生活，常常不耻于导出这一事实，常常梦魇也缘于此。酒过三巡，高脚杯也只有四分之一的白兰地，幸得醉意让我能无所顾忌的撰写此文。或许，这就是成长的代价吧。成长似乎就是不断的发现，那些曾经让自己魂牵梦绕的东西，原来只是一场幻想，梦醒时分，现实无任何商量余地？</p><hr><center><font color='blue'>-9-</font></center> <p><img src="/images/pasted-2.png" alt="upload successful"></p><p>  我忘记了也不知道我从前想要做什么，如今我成为了一名程序员，我的收入似乎正越来越多，但是我好像没那么快乐？</p><p>   梦想似乎不能丢？可我的梦想到哪去了呢？虽然，概率很小很小……<br>   我很感谢您能读到此，我似乎没写什么波澜壮阔的生活段子，但是，您能用心聆听我的心声，已感激涕零，蓝海见鲸，不见您，谢谢聆听</p>]]></content>
    
    
    <categories>
      
      <category>程序人生</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Druid数据库连接池数据库密码加密</title>
    <link href="/2018/11/19/Druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <url>/2018/11/19/Druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>进入到druid-1.0.27.jar文件下载的目录，执行以下操作<br>    java -cp druid-1.0.27.jar com.alibaba.druid.filter.config.ConfigTools you_password<br>    下面是例子<br>    java -cp druid-1.0.27.jar com.alibaba.druid.filter.config.ConfigTools 123456<br>   回车之后得到下面的数据</p><h2 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h2>  <pre><code class="hljs smali"> <span class="hljs-keyword"> private</span>Key:MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAovl027wL8dFaWuTeIsVXS LYxKEjKwCLZlWiYq26cVPpINih1BWPSdQ5y5JzlcEeYKdLhmFjIbtEW44+zYfzOgwIDAQABAkBL0PDkKB8GZ/Y4wq/0TQnF8bv8maB4sb23G+mqFtLzVJrE3qX+3VU5MO0Ac43krZ6N3XZ6Sg6O8M3LijNMj1MBA iEA8xasZ0e72aUWEBjNDYDmqPyb1MouZ7d4rW1vEYBR6dMCIQCroXRN+uQO7M2trv1VjGbiuF2jeoeKf XJeV1yg4mJqkQIgbPMjkCKhefm4urwy4zN7rg+R1DxNsiSUDL64ghKOJAsCIQCUEwHi3VixP8Db3iOXE UEazfGLv4T9COoJVtoFvAso4QIhAKgbsS66Gl8iLI8QkXyAG0oYam/KDBi4sQDrVBuaeKuu</code></pre><h2 id="公钥"><a href="#公钥" class="headerlink" title="公钥"></a>公钥</h2> <pre><code class="hljs gcode">publicKey:MFwwDQYJKoZIh<span class="hljs-attr">vcNAQEBBQADSwAwSAJBAKL5</span>d<span class="hljs-symbol">Nu8</span>C/HRWlrk<span class="hljs-number">3</span>iLFV<span class="hljs-number">0</span>i<span class="hljs-number">2</span>MShIysAi<span class="hljs-number">2</span>ZVomKtu<span class="hljs-symbol">nFT6</span>SDYodQVj<span class="hljs-number">0</span><span class="hljs-symbol">nUOcuSc5</span>XBHmC<span class="hljs-symbol">nS4</span>ZhYy<span class="hljs-name">G7</span>RFuOPs<span class="hljs-number">2</span>H<span class="hljs-number">8</span>zoMCAwEAAQ==</code></pre><h2 id="加密后的密码"><a href="#加密后的密码" class="headerlink" title="加密后的密码"></a>加密后的密码</h2> <pre><code class="hljs gcode">password:cRMYiJ<span class="hljs-number">6</span>jH<span class="hljs-number">6</span>BKIJAiu/<span class="hljs-symbol">NU54</span>Z<span class="hljs-number">15</span>wJd<span class="hljs-symbol">n3</span>qcbd<span class="hljs-symbol">NL4</span>gkICwgMdjv<span class="hljs-symbol">N0</span>QyHs<span class="hljs-number">6</span><span class="hljs-number">+6</span>a<span class="hljs-number">55</span>Wy<span class="hljs-symbol">nh3</span>Prxr<span class="hljs-number">10</span>V<span class="hljs-number">2</span>t<span class="hljs-number">96</span>oQI<span class="hljs-number">1</span>gXXhVRQ==</code></pre><p>配置数据源，提示Druid数据源需要对数据库密码进行解密。<br>   在application.properties文件中<br>   spring.datasource.password=加密后的密码<br>   spring.datasource.publickey=公钥</p><p>配置参数，让ConfigFilter解密密码<br>  可以在配置文件application.properties中指定config.decrypt=true<br> 在DruidDBConfig.java中进行调用ConfigTools.decrypt(publicKey, password)进行解密</p>]]></content>
    
    
    <categories>
      
      <category>JavaEE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>持久层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>道与术的讨论</title>
    <link href="/2018/11/19/%E9%81%93%E4%B8%8E%E6%9C%AF%E7%9A%84%E8%AE%A8%E8%AE%BA/"/>
    <url>/2018/11/19/%E9%81%93%E4%B8%8E%E6%9C%AF%E7%9A%84%E8%AE%A8%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>《道与术的讨论》 </p><pre><code> 道就是指对事物思想或者根本基础的认识，术就是具体行动的方法论。</code></pre><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>1、首先明确一点:【知识之上是思想，思想之上是精神】<br>我们经常在行业中看到以下两种情况，一些计算机基础很不错的同学，有时候虽然没有太多的工作经验，但当公司需要使用一项新技术的时候学习能力往往比较突出，出现问题的时候往往能定位到本质；还有一些同学，熟练使用各种框架的用法，让他上线一个新技术时，往往有时比前者更快，但是一旦出现问题之后，特别是如果涉及到底层一些就会抓瞎。<br>我个人认为语言和IDE仅仅是工具，它们仅仅只是实现思想的手段，以促成目的。思想是程序的灵魂，语言只是描述思想的载体(仅仅借助工具实现了idea而已，工具帮助我们更好地思考和表达)<br>结论1:比编码更重要的思想。</p><p>2、基于结论1，解答几个问题:<br>What?思想类似武林秘籍的内功心法。<br>计算机领域的顶层思想都是学院派的东西，即是底层原理，也就是刘大大常常强调的基础。<br>When?工作、学习、生活无时无刻不呈现出它的哲学意义。<br>Why?程序设计思想、理念、模型源于生活、源于哲学、源于时间万物。它能培养我们的思维。思想甚至或接近于理念的东西非常重要，关系到程序员的境界，对知识的融会贯通的把握。<br>3、良好的思维习惯养成。<br>发现问题，分析问题，提出方案，落地实施，优化迭代。所有的东西，只要遵循既定的步骤，都可以学会。学习的根本在于如何处理信息的能力，对现象的分析，归纳和延伸的能力。一开始，你从模仿开始，收集信息，不断地正向反馈，反馈多了后面就会通过思考来学习。而有了思考能力后，你渐渐会有自己的观点，有质疑精神，继而有创新精神，这是成长过程。</p><p>4.基于3点，继续深入探讨。学习在于模仿，从积累中聚合自己的思维。</p><p>4.1.应用驱动学习，抓大放小，实践中寻找客观规律。从既有的经验中总结，利用适当的抽象，触其本质，去掉相干的干扰因素，从而得出使用范围更广的知识。通俗来说，这就是举一反三，触类旁通。(技术上的通用框架是知识点，是术。思维能力的提高，解决问题的方法，这些非技术能力才是心法。掌握了知识点，犹如你掌握了公式，遇到问题只会套，套出结果了，顶多叫有经验。这是没进行深度思考的表现，很多问题表面上看，就是很多人解决不了，但究其本质就是很多人都缺少思考和解决问题的能力)</p><p>4.2.避免陷入填鸭式教育的泥潭。<br>在国内传统的教育一直都是系统完备的，那段时期的学习是单向被动的，像鸭子一样被喂食知识。因而很多人陷入只会被动等待，不会主动探索学习的习惯。但习惯并不意味着享受，你曾被引入一座座知识殿堂，它们巧夺天工，美轮美奂。但是没人引你去了解它的地基和脚手架，它原始丑陋的模样你都未曾见过。在这样封闭，单向，被动，静态的环境下，很多人很难跳出怪圈。</p><p>4.3.基于1.2，有主观能动性去实践，复盘总结。这就是所谓的刻意+练习(脱离舒适区、及时反馈)<br>举个例子:学习新框架，3h1w。<br>what,先搞清楚它是什么，这是它的内涵。<br>how,它能做什么，这是它的外延。<br>内涵和外延共同来定义框架本身，会对框架有较为深刻的理解，应用层面上知道如何用，这是术。<br>why,搞清楚框架的相关理论基础，其目的是知道框架是如何被当你的，是否能借鉴以便今后自己能够用到其他地方。最后搞清楚框架中一些设计的原理和细节。目的是为了搞清楚来龙去脉。这是抽象(总结规律)，即思想。<br>知其然知其所以然。<br>5、有效的存储是为了有效的提取。<br>相信不少的大牛都提倡大家写博客。写博客的目的是为了梳理知识点，形成知识体系，然后构建并合并到自己的认知体系。<br>博客仅仅只是一种媒介。常见的利器《思维导图》<br>《记忆宫殿》<br>你所拥有的知识并不在于你记得多少，在于它能在恰当的时候被回忆起来。比如技术点依托于一类业务场景。<br>细致的探索可以读读《书写是为了更好地思考》</p><p>6.了解和术和道的关系后。为了接地气些，谈谈一些编程理解。</p><p>6.1、写代码的过程=逻辑推演的过程=思想+描述思想的工具</p><p>目的:还原思维的过程，即思考过程的复制与再现。<br>     从数学角度来说，本质是排列组合(api的组合使用)，组合的随机性很多，因此有规律。<br>    开发思想指导:<br>    牛逼的组合是规律，也就有GOF提出的对象组合的概念，也就有了神书《设计模式》这种存在。当然还有一堆开发原则。<br>    描述思想的工具:<br>   为了很好地去刻画和再现思维的过程，需要好的工具。而工具本身又需要顺手好用，因而它会被有工匠精神的宗师进行设计，因此会有《编程范式》</p><p>6.2、开发过程:分析、设计、团队协作，架构、测试、实现<br>      实现:迭代一，满足基本功能；迭代二,从性能角度考虑；迭代三,稳定性；迭代四,代码部署及版本控制。后续迭代。</p><p>6.3、常见三类开发:<br>第一类，用脑。遵循程序设计:分析、设计、架构、实现<br>第二类，用抄。分析，搜索，抄袭，改进，实现<br>第三类，用耗。copy,debug,debug…,实现</p>]]></content>
    
    
    <categories>
      
      <category>内功心法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>业务中台建设の用户中台</title>
    <link href="/2018/05/27/%E4%B8%9A%E5%8A%A1%E4%B8%AD%E5%8F%B0%E5%BB%BA%E8%AE%BE%E3%81%AE%E7%94%A8%E6%88%B7%E4%B8%AD%E5%8F%B0/"/>
    <url>/2018/05/27/%E4%B8%9A%E5%8A%A1%E4%B8%AD%E5%8F%B0%E5%BB%BA%E8%AE%BE%E3%81%AE%E7%94%A8%E6%88%B7%E4%B8%AD%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="业务中台建设の用户中台"><a href="#业务中台建设の用户中台" class="headerlink" title="业务中台建设の用户中台"></a>业务中台建设の用户中台</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何介绍项目？</title>
    <link href="/2018/05/27/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE/"/>
    <url>/2018/05/27/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#成长#   如何介绍项目</p><p>面试官问这个问题，主要是考察你的概述能力和全局视野。当然，今天我们聊的并不是面试题，而是我们怎么去理解和复盘我们每天做的事情。有的人经常抱怨自己每天在堆业务，但没有成长。事实上，很多情况下确实在堆业务，但并不是没有成长的。并非做中间件或者技术架构才是成长，例如我们的需求分析能力，沟通协作能力，产品思维能力，抽象建模能力等都是一个非常重要的硬实力。首先，请你静下来思考，你真的了解自己每天在做的事情吗，你真的了解自己所做的业务吗？</p><p>好的，现在进入正文，我们如何理解和复盘项目。这里，列了一个清单，请大家好好思考下这些内容。</p><ol><li>明确项目的周期。</li><li>明确项目的价值。（为什么做这个项目，它解决了用户什么痛点，它带来什么价值？）</li><li>明确项目的功能。（这个项目涉及哪些功能？）</li><li>明确项目的技术。（这个项目用到哪些技术？）</li><li>明确个人在项目中的位置和作用。（你在这个项目的承担角色？）</li><li>明确项目的整体架构。</li><li>明确项目的优缺点,如果重新设计你会如何设计。</li><li>明确项目的亮点。（这个项目有什么亮点？）</li><li>明确技术成长。（你通过这个项目有哪些技术成长？）</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入您的骨髓</title>
    <link href="/2018/05/27/%E6%B7%B1%E5%85%A5%E6%82%A8%E7%9A%84%E9%AA%A8%E5%A4%B4/"/>
    <url>/2018/05/27/%E6%B7%B1%E5%85%A5%E6%82%A8%E7%9A%84%E9%AA%A8%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="深入您的骨头"><a href="#深入您的骨头" class="headerlink" title="深入您的骨头"></a><a href="http://1000awesomethings.com/2020/01/01/340-feeling-it-deeply-in-your-bones/"><font><font>深入您的骨头</font></font></a></h1><p><font><font>出生并爆炸进入世界，您是一个拥有宽眼，</font></font>**<font><font>胖乎乎的双腿</font></font>**<font><font>和浑浊想法</font><font>的婴儿大脑</font><font>。</font><font>妈妈抬起你，接你，</font></font>**<font><font>睁开眼睛，闭上</font></font>**<font><font>雾气。</font><font>眼泪流淌，脸上发出尖叫，因为您旋转的大脑扭曲并变成了想法……</font></font></p><p><font><font>直到它没有意义。</font></font></p><p><font><font>直到感觉没有任何感觉。</font></font></p><p><font><font>时间表旁黑板上的粉笔说唱，语言将声音变成句子，故事使您飞向遥远的世界。</font><font>书籍报告和家庭作业检查，</font></font>**<font><font>化学实验室和生物学解剖，</font></font>**<font><font>都充满了数字，理论和思想，使您动脑筋……</font></font></p><p><font><font>直到它没有意义。</font></font></p><p><font><font>直到感觉没有任何感觉。</font></font></p><p><a href="http://1000awesomethings.com/wp-content/uploads/2010/12/we-dont-have-very-long.jpg"><img src="http://1000awesomethings.com/wp-content/uploads/2010/12/we-dont-have-very-long.jpg"></a><font><font>青少年的</font></font>**<font><font>夜宿</font></font>**<font><font>和</font>**<font>深夜散步，</font>**<font>夏令营和夜宵讲座，使您的思想和对世界的了解不断扩大。</font><font>初吻和</font></font>**<font><font>初次接触，</font></font>**<font><font>初次打架和</font></font>**<font><font>初次脸红，</font></font>**<font><font>所有的梦想都充满了你的心，扩大了大脑的书架，让你思考一下自己外表下的生活。</font></font></p><p><font><font>直到它没有意义。</font></font></p><p><font><font>直到感觉没有任何感觉。</font></font></p><p><font><font>但是……有时挑战性的演讲或分散的朋友，</font></font>**<font><font>最后没有考试的混乱的辩论</font></font>**<font><font>，可能会吓坏您的思想，吓跑您的梦想，会吓坏您的生活，并在明天交易。</font><font>家庭的压力和社交恩惠，</font></font>**<font><font>可信赖面孔的违背诺言</font></font>**<font><font>，可能会突然使您上下颠倒，分散您的思想或使您的心脏昏暗……</font></font></p><p><font><font>当没有意义的时候……</font></font></p><p><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">…………</font></font><font><font>当什么感觉都不对时……</font></font></p><p><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">………………</font></font><font><font>当感到恐惧时……</font></font></p><p><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">… … …<span> </span></font></font><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">… … …<span> </span></font></font><strong><font><font>生活中有没有说明？</font></font></strong></p><p><a href="http://1000awesomethings.com/wp-content/uploads/2010/12/feel-it-in-your-bones.jpg"><img src="http://1000awesomethings.com/wp-content/uploads/2010/12/feel-it-in-your-bones.jpg"></a><font><font>那是时候该停止了，这是思考的时间，是暂停的时间，是眨眼的时间。</font><font>当你到年底的时候，</font></font>**<font><font>睁开眼睛，向后看</font></font>**<font><font>。</font><font>当你到年底时，</font></font>**<font><font>睁开眼睛看看你的内心</font></font>**<font><font>。</font></font></p><p><font><font>因为今天你在这里……</font></font></p><p><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">……</font></font><font><font>还有很长的路要走……</font></font></p><p><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">………………</font></font><font><font>今天仍然有恐惧……</font></font></p><p><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">……………………</font></font><font><font>但是只有一种方式知道……</font></font></p><p><strong><font><font>感觉到您的骨骼，感觉到您的骨骼，感觉到您的骨骼。</font></font></strong></p><p><font><font>感觉骨骼向前移动，</font></font>**<font><font>感觉骨骼继续前进</font></font>**<font><font>，感觉骨骼遗忘，感觉骨骼继续传承……只是感觉骨骼在说对不起，感觉骨骼在向您表示关心，感觉骨骼在选择明天，感受那些骨头可以带你到那里。</font></font></p><p><font><font>因为当您的世界</font><font>变得</font><font>整洁</font><font>，</font></font>**<font><font>当您的头移开</font></font>**<font><font>，当您的心脏向前方猛冲，当里面的气泡冒出来时，那就是当您知道，</font></font>**<font><font>那是您看到</font></font>**<font><font>的时候，那才是您最终成为……的本性。 。</font></font></p><p><font><font>所以，无论您今天在想什么……。</font><font>停止尝试选择。</font><font>无论您今天要搜索什么，只要在</font></font>**<font><font>里面寻找线索即可</font></font>**<font><font>。</font><font>是的，无论您在想什么……都应该</font></font>**<font><font>停下来感受一下</font></font>**<font><font>。</font><font>因为当您在骨头中感觉到它时，您可以微笑并忘记了头。</font></font></p><p><font><font>直到它没有意义。</font></font></p><p><font><font>直到感觉没有任何感觉。</font></font></p><p><font><font>直到感觉到，一切都没有意义。</font></font></p><p><font><font>除非您知道，否则没有感觉。</font></font></p><p><font><font>真棒！</font></font></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm笔记</title>
    <link href="/2018/03/01/npm/"/>
    <url>/2018/03/01/npm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-npm"><a href="#1-npm" class="headerlink" title="1. npm"></a>1. npm</h1><h2 id="1-1-什么是npm"><a href="#1-1-什么是npm" class="headerlink" title="1.1. 什么是npm"></a>1.1. 什么是npm</h2><h3 id="1-1-1-npm简介"><a href="#1-1-1-npm简介" class="headerlink" title="1.1.1. npm简介"></a>1.1.1. npm简介</h3><p><strong>npm官网</strong></p><p>npm是node package manager的简称，即node应用程序专属的包管理工具<br>也就是说npm最初只负责维护node服务端开发所需的js包<br>不过随着node的普及，npm也越来越流行，npm也可以用来管理前端所需的包了，如jquery、bootstrap、vue等</p><h4 id="1-1-1-1-npm与包管理工具"><a href="#1-1-1-1-npm与包管理工具" class="headerlink" title="1.1.1.1. npm与包管理工具"></a>1.1.1.1. npm与包管理工具</h4><p>在进行项目开发中，我们经常需要”引入”、”更新”、”删除”一些由我们自己开发或第三方开发的独立文件模块或包<br>比较传统的做法是开发人员随着自己的经验，逐渐维护起一个专属与自己的目录，用来管理将来开发可能用到的包<br>这个目录久而久之会越来越大，我们需要更新新版本以淘汰旧版本的包的频率也越来月频繁，浪费了我们的部分精力<br>包管理工具就是专门解决这类问题的软件，而npm就是包管理工具的一种，专门用来管理node.js与前端开发所需的包</p><h4 id="1-1-1-2-安装与更新"><a href="#1-1-1-2-安装与更新" class="headerlink" title="1.1.1.2. 安装与更新"></a>1.1.1.2. 安装与更新</h4><p>只要安装了node，那么npm就跟着安装了<br>可以运行命令npm install -g npm来升级npm到最新版本<br>不过需要注意，如果你没有采用默认的安装路径或者没有管理员权限最好不要升级<br>因为升级后可能丢失npm的使用权限，到时候就得重装node来解决了</p><h2 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2. 使用"></a>1.2. 使用</h2><h3 id="1-2-1-基本使用"><a href="#1-2-1-基本使用" class="headerlink" title="1.2.1. 基本使用"></a>1.2.1. 基本使用</h3><p>以命令行方式进入一个项目目录<br>创建项目描述文件（已经有了就不用了）<br>运行npm init，运行后项目中会创建一个package.json的项目描述文件<br>也可以纯手动的方式创建package.json文件<br>使用npm安装项目依赖包 +npm install jquery bootstrap –save<br>运行后项目中会创建一个node_modules文件夹<br>打开该文件夹会发现jquery与bootstrap的最新版已经被下载<br>接下来就可以在项目引用第三方包进行开发了</p><h4 id="1-2-1-1-项目共享"><a href="#1-2-1-1-项目共享" class="headerlink" title="1.2.1.1. 项目共享"></a>1.2.1.1. 项目共享</h4><p>通常一个项目是由多个人一起维护的，如果是一个比较大的项目，还会有很多依赖的包<br>像这样的项目如果在多个人之间传播共享很不便利，主要是因为依赖包占用的空间太大<br>如果使用了npm，我们就不需要把那些依赖包传来传去了，因为package.json文件中记录了这些依赖<br>应用演示<br>创建一个使用npm进行包管理的项目<br>然后把这个目录中除node_modules外的内容传给另一个人，这样项目就会比较轻巧<br>另一个人拿到项目后，只需运行<code>npm install</code>命令安装依赖后，项目即可恢复原样</p><h4 id="1-2-1-2-配合git"><a href="#1-2-1-2-配合git" class="headerlink" title="1.2.1.2. 配合git"></a>1.2.1.2. 配合git</h4><p>现代项目除了会使用一款包管理工具管理依赖包之外，还会使用一款版本管理工具进行代码版本的管理<br>所以这里也补充说明一下npm与git的结合使用<br>使用了npm后项目的依赖包就被安装到了node_modules目录<br>这个目录的代码因为比较庞大，所以通常不会添加到版本仓库中<br>所以通常会在.gitignore配置文件中，配置忽略node_modules<br>配置后项目代码就可以提交到git仓库进行管理了<br>将来其他账户要clone项目并运行，clone后依然运行npm install即可安装依赖恢复项目原样</p><h2 id="1-3-命令汇总"><a href="#1-3-命令汇总" class="headerlink" title="1.3. 命令汇总"></a>1.3. 命令汇总</h2><h3 id="1-3-1-必用命令"><a href="#1-3-1-必用命令" class="headerlink" title="1.3.1. 必用命令"></a>1.3.1. 必用命令</h3><blockquote><p>npm init</p></blockquote><p>可以添加-y参数跳过配置信息的填写，直接生成默认的package.json文件<br>npm install 包名@版本号<br><code>--save || -S参数可以把安装信息记录在package.json文件中的dependencies属性中</code><br><code>--save-dev || -D参数可以把安装信息记录在package.json文件中的devDependencies属性中</code><br><code>--production参数让npm根据配置文件中的dependencies属性进行依赖包的安装</code><br><code>-g参数可以在全局进行安装，一般全局安装的都是一些可单独执行的node工具</code><br>–registry参数可以指定下载包的地址，可以使用淘宝提供的地址<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>npm uninstall 包名<br>–save || -S参数会删除package.json文件中dependencies的依赖信息<br>–save-dev || -D参数会删除package.json文件中devDependencies的依赖信息<br>-g参数指明删除全局的包</p><h4 id="1-3-1-1-其他命令"><a href="#1-3-1-1-其他命令" class="headerlink" title="1.3.1.1. 其他命令"></a>1.3.1.1. 其他命令</h4><p>npm update 更新模块<br>npm outdated 检查模块是否已经过时<br>npm ls 查看安装的模块<br>npm init 在项目中引导创建一个package.json文件<br>npm help 查看某条命令的详细帮助<br>npm root 查看包的安装路径<br>npm config 管理npm的配置路径<br>npm cache 管理模块的缓存<br>npm start 启动模块<br>npm stop 停止模块<br>npm restart 重新启动模块<br>npm test 测试模块<br>npm version 查看模块版本<br>npm view 查看模块的注册信息<br>npm adduser<br>npm publish 发布模块<br>npm access 在发布的包上设置访问级别<br>npm package.json的语法</p><h2 id="1-4-cnpm"><a href="#1-4-cnpm" class="headerlink" title="1.4. cnpm"></a>1.4. cnpm</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1. 简介"></a>1.4.1. 简介</h3><p>淘宝NPM镜像官网</p><h4 id="1-4-1-1-安装"><a href="#1-4-1-1-安装" class="headerlink" title="1.4.1.1. 安装"></a>1.4.1.1. 安装</h4><p>npm install -g cnpm –registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h4 id="1-4-1-2-使用"><a href="#1-4-1-2-使用" class="headerlink" title="1.4.1.2. 使用"></a>1.4.1.2. 使用</h4><p>与npm的使用方式一样，本就是对npm的一层封装<br>使用范例：cnpm install jquery art-template -S</p><h4 id="1-4-1-3-其他相关工具"><a href="#1-4-1-3-其他相关工具" class="headerlink" title="1.4.1.3. 其他相关工具"></a>1.4.1.3. 其他相关工具</h4><p>bower<br>twitter推出的一款包管理工具。<br>参考文档[<a href="http://www.zuojj.com/archives/533.html]">http://www.zuojj.com/archives/533.html]</a><br>yarn<br>facebook推出的包管理工具。<br>参考文档[<a href="http://imweb.io/topic/581f6c0bf2e7e042172d618a]">http://imweb.io/topic/581f6c0bf2e7e042172d618a]</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mongoDB</title>
    <link href="/2018/03/01/mogodb/"/>
    <url>/2018/03/01/mogodb/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-mongoDB"><a href="#1-mongoDB" class="headerlink" title="1. mongoDB"></a>1. mongoDB</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h2><h3 id="1-1-1-作用"><a href="#1-1-1-作用" class="headerlink" title="1.1.1. 作用"></a>1.1.1. 作用</h3><p>用来管理数据的软件<br>可自动对数据有组织的存放<br>提供相应的增删查改接口方便对数据进行操作<br>支持众多语言进行连接操作<br>提供一系列措施提高数据处理的性能</p><h4 id="1-1-1-1-特点"><a href="#1-1-1-1-特点" class="headerlink" title="1.1.1.1. 特点"></a>1.1.1.1. 特点</h4><p>增删查改不支持sql语句<br>没有表结构<br>使用简单方便性能优越</p><h4 id="1-1-1-2-官网与资源"><a href="#1-1-1-2-官网与资源" class="headerlink" title="1.1.1.2. 官网与资源"></a>1.1.1.2. 官网与资源</h4><p>MongoDB官网<br>菜鸟中文文档</p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2. 安装"></a>1.2. 安装</h2><h3 id="windows-用户"><a href="#windows-用户" class="headerlink" title="windows 用户"></a>windows 用户</h3><h3 id="1-2-1-注意事项"><a href="#1-2-1-注意事项" class="headerlink" title="1.2.1. 注意事项"></a>1.2.1. 注意事项</h3><p>安装路径不要出现中文<br>mongoDB最新版已不再支持32位windows操作系统<br>这里有以前的32位安装包，但是官方已经不提供下载链接了<br>mongoDB在低版本win7和win8存在不兼容问题可能存在各种问题<br>要么升级win7安装所有的更新<br>要么更换为win10</p><h4 id="1-2-1-1-安装检测"><a href="#1-2-1-1-安装检测" class="headerlink" title="1.2.1.1. 安装检测"></a>1.2.1.1. 安装检测</h4><p>安装完毕后命令行运行mongo –version<br>如果打印出相应的版本号那么就成功了<br>如果没有打印相关的版本号那么做如下操作<br>查看目录完整性，默认安装的路径C:\Program Files\MongoDB\Server\3.4\bin<br>bin目录下内容<br>如果内容没有问题接下来把这个bin路径配置到环境变量中</p><h4 id="1-2-1-2-环境变量配置"><a href="#1-2-1-2-环境变量配置" class="headerlink" title="1.2.1.2. 环境变量配置"></a>1.2.1.2. 环境变量配置</h4><p>在桌面或者资源管理器中右键此电脑，选择属性进入系统面板<br>点击高级系统设置弹出相应设置框<br>点击环境变量弹出相应设置框<br>在系统变量中找到Path变量<br>选择Path变量，然后点击编辑按钮弹出编辑框<br>点击新建把mongo的bin路径赋值进入即可<br>配置完毕后打开新的命令行工具输入mongo –version进行检测</p><h3 id="Mac-OS-x-用户"><a href="#Mac-OS-x-用户" class="headerlink" title="Mac OS x 用户"></a>Mac OS x 用户</h3><p><code>注:以下说明摘录自官网，为保证原汁原味，不做翻译。</code></p><h2 id="Install-MongoDB-Community-Edition"><a href="#Install-MongoDB-Community-Edition" class="headerlink" title="Install MongoDB Community Edition"></a>Install MongoDB Community Edition</h2><blockquote><p><code>NOTE</code>:</p></blockquote><blockquote><p>To install a different version of MongoDB, please refer to that version’s documentation. For example, see version <a href="https://docs.mongodb.com/v3.4/tutorial/install-mongodb-on-os-x/">3.4</a>.</p></blockquote><h3 id="Install-MongoDB-Community-Edition-Manually"><a href="#Install-MongoDB-Community-Edition-Manually" class="headerlink" title="Install MongoDB Community Edition Manually"></a>Install MongoDB Community Edition Manually</h3><h4 id="Download-the-binary-files-for-the-desired-release-of-MongoDB"><a href="#Download-the-binary-files-for-the-desired-release-of-MongoDB" class="headerlink" title="Download the binary files for the desired release of MongoDB."></a>Download the binary files for the desired release of MongoDB.</h4><p>Download the binaries from the <a href="https://www.mongodb.com/download-center#production">MongoDB Download Center</a>.</p><h4 id="Extract-the-files-from-the-downloaded-archive"><a href="#Extract-the-files-from-the-downloaded-archive" class="headerlink" title="Extract the files from the downloaded archive."></a>Extract the files from the downloaded archive.</h4><p>For example, from a system shell, you can extract through the <code>tar</code> command:</p><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf mongodb-osx-ssl-x86_64-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>.tgz</code></pre><h4 id="Copy-the-extracted-archive-to-the-target-directory"><a href="#Copy-the-extracted-archive-to-the-target-directory" class="headerlink" title="Copy the extracted archive to the target directory."></a>Copy the extracted archive to the target directory.</h4><p>Copy the extracted folder to the location from which MongoDB will run.</p><pre><code class="hljs apache"><span class="hljs-attribute">mkdir</span> -p mongodb<span class="hljs-attribute">cp</span> -R -n mongodb-osx-ssl-x86_64-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>/ mongodb</code></pre><h4 id="Ensure-the-location-of-the-binaries-is-in-the-PATH-variable"><a href="#Ensure-the-location-of-the-binaries-is-in-the-PATH-variable" class="headerlink" title="Ensure the location of the binaries is in the PATH variable."></a>Ensure the location of the binaries is in the <code>PATH</code> variable.</h4><p>The MongoDB binaries are in the <code>bin/</code> directory of the archive. To ensure that the binaries are in your <code>PATH</code>, you can modify your <code>PATH</code>.</p><p>For example, you can add the following line to your shell’s <code>rc</code> file (e.g. <code>~/.bashrc</code>):</p><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=&lt;mongodb-install-directory&gt;/bin:$PATH</code></pre><p>Replace <code>&lt;mongodb-install-directory&gt;</code> with the path to the extracted MongoDB archive.</p><p><code>注:</code></p><p>Mac下面的环境变量设置和Linux差不多，一般为这几个文件（左边的先加载）：<br>/etc/profile </p><p>/etc/paths</p><p>~/.bash_profile </p><p>~/.bash_login </p><p>~/.profile </p><p>~/.bashrc</p><ul><li>etc目录下面的是系统级的配置;</li></ul><ul><li>~目录下的是用户配置，用户配置文件只会加载一个（.bashrc除外），不存在的可以自己新建；</li></ul><h2 id="1-3-基本概念"><a href="#1-3-基本概念" class="headerlink" title="1.3. 基本概念"></a>1.3. 基本概念</h2><h3 id="1-3-1-数据库"><a href="#1-3-1-数据库" class="headerlink" title="1.3.1. 数据库"></a>1.3.1. 数据库</h3><p>MongoDB可以创建多个数据库<br>一般每个数据库对应一个项目<br>也就说一个MongoDB可以同时为多个项目提供服务<br>运行show dbs命令可以查看所有的数据库列表</p><h4 id="1-3-1-1-集合"><a href="#1-3-1-1-集合" class="headerlink" title="1.3.1.1. 集合"></a>1.3.1.1. 集合</h4><p>每个数据库中会有很多文件，每个文件称作集合或表（collection或table）<br>MongoDB是以JSON格式存储数据的，也就是说每个文件中存储的是多条JSON数据<br>这些数据都是特殊编码的二进制数据存储，我们无法直接打开文件查看内容</p><h4 id="1-3-1-2-文档"><a href="#1-3-1-2-文档" class="headerlink" title="1.3.1.2. 文档"></a>1.3.1.2. 文档</h4><p>一个文件中，存储的每一条JSON数据，称为文档（document）<br>注意：不要把文档认为是一个文件，它代表的仅仅是集合中的一条数据</p><h4 id="1-3-1-3-字段"><a href="#1-3-1-3-字段" class="headerlink" title="1.3.1.3. 字段"></a>1.3.1.3. 字段</h4><p>JSON数据中的每个属性，称为字段（field）</p><h2 id="1-4-使用"><a href="#1-4-使用" class="headerlink" title="1.4. 使用"></a>1.4. 使用</h2><h3 id="1-4-1-启动服务"><a href="#1-4-1-启动服务" class="headerlink" title="1.4.1. 启动服务"></a>1.4.1. 启动服务</h3><h3 id="windows用户"><a href="#windows用户" class="headerlink" title="windows用户"></a>windows用户</h3><p>创建数据目录<br>MongoDB会将数据存储在db目录中，但是这个目录需要我们手动创建<br>在c盘根目录下创建一个data目录，再在data中创建db目录<br>db目录也可以创建在其他位置，但是c:\data\db是mogoDB操作的默认路径所以我们这里这样配置<br>启动服务<br>安装的bin目录下有个mongod.exeCLI应用程序，执行它即可启动服务<br>在命令行输入mongod –dbpath c:\data\db回车即可启动服务<br>因为c:\data\db是默认路径，所以这里不加–dbpath参数也可以<br>服务启动后与我们启动node_http服务一样，命令行工具会停在那里留个光标闪动<br>使用Ctrl + C即可停止服务<br>如果32位有异常，添加–journal –storageEngine=mmapv1<br>mongod –dbpath=”路径” –journal –storageEngine=mmapv1</p><h4 id="Mac-OS-x-用户-1"><a href="#Mac-OS-x-用户-1" class="headerlink" title="Mac OS x 用户"></a>Mac OS x 用户</h4><p><code>注:以下说明摘录自官网，强烈建议大家学好英文，阅读英文原文，如果实在不行就用google网页翻译看也行，以下为保证原汁原味不做翻译。</code></p><h3 id="Run-MongoDB"><a href="#Run-MongoDB" class="headerlink" title="Run MongoDB."></a>Run MongoDB.</h3><p>To run MongoDB, run the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a> process at the system prompt. If necessary, specify the path of the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a> or the data directory. See the following examples.</p><h4 id="Run-without-specifying-paths"><a href="#Run-without-specifying-paths" class="headerlink" title="Run without specifying paths"></a>Run without specifying paths</h4><p>If your system <code>PATH</code> variable includes the location of the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a> binary and if you use the default data directory (i.e., <code>/data/db</code>), simply enter <code>mongod</code> at the system prompt:</p><blockquote><pre><code class="hljs ebnf"><span class="hljs-attribute">mongod</span></code></pre></blockquote><h4 id="Specify-the-path-of-the-mongod¶"><a href="#Specify-the-path-of-the-mongod¶" class="headerlink" title="Specify the path of the mongod¶"></a>Specify the path of the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/#specify-the-path-of-the-mongod">¶</a></h4><p>If your <code>PATH</code> does not include the location of the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a> binary, enter the full path to the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a> binary at the system prompt:</p><pre><code class="hljs autoit">&lt;path <span class="hljs-keyword">to</span> <span class="hljs-built_in">binary</span>&gt;/mongod</code></pre><h4 id="Specify-the-path-of-the-data-directory"><a href="#Specify-the-path-of-the-data-directory" class="headerlink" title="Specify the path of the data directory"></a>Specify the path of the data directory</h4><p>If you do not use the default data directory (i.e., <code>/data/db</code>), specify the path to the data directory using the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#cmdoption-mongod-dbpath"><code>--dbpath</code></a> option:</p><pre><code class="hljs css">mongod <span class="hljs-attr">--dbpath</span> &lt;path <span class="hljs-selector-tag">to</span> data directory&gt;</code></pre><h3 id="Verify-that-MongoDB-has-started-successfully"><a href="#Verify-that-MongoDB-has-started-successfully" class="headerlink" title="Verify that MongoDB has started successfully"></a>Verify that MongoDB has started successfully</h3><p>Verify that MongoDB has started successfully by checking the process output for the following line:</p><pre><code class="hljs csharp">[<span class="hljs-meta">initandlisten</span>] waiting <span class="hljs-keyword">for</span> connections <span class="hljs-keyword">on</span> port <span class="hljs-number">27017</span></code></pre><p>The output should be visible in the terminal or shell window.</p><p>You may see non-critical warnings in the process output. As long as you see the log line shown above, you can safely ignore these warnings during your initial evaluation of MongoDB.</p><p><img src="../img/image-201803252036227.png" alt="mage-20180325203622"></p><h4 id="1-4-1-1-命令行连接（使用MongoDB客户端连接）"><a href="#1-4-1-1-命令行连接（使用MongoDB客户端连接）" class="headerlink" title="1.4.1.1. 命令行连接（使用MongoDB客户端连接）"></a>1.4.1.1. 命令行连接（使用MongoDB客户端连接）</h4><h5 id="1-4-1-1-1-说明"><a href="#1-4-1-1-1-说明" class="headerlink" title="1.4.1.1.1. 说明"></a>1.4.1.1.1. 说明</h5><p>安装的bin目录下有个mongo.exeCLI应用程序，执行它即可连接服务<br>基本语法mongo mongodb://ip:prot/database<br>语法中后面的都是可选项，如果不输默认为mongodb://127.0.0.1:27017/test<br>使用Ctrl + C，或者执行exit命令可中断连接</p><p><code>注：出自官方说明:</code></p><blockquote><p>Begin using MongoDB.</p></blockquote><blockquote><p>Start a <a href="https://docs.mongodb.com/manual/reference/program/mongo/#bin.mongo"><code>mongo</code></a> shell on the same host machine as the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a>. Use the <a href="https://docs.mongodb.com/manual/reference/program/mongo/#cmdoption-mongo-host"><code>--host</code></a> command line option to specify the localhost address and port that the <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod"><code>mongod</code></a> listens on:</p><pre><code class="hljs nginx"><span class="hljs-attribute">mongo</span> --host <span class="hljs-number">127.0.0.1:27017</span></code></pre></blockquote><h6 id="1-4-1-1-1-1-连接"><a href="#1-4-1-1-1-1-连接" class="headerlink" title="1.4.1.1.1.1. 连接"></a>1.4.1.1.1.1. 连接</h6><p>命令行工具中执行mongo连接默认数据库<br>使用show dbs命令查看所有数据库<br>使用use store命令切换到store数据库<br>如果当前没有这个数据库会自动创建后再切换<br>使用db命令可以查看当前所处数据库的名称<br>使用show collections命令可以查看当前数据库中的所有集合</p><h6 id="1-4-1-1-1-2-增"><a href="#1-4-1-1-1-2-增" class="headerlink" title="1.4.1.1.1.2. 增"></a>1.4.1.1.1.2. 增</h6><p>基本语法：数据库.集合.insert(JSON)<br>注意：这里插入的数据不用严格遵守JSON格式也可以<br>使用db.goods.insertOne({name: ‘豪车’, time: 2015})命令给goods集合文件插入一条数据<br>如果当前没有这个集合文件会自动创建后再插入<br>使用db.goods.insertMany([{name: ‘垃圾’, time: 2015}, {name: ‘奔驰’, time: 2012}, {name: ‘宝马’, time: 2012}])命令给goods集合文件插入多条数据<br>如果当前没有这个集合文件会自动创建后再插入<br>使用show collections命令查看集合变化</p><h6 id="1-4-1-1-1-3-查"><a href="#1-4-1-1-1-3-查" class="headerlink" title="1.4.1.1.1.3. 查"></a>1.4.1.1.1.3. 查</h6><p>基本语法：数据库.集合.find(条件)<br>注意：这里输入的键值必须使用引号包起来，否则查不到数据<br>补充：如果是查找多条数据，可以db.goods.find().pretty()格式化输出<br>使用db.goods.find()命令列出goods集合中的所有数据<br>使用db.goods.find({“time”: “2012”})命令找出time为2012的所有数据<br>使用db.goods.findOne({“time”: “2012”})命令找出time为2012的第一条数据<br>使用db.goods.find({“name”: /豪/})命令列出goods集合中name字段含有’豪’的数据<br>1.4.1.1.1.4. 删</p><p>基本语法：数据库.集合.remove(条件, 是否只删除一条)<br>使用db.goods.remove({‘time’: ‘2015’})命令删除goods集合中time为2015的所有数据<br>使用db.goods.remove({‘time’: ‘2012’}, true)命令删除goods集合中time为2012的第一条数据<br>使用db.goods.remove()命令删除全部数据</p><h6 id="1-4-1-1-1-5-改"><a href="#1-4-1-1-1-5-改" class="headerlink" title="1.4.1.1.1.5. 改"></a>1.4.1.1.1.5. 改</h6><p>基本语法：数据库.集合.update(条件, 新值, 没有匹配是否新增, 是否更新多条数据)<br>使用db.goods.update({‘time’: ‘2015’}, {‘name’: ‘玛莎拉’, ‘time’: ‘2017’})命令替换goods集合中time为2015的第一条数据<br>使用db.goods.update({‘time’: ‘2015’}, {$set: {‘time’: ‘2017’})命令替换goods集合中time为2015的第一条数据的time字段<br>1.4.1.1.1.6. save</p><p>基本语法：数据库.集合.save(JSON)<br>如果数据中含有_id字段，那么update这个_id的数据<br>如果没有_id字段，那么insert该数据</p><h4 id="1-4-1-2-node程序连接MongoDB"><a href="#1-4-1-2-node程序连接MongoDB" class="headerlink" title="1.4.1.2. node程序连接MongoDB"></a>1.4.1.2. node程序连接MongoDB</h4><h5 id="1-4-1-2-1-安装驱动包"><a href="#1-4-1-2-1-安装驱动包" class="headerlink" title="1.4.1.2.1. 安装驱动包"></a>1.4.1.2.1. 安装驱动包</h5><p>mongoDB支持众多编程语言来操作<br>每种编程语言官方都提供了相应的驱动包<br>在node.js中操作mongo需要安装mongodb这个包<br>使用cnpm install mongodb -S进行安装</p><h6 id="1-4-1-2-1-1-连接"><a href="#1-4-1-2-1-1-连接" class="headerlink" title="1.4.1.2.1.1. 连接"></a>1.4.1.2.1.1. 连接</h6><pre><code>&#39;use strict&#39;;const mongodb = require(&#39;mongodb&#39;);const MongoClient = mongodb.MongoClient;    // 连接itcast数据库let dbUrl = &#39;mongodb://localhost:27017/store&#39;;MongoClient.connect(dbUrl, (err, db) =&gt; &#123;    if(!err) &#123;        console.log(&#39;在这里进行数据的增删查改&#39;);    &#125;else &#123;        console.log(&#39;数据库连接失败&#39;);    &#125;&#125;);</code></pre><h6 id="1-4-1-2-1-2-增"><a href="#1-4-1-2-1-2-增" class="headerlink" title="1.4.1.2.1.2. 增"></a>1.4.1.2.1.2. 增</h6><pre><code>MongoClient.connect(dbUrl, (err, db) =&gt; &#123;    if(!err) &#123;        db.collection(&#39;goods&#39;).insertOne(&#123;            name: &#39;奖品&#39;, time: &#39;2015&#39;        &#125;, (err, result) =&gt; &#123;            if(!err) &#123;                console.log(result);            &#125;else &#123;                console.log(&#39;插入失败&#39;);            &#125;            // 操作完毕后调用close方法结束数据库连接以释放内存资源            db.close();        &#125;);    &#125;&#125;</code></pre><h6 id="1-4-1-2-1-3-删"><a href="#1-4-1-2-1-3-删" class="headerlink" title="1.4.1.2.1.3. 删"></a>1.4.1.2.1.3. 删</h6><pre><code>MongoClient.connect(dbUrl, (err, db) =&gt; &#123;    if(!err) &#123;        db.collection(&#39;goods&#39;).remove(&#123;            &#39;time&#39;: &#39;2015&#39;        &#125;, (err, result) =&gt; &#123;            if(!err) &#123;                console.log(result);            &#125;else &#123;                console.log(&#39;删除失败&#39;);            &#125;            // 操作完毕后调用close方法结束数据库连接以释放内存资源            db.close();        &#125;);    &#125;&#125;;</code></pre><h6 id="1-4-1-2-1-4-查"><a href="#1-4-1-2-1-4-查" class="headerlink" title="1.4.1.2.1.4. 查"></a>1.4.1.2.1.4. 查</h6><pre><code>MongoClient.connect(dbUrl, (err, db) =&gt; &#123;    if(!err) &#123;        db.collection(&#39;goods&#39;).find()        .toArray(function(err, result) &#123;            if(!err) &#123;                console.log(result);            &#125;else &#123;                console.log(&#39;搜索失败&#39;);                console.log(result);            &#125;            // 操作完毕后最好调用close方法结束数据库连接以释放内存资源            db.close();        &#125;);    &#125;&#125;;</code></pre><h6 id="1-4-1-2-1-5-改"><a href="#1-4-1-2-1-5-改" class="headerlink" title="1.4.1.2.1.5. 改"></a>1.4.1.2.1.5. 改</h6><pre><code>MongoClient.connect(dbUrl, (err, db) =&gt; &#123;    if(!err) &#123;        db.collection(&#39;students&#39;).update(&#123;            gender: &#39;女&#39;        &#125;,&#123;            $set: &#123; age: 18 &#125;        &#125;, (err, result) =&gt; &#123;            if(err) &#123;                console.log(&#39;修改失败&#39;);            &#125;else &#123;                console.log(&#39;修改成功&#39;);            &#125;            // 操作完毕后最好调用close方法结束数据库连接以释放内存资源            db.close();        &#125;);    &#125;&#125;;</code></pre><h2 id="1-5-常用方法"><a href="#1-5-常用方法" class="headerlink" title="1.5. 常用方法"></a>1.5. 常用方法</h2><h3 id="1-5-1-数据库实例"><a href="#1-5-1-数据库实例" class="headerlink" title="1.5.1. 数据库实例"></a>1.5.1. 数据库实例</h3><p>删除数据库自己<br>db.dropDatabase()<br>获取指定集合实例<br>db.collection(集合名称)</p><h4 id="1-5-1-1-集合实例"><a href="#1-5-1-1-集合实例" class="headerlink" title="1.5.1.1. 集合实例"></a>1.5.1.1. 集合实例</h4><p>删除集合自己<br>collection.drop()<br>插入数据<br>collection.insert(内容)<br>collection.insertOne(一条内容)<br>collection.insertMany(多条内容)<br>删除数据<br>collection.remove(条件, 是否只删除一条)<br>查找数据<br>collection.find(条件, isOne)<br>修改数据<br>collection.update(条件, 新值, 没有匹配是否新增, 是否更新多条数据)</p><h2 id="1-6-条件查询"><a href="#1-6-条件查询" class="headerlink" title="1.6. 条件查询"></a>1.6. 条件查询</h2><h3 id="1-6-1-含义"><a href="#1-6-1-含义" class="headerlink" title="1.6.1. 含义"></a>1.6.1. 含义</h3><p>(&gt;) 大于 - $gt (greater then)<br>(&lt;) 小于 - $lt (less then)<br>(&gt;=) 大于等于 - $gte (greater then or equal)<br>(&lt;= ) 小于等于 - $lte (less then or equal)<br>(!=) 不等于 - $ne (not equal)</p><h4 id="1-6-1-1-范例"><a href="#1-6-1-1-范例" class="headerlink" title="1.6.1.1. 范例"></a>1.6.1.1. 范例</h4><p>查询价格大于100的商品<br>db.store.find({price: {$gt: 100}})<br>查询价格小于100的商品<br>db.store.find({price: {$lt: 100}})<br>查询价格大于等于100的商品<br>db.store.find({price: {$gte: 100}})<br>查询价格小于等于100的商品<br>db.store.find({price: {$lte: 100}})<br>查询价格等于100的商品<br>db.store.find({price: 100})<br>查询价格不等于100的商品<br>db.store.find({price: {$ne: 100}})</p><h2 id="1-7-查询结果处理"><a href="#1-7-查询结果处理" class="headerlink" title="1.7. 查询结果处理"></a>1.7. 查询结果处理</h2><h3 id="1-7-1-指定起始位置与数量"><a href="#1-7-1-指定起始位置与数量" class="headerlink" title="1.7.1. 指定起始位置与数量"></a>1.7.1. 指定起始位置与数量</h3><p>获取下标2之后的数据<br>db.store.find().skip(2)<br>获取前2条数据<br>db.store.find().limit(2)<br>获取下标2之后的2条数据<br>db.store.find().skip(2).limit(2)</p><h4 id="1-7-1-1-排序"><a href="#1-7-1-1-排序" class="headerlink" title="1.7.1.1. 排序"></a>1.7.1.1. 排序</h4><p>以price字段做升序排序<br>db.store.find().sort({price: 1})<br>以price字段做降序排序<br>db.store.find().sort({price: -1})<br>注：这里必须是正1与负1</p><h4 id="1-7-1-2-结果数量"><a href="#1-7-1-2-结果数量" class="headerlink" title="1.7.1.2. 结果数量"></a>1.7.1.2. 结果数量</h4><p>获取价格大于100的商品数量<br>db.store.find({price: { $gt: 100 }}).count()</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
